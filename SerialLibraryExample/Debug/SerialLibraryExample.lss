
SerialLibraryExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003754  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00003754  00003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000464  20000000  0000375c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000644  20000464  00003bc0  00020464  2**2
                  ALLOC
  4 .stack        00002000  20000aa8  00004204  00020464  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002048c  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001d2b9  00000000  00000000  000204e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f4b  00000000  00000000  0003d79e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007ce2  00000000  00000000  000406e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006e0  00000000  00000000  000483cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b48  00000000  00000000  00048aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001759f  00000000  00000000  000495f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007f02  00000000  00000000  00060b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00082f8d  00000000  00000000  00068a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000014c4  00000000  00000000  000eba24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 2a 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .*. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	99 05 00 00 15 01 00 00 ad 05 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000464 	.word	0x20000464
      d4:	00000000 	.word	0x00000000
      d8:	0000375c 	.word	0x0000375c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000468 	.word	0x20000468
     108:	0000375c 	.word	0x0000375c
     10c:	0000375c 	.word	0x0000375c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	0000375c 	.word	0x0000375c
     1ac:	20000000 	.word	0x20000000
     1b0:	20000464 	.word	0x20000464
     1b4:	20000464 	.word	0x20000464
     1b8:	20000aa8 	.word	0x20000aa8
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	00003195 	.word	0x00003195
     1d8:	000005c5 	.word	0x000005c5

000001dc <_ZN19ExampleStateMachine19DisabledStateActionEv>:
//state action functions
StateMachine::STT_STATE ExampleStateMachine::DisabledStateAction(void)
{
	//do nothing
	return STT_STATE::INITIALIZING;
}
     1dc:	2001      	movs	r0, #1
     1de:	4770      	bx	lr

000001e0 <_ZN19ExampleStateMachine23InitializingStateActionEv>:

StateMachine::STT_STATE ExampleStateMachine::InitializingStateAction(void)
{
     1e0:	b510      	push	{r4, lr}
	//TODO: CHANGE CLOCK INITIALIZATION TO FIT HARDWARE
	// Switch CPU clock source to 32 kHz ultra low power oscillator
	Util::enterCriticalSection();
     1e2:	4b1b      	ldr	r3, [pc, #108]	; (250 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x70>)
     1e4:	4798      	blx	r3
	GCLK->GENCTRL.reg = GCLK_GENCTRL_SRC(GCLK_SOURCE_OSCULP32K) | GCLK_GENCTRL_GENEN;  // Change generator 0 source
     1e6:	4a1b      	ldr	r2, [pc, #108]	; (254 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x74>)
     1e8:	4b1b      	ldr	r3, [pc, #108]	; (258 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x78>)
     1ea:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);                                  // Wait for write to complete
     1ec:	4b1a      	ldr	r3, [pc, #104]	; (258 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x78>)
     1ee:	785b      	ldrb	r3, [r3, #1]
     1f0:	09db      	lsrs	r3, r3, #7
     1f2:	d1fb      	bne.n	1ec <_ZN19ExampleStateMachine23InitializingStateActionEv+0xc>

	// 8 MHz internal oscillator setup
	SYSCTRL->OSC8M.bit.ENABLE = 0x00u;                                 // Disable oscillator
     1f4:	4b19      	ldr	r3, [pc, #100]	; (25c <_ZN19ExampleStateMachine23InitializingStateActionEv+0x7c>)
     1f6:	6a19      	ldr	r1, [r3, #32]
     1f8:	2202      	movs	r2, #2
     1fa:	4391      	bics	r1, r2
     1fc:	6219      	str	r1, [r3, #32]
	while(SYSCTRL->OSC8M.bit.ENABLE);                                  // Wait for oscillator to stop
     1fe:	4b17      	ldr	r3, [pc, #92]	; (25c <_ZN19ExampleStateMachine23InitializingStateActionEv+0x7c>)
     200:	6a1b      	ldr	r3, [r3, #32]
     202:	079b      	lsls	r3, r3, #30
     204:	d4fb      	bmi.n	1fe <_ZN19ExampleStateMachine23InitializingStateActionEv+0x1e>
	SYSCTRL->OSC8M.bit.PRESC = 0x00u;                                  // Set options
     206:	4b15      	ldr	r3, [pc, #84]	; (25c <_ZN19ExampleStateMachine23InitializingStateActionEv+0x7c>)
     208:	6a19      	ldr	r1, [r3, #32]
     20a:	4a15      	ldr	r2, [pc, #84]	; (260 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x80>)
     20c:	400a      	ands	r2, r1
     20e:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ENABLE = 0x01u;                                 // Enable oscillator
     210:	6a19      	ldr	r1, [r3, #32]
     212:	2202      	movs	r2, #2
     214:	430a      	orrs	r2, r1
     216:	621a      	str	r2, [r3, #32]
	while(!(SYSCTRL->OSC8M.bit.ENABLE));                               // Wait for oscillator to become ready
     218:	4b10      	ldr	r3, [pc, #64]	; (25c <_ZN19ExampleStateMachine23InitializingStateActionEv+0x7c>)
     21a:	6a1b      	ldr	r3, [r3, #32]
     21c:	079b      	lsls	r3, r3, #30
     21e:	d5fb      	bpl.n	218 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x38>

	// Set Generic Clock Generator 0 to use the 8 MHz oscillator
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC(GCLK_SOURCE_OSC8M) | GCLK_GENCTRL_GENEN;  // Change generator 0 source
     220:	2283      	movs	r2, #131	; 0x83
     222:	0252      	lsls	r2, r2, #9
     224:	4b0c      	ldr	r3, [pc, #48]	; (258 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x78>)
     226:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);                                  // Wait for write to complete
     228:	4b0b      	ldr	r3, [pc, #44]	; (258 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x78>)
     22a:	785b      	ldrb	r3, [r3, #1]
     22c:	09db      	lsrs	r3, r3, #7
     22e:	d1fb      	bne.n	228 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x48>
	Util::exitCriticalSection();
     230:	4b0c      	ldr	r3, [pc, #48]	; (264 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x84>)
     232:	4798      	blx	r3
	UARTHAL::Peripheral uart_peripheral;
	UARTHAL::GetPeripheralDefaults(&uart_peripheral);
	uart_peripheral.baud_value = (uint32_t)BAUD_RATE;
	uart_controller.Init(&uart_peripheral, TX_BUFFER, sizeof(TX_BUFFER), RX_BUFFER, sizeof(RX_BUFFER));
	#else
	usb_controller.Init(RX_BUFFER, sizeof(RX_BUFFER));
     234:	4c0c      	ldr	r4, [pc, #48]	; (268 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x88>)
     236:	2280      	movs	r2, #128	; 0x80
     238:	0092      	lsls	r2, r2, #2
     23a:	490c      	ldr	r1, [pc, #48]	; (26c <_ZN19ExampleStateMachine23InitializingStateActionEv+0x8c>)
     23c:	0020      	movs	r0, r4
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x90>)
     240:	4798      	blx	r3
	usb_controller.Task(echo);
     242:	2320      	movs	r3, #32
     244:	5ce1      	ldrb	r1, [r4, r3]
     246:	0020      	movs	r0, r4
     248:	4b0a      	ldr	r3, [pc, #40]	; (274 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x94>)
     24a:	4798      	blx	r3
	#endif
	
	return STT_STATE::OFF;
}
     24c:	2002      	movs	r0, #2
     24e:	bd10      	pop	{r4, pc}
     250:	00003031 	.word	0x00003031
     254:	00010300 	.word	0x00010300
     258:	40000c00 	.word	0x40000c00
     25c:	40000800 	.word	0x40000800
     260:	fffffcff 	.word	0xfffffcff
     264:	00003049 	.word	0x00003049
     268:	20000680 	.word	0x20000680
     26c:	20000480 	.word	0x20000480
     270:	00002e41 	.word	0x00002e41
     274:	00002ce9 	.word	0x00002ce9

00000278 <_ZN19ExampleStateMachine21PromptUserStateActionEv>:
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
	return current_state;
}

StateMachine::STT_STATE ExampleStateMachine::PromptUserStateAction(void)
{
     278:	b510      	push	{r4, lr}
	#ifdef USING_UART
	uart_controller.TransmitString("Send strings through terminal to see responses!\n");
	#else
	usb_controller.Task(echo);
     27a:	4c06      	ldr	r4, [pc, #24]	; (294 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x1c>)
     27c:	2320      	movs	r3, #32
     27e:	5ce1      	ldrb	r1, [r4, r3]
     280:	0020      	movs	r0, r4
     282:	4b05      	ldr	r3, [pc, #20]	; (298 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x20>)
     284:	4798      	blx	r3
	usb_controller.TransmitString("Send strings through terminal to see responses!\n");
     286:	4905      	ldr	r1, [pc, #20]	; (29c <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x24>)
     288:	0020      	movs	r0, r4
     28a:	4b05      	ldr	r3, [pc, #20]	; (2a0 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x28>)
     28c:	4798      	blx	r3
	#endif
	return STT_STATE::ON;
}
     28e:	2004      	movs	r0, #4
     290:	bd10      	pop	{r4, pc}
     292:	46c0      	nop			; (mov r8, r8)
     294:	20000680 	.word	0x20000680
     298:	00002ce9 	.word	0x00002ce9
     29c:	000034b0 	.word	0x000034b0
     2a0:	00002c41 	.word	0x00002c41

000002a4 <_Z41__static_initialization_and_destruction_0ii>:
{
	#ifdef USING_UART
	uart_controller.ISR();
	if(echo) uart_controller.EchoRx();
	#endif
}
     2a4:	b510      	push	{r4, lr}
     2a6:	2801      	cmp	r0, #1
     2a8:	d000      	beq.n	2ac <_Z41__static_initialization_and_destruction_0ii+0x8>
     2aa:	bd10      	pop	{r4, pc}
     2ac:	4b06      	ldr	r3, [pc, #24]	; (2c8 <_Z41__static_initialization_and_destruction_0ii+0x24>)
     2ae:	4299      	cmp	r1, r3
     2b0:	d1fb      	bne.n	2aa <_Z41__static_initialization_and_destruction_0ii+0x6>
SerialUSB::USBController usb_controller;
     2b2:	4c06      	ldr	r4, [pc, #24]	; (2cc <_Z41__static_initialization_and_destruction_0ii+0x28>)
     2b4:	0020      	movs	r0, r4
     2b6:	4b06      	ldr	r3, [pc, #24]	; (2d0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
     2b8:	4798      	blx	r3
     2ba:	4a06      	ldr	r2, [pc, #24]	; (2d4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
     2bc:	4906      	ldr	r1, [pc, #24]	; (2d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
     2be:	0020      	movs	r0, r4
     2c0:	4b06      	ldr	r3, [pc, #24]	; (2dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
     2c2:	4798      	blx	r3
}
     2c4:	e7f1      	b.n	2aa <_Z41__static_initialization_and_destruction_0ii+0x6>
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	0000ffff 	.word	0x0000ffff
     2cc:	20000680 	.word	0x20000680
     2d0:	00002b85 	.word	0x00002b85
     2d4:	20000000 	.word	0x20000000
     2d8:	00002e05 	.word	0x00002e05
     2dc:	0000305d 	.word	0x0000305d

000002e0 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE>:
	state_machine->current_state = STT_STATE::DISABLED;
     2e0:	2300      	movs	r3, #0
     2e2:	7003      	strb	r3, [r0, #0]
	state_machine->state_actions[STT_STATE::DISABLED] = &DisabledStateAction;
     2e4:	4b05      	ldr	r3, [pc, #20]	; (2fc <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x1c>)
     2e6:	6043      	str	r3, [r0, #4]
	state_machine->state_actions[STT_STATE::INITIALIZING] = &InitializingStateAction;
     2e8:	4b05      	ldr	r3, [pc, #20]	; (300 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x20>)
     2ea:	6083      	str	r3, [r0, #8]
	state_machine->state_actions[STT_STATE::OFF] = &OffStateAction;
     2ec:	4b05      	ldr	r3, [pc, #20]	; (304 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x24>)
     2ee:	60c3      	str	r3, [r0, #12]
	state_machine->state_actions[STT_STATE::PROMPT_USER] = &PromptUserStateAction;
     2f0:	4b05      	ldr	r3, [pc, #20]	; (308 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x28>)
     2f2:	6103      	str	r3, [r0, #16]
	state_machine->state_actions[STT_STATE::ON] = &OnStateAction;
     2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x2c>)
     2f6:	6143      	str	r3, [r0, #20]
}
     2f8:	4770      	bx	lr
     2fa:	46c0      	nop			; (mov r8, r8)
     2fc:	000001dd 	.word	0x000001dd
     300:	000001e1 	.word	0x000001e1
     304:	00000361 	.word	0x00000361
     308:	00000279 	.word	0x00000279
     30c:	00000455 	.word	0x00000455

00000310 <_ZN19ExampleStateMachine9UnpluggedEv>:
{
     310:	b510      	push	{r4, lr}
	bool unplugged =  connected && !usb_controller.IsConnected();
     312:	2321      	movs	r3, #33	; 0x21
     314:	4a09      	ldr	r2, [pc, #36]	; (33c <_ZN19ExampleStateMachine9UnpluggedEv+0x2c>)
     316:	5cd4      	ldrb	r4, [r2, r3]
     318:	2c00      	cmp	r4, #0
     31a:	d107      	bne.n	32c <_ZN19ExampleStateMachine9UnpluggedEv+0x1c>
	if(unplugged)
     31c:	2c00      	cmp	r4, #0
     31e:	d003      	beq.n	328 <_ZN19ExampleStateMachine9UnpluggedEv+0x18>
		connected = false;
     320:	2100      	movs	r1, #0
     322:	2321      	movs	r3, #33	; 0x21
     324:	4a05      	ldr	r2, [pc, #20]	; (33c <_ZN19ExampleStateMachine9UnpluggedEv+0x2c>)
     326:	54d1      	strb	r1, [r2, r3]
}
     328:	0020      	movs	r0, r4
     32a:	bd10      	pop	{r4, pc}
	bool unplugged =  connected && !usb_controller.IsConnected();
     32c:	0010      	movs	r0, r2
     32e:	4b04      	ldr	r3, [pc, #16]	; (340 <_ZN19ExampleStateMachine9UnpluggedEv+0x30>)
     330:	4798      	blx	r3
     332:	2800      	cmp	r0, #0
     334:	d0f2      	beq.n	31c <_ZN19ExampleStateMachine9UnpluggedEv+0xc>
     336:	2400      	movs	r4, #0
     338:	e7f0      	b.n	31c <_ZN19ExampleStateMachine9UnpluggedEv+0xc>
     33a:	46c0      	nop			; (mov r8, r8)
     33c:	20000680 	.word	0x20000680
     340:	00002da9 	.word	0x00002da9

00000344 <_ZN19ExampleStateMachine6TurnOnEv>:
{
     344:	b510      	push	{r4, lr}
	return usb_controller.ReceiveString("on");
     346:	2301      	movs	r3, #1
     348:	2200      	movs	r2, #0
     34a:	4902      	ldr	r1, [pc, #8]	; (354 <_ZN19ExampleStateMachine6TurnOnEv+0x10>)
     34c:	4802      	ldr	r0, [pc, #8]	; (358 <_ZN19ExampleStateMachine6TurnOnEv+0x14>)
     34e:	4c03      	ldr	r4, [pc, #12]	; (35c <_ZN19ExampleStateMachine6TurnOnEv+0x18>)
     350:	47a0      	blx	r4
}
     352:	bd10      	pop	{r4, pc}
     354:	000034e4 	.word	0x000034e4
     358:	20000680 	.word	0x20000680
     35c:	00002c79 	.word	0x00002c79

00000360 <_ZN19ExampleStateMachine14OffStateActionEv>:
{
     360:	b530      	push	{r4, r5, lr}
     362:	b083      	sub	sp, #12
	StateMachine::STT_STATE current_state = STT_STATE::OFF;
     364:	2202      	movs	r2, #2
     366:	466b      	mov	r3, sp
     368:	71da      	strb	r2, [r3, #7]
	usb_controller.Task(echo);
     36a:	4c0f      	ldr	r4, [pc, #60]	; (3a8 <_ZN19ExampleStateMachine14OffStateActionEv+0x48>)
     36c:	2520      	movs	r5, #32
     36e:	5d61      	ldrb	r1, [r4, r5]
     370:	0020      	movs	r0, r4
     372:	4b0e      	ldr	r3, [pc, #56]	; (3ac <_ZN19ExampleStateMachine14OffStateActionEv+0x4c>)
     374:	4798      	blx	r3
	echo = false;
     376:	2300      	movs	r3, #0
     378:	5563      	strb	r3, [r4, r5]
	if(TurnOn())
     37a:	4b0d      	ldr	r3, [pc, #52]	; (3b0 <_ZN19ExampleStateMachine14OffStateActionEv+0x50>)
     37c:	4798      	blx	r3
     37e:	2800      	cmp	r0, #0
     380:	d109      	bne.n	396 <_ZN19ExampleStateMachine14OffStateActionEv+0x36>
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
     382:	466b      	mov	r3, sp
     384:	1ddc      	adds	r4, r3, #7
     386:	4a0b      	ldr	r2, [pc, #44]	; (3b4 <_ZN19ExampleStateMachine14OffStateActionEv+0x54>)
     388:	2105      	movs	r1, #5
     38a:	0020      	movs	r0, r4
     38c:	4b0a      	ldr	r3, [pc, #40]	; (3b8 <_ZN19ExampleStateMachine14OffStateActionEv+0x58>)
     38e:	4798      	blx	r3
	return current_state;
     390:	7820      	ldrb	r0, [r4, #0]
}
     392:	b003      	add	sp, #12
     394:	bd30      	pop	{r4, r5, pc}
		usb_controller.TransmitString("On command received! Turning on...\n");
     396:	4909      	ldr	r1, [pc, #36]	; (3bc <_ZN19ExampleStateMachine14OffStateActionEv+0x5c>)
     398:	4803      	ldr	r0, [pc, #12]	; (3a8 <_ZN19ExampleStateMachine14OffStateActionEv+0x48>)
     39a:	4b09      	ldr	r3, [pc, #36]	; (3c0 <_ZN19ExampleStateMachine14OffStateActionEv+0x60>)
     39c:	4798      	blx	r3
		current_state = STT_STATE::PROMPT_USER;
     39e:	2203      	movs	r2, #3
     3a0:	466b      	mov	r3, sp
     3a2:	71da      	strb	r2, [r3, #7]
     3a4:	e7ed      	b.n	382 <_ZN19ExampleStateMachine14OffStateActionEv+0x22>
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	20000680 	.word	0x20000680
     3ac:	00002ce9 	.word	0x00002ce9
     3b0:	00000345 	.word	0x00000345
     3b4:	000003f1 	.word	0x000003f1
     3b8:	0000301f 	.word	0x0000301f
     3bc:	000034e8 	.word	0x000034e8
     3c0:	00002c41 	.word	0x00002c41

000003c4 <_ZN19ExampleStateMachine9PluggedInEv>:
{
     3c4:	b510      	push	{r4, lr}
	bool plugged_in = !connected && usb_controller.IsConnected();
     3c6:	2321      	movs	r3, #33	; 0x21
     3c8:	4a07      	ldr	r2, [pc, #28]	; (3e8 <_ZN19ExampleStateMachine9PluggedInEv+0x24>)
     3ca:	5cd3      	ldrb	r3, [r2, r3]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d007      	beq.n	3e0 <_ZN19ExampleStateMachine9PluggedInEv+0x1c>
     3d0:	2000      	movs	r0, #0
	if(plugged_in)
     3d2:	2800      	cmp	r0, #0
     3d4:	d003      	beq.n	3de <_ZN19ExampleStateMachine9PluggedInEv+0x1a>
		connected = true;
     3d6:	2101      	movs	r1, #1
     3d8:	2321      	movs	r3, #33	; 0x21
     3da:	4a03      	ldr	r2, [pc, #12]	; (3e8 <_ZN19ExampleStateMachine9PluggedInEv+0x24>)
     3dc:	54d1      	strb	r1, [r2, r3]
}
     3de:	bd10      	pop	{r4, pc}
	bool plugged_in = !connected && usb_controller.IsConnected();
     3e0:	0010      	movs	r0, r2
     3e2:	4b02      	ldr	r3, [pc, #8]	; (3ec <_ZN19ExampleStateMachine9PluggedInEv+0x28>)
     3e4:	4798      	blx	r3
     3e6:	e7f4      	b.n	3d2 <_ZN19ExampleStateMachine9PluggedInEv+0xe>
     3e8:	20000680 	.word	0x20000680
     3ec:	00002da9 	.word	0x00002da9

000003f0 <_ZN19ExampleStateMachine16SuperStateActionEv>:
{
     3f0:	b510      	push	{r4, lr}
	usb_controller.Task(echo);
     3f2:	480b      	ldr	r0, [pc, #44]	; (420 <_ZN19ExampleStateMachine16SuperStateActionEv+0x30>)
     3f4:	2320      	movs	r3, #32
     3f6:	5cc1      	ldrb	r1, [r0, r3]
     3f8:	4b0a      	ldr	r3, [pc, #40]	; (424 <_ZN19ExampleStateMachine16SuperStateActionEv+0x34>)
     3fa:	4798      	blx	r3
	if(Unplugged())
     3fc:	4b0a      	ldr	r3, [pc, #40]	; (428 <_ZN19ExampleStateMachine16SuperStateActionEv+0x38>)
     3fe:	4798      	blx	r3
     400:	2800      	cmp	r0, #0
     402:	d001      	beq.n	408 <_ZN19ExampleStateMachine16SuperStateActionEv+0x18>
		return STT_STATE::OFF;
     404:	2002      	movs	r0, #2
}
     406:	bd10      	pop	{r4, pc}
	else if(PluggedIn())
     408:	4b08      	ldr	r3, [pc, #32]	; (42c <_ZN19ExampleStateMachine16SuperStateActionEv+0x3c>)
     40a:	4798      	blx	r3
     40c:	2800      	cmp	r0, #0
     40e:	d101      	bne.n	414 <_ZN19ExampleStateMachine16SuperStateActionEv+0x24>
	return STT_STATE::SUPER;
     410:	2005      	movs	r0, #5
     412:	e7f8      	b.n	406 <_ZN19ExampleStateMachine16SuperStateActionEv+0x16>
		usb_controller.TransmitString("USB plugged in!\n");
     414:	4906      	ldr	r1, [pc, #24]	; (430 <_ZN19ExampleStateMachine16SuperStateActionEv+0x40>)
     416:	4802      	ldr	r0, [pc, #8]	; (420 <_ZN19ExampleStateMachine16SuperStateActionEv+0x30>)
     418:	4b06      	ldr	r3, [pc, #24]	; (434 <_ZN19ExampleStateMachine16SuperStateActionEv+0x44>)
     41a:	4798      	blx	r3
		return STT_STATE::PROMPT_USER;
     41c:	2003      	movs	r0, #3
     41e:	e7f2      	b.n	406 <_ZN19ExampleStateMachine16SuperStateActionEv+0x16>
     420:	20000680 	.word	0x20000680
     424:	00002ce9 	.word	0x00002ce9
     428:	00000311 	.word	0x00000311
     42c:	000003c5 	.word	0x000003c5
     430:	0000350c 	.word	0x0000350c
     434:	00002c41 	.word	0x00002c41

00000438 <_ZN19ExampleStateMachine7TurnOffEv>:
{
     438:	b510      	push	{r4, lr}
	return usb_controller.ReceiveString("off");
     43a:	2301      	movs	r3, #1
     43c:	2200      	movs	r2, #0
     43e:	4902      	ldr	r1, [pc, #8]	; (448 <_ZN19ExampleStateMachine7TurnOffEv+0x10>)
     440:	4802      	ldr	r0, [pc, #8]	; (44c <_ZN19ExampleStateMachine7TurnOffEv+0x14>)
     442:	4c03      	ldr	r4, [pc, #12]	; (450 <_ZN19ExampleStateMachine7TurnOffEv+0x18>)
     444:	47a0      	blx	r4
}
     446:	bd10      	pop	{r4, pc}
     448:	00003520 	.word	0x00003520
     44c:	20000680 	.word	0x20000680
     450:	00002c79 	.word	0x00002c79

00000454 <_ZN19ExampleStateMachine13OnStateActionEv>:
{
     454:	b530      	push	{r4, r5, lr}
     456:	b085      	sub	sp, #20
	StateMachine::STT_STATE current_state = STT_STATE::ON;
     458:	2204      	movs	r2, #4
     45a:	230f      	movs	r3, #15
     45c:	446b      	add	r3, sp
     45e:	701a      	strb	r2, [r3, #0]
	usb_controller.Task(echo);
     460:	4c39      	ldr	r4, [pc, #228]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     462:	2320      	movs	r3, #32
     464:	5ce1      	ldrb	r1, [r4, r3]
     466:	0020      	movs	r0, r4
     468:	4b38      	ldr	r3, [pc, #224]	; (54c <_ZN19ExampleStateMachine13OnStateActionEv+0xf8>)
     46a:	4798      	blx	r3
	if(usb_controller.ReceiveString("hello world"))
     46c:	2301      	movs	r3, #1
     46e:	2200      	movs	r2, #0
     470:	4937      	ldr	r1, [pc, #220]	; (550 <_ZN19ExampleStateMachine13OnStateActionEv+0xfc>)
     472:	0020      	movs	r0, r4
     474:	4c37      	ldr	r4, [pc, #220]	; (554 <_ZN19ExampleStateMachine13OnStateActionEv+0x100>)
     476:	47a0      	blx	r4
     478:	2800      	cmp	r0, #0
     47a:	d011      	beq.n	4a0 <_ZN19ExampleStateMachine13OnStateActionEv+0x4c>
		usb_controller.TransmitString("World: hello!\n");
     47c:	4936      	ldr	r1, [pc, #216]	; (558 <_ZN19ExampleStateMachine13OnStateActionEv+0x104>)
     47e:	4832      	ldr	r0, [pc, #200]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     480:	4b36      	ldr	r3, [pc, #216]	; (55c <_ZN19ExampleStateMachine13OnStateActionEv+0x108>)
     482:	4798      	blx	r3
	if(TurnOff())
     484:	4b36      	ldr	r3, [pc, #216]	; (560 <_ZN19ExampleStateMachine13OnStateActionEv+0x10c>)
     486:	4798      	blx	r3
     488:	2800      	cmp	r0, #0
     48a:	d154      	bne.n	536 <_ZN19ExampleStateMachine13OnStateActionEv+0xe2>
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
     48c:	240f      	movs	r4, #15
     48e:	446c      	add	r4, sp
     490:	4a34      	ldr	r2, [pc, #208]	; (564 <_ZN19ExampleStateMachine13OnStateActionEv+0x110>)
     492:	2105      	movs	r1, #5
     494:	0020      	movs	r0, r4
     496:	4b34      	ldr	r3, [pc, #208]	; (568 <_ZN19ExampleStateMachine13OnStateActionEv+0x114>)
     498:	4798      	blx	r3
	return current_state;
     49a:	7820      	ldrb	r0, [r4, #0]
}
     49c:	b005      	add	sp, #20
     49e:	bd30      	pop	{r4, r5, pc}
	else if(usb_controller.ReceiveString("echo"))
     4a0:	2301      	movs	r3, #1
     4a2:	2200      	movs	r2, #0
     4a4:	4931      	ldr	r1, [pc, #196]	; (56c <_ZN19ExampleStateMachine13OnStateActionEv+0x118>)
     4a6:	4828      	ldr	r0, [pc, #160]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     4a8:	4c2a      	ldr	r4, [pc, #168]	; (554 <_ZN19ExampleStateMachine13OnStateActionEv+0x100>)
     4aa:	47a0      	blx	r4
     4ac:	2800      	cmp	r0, #0
     4ae:	d00f      	beq.n	4d0 <_ZN19ExampleStateMachine13OnStateActionEv+0x7c>
		usb_controller.TransmitString("Received data will now be echoed!\n");
     4b0:	4c25      	ldr	r4, [pc, #148]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     4b2:	492f      	ldr	r1, [pc, #188]	; (570 <_ZN19ExampleStateMachine13OnStateActionEv+0x11c>)
     4b4:	0020      	movs	r0, r4
     4b6:	4d29      	ldr	r5, [pc, #164]	; (55c <_ZN19ExampleStateMachine13OnStateActionEv+0x108>)
     4b8:	47a8      	blx	r5
		echo = true;
     4ba:	2201      	movs	r2, #1
     4bc:	2320      	movs	r3, #32
     4be:	54e2      	strb	r2, [r4, r3]
		usb_controller.Task(echo);
     4c0:	2101      	movs	r1, #1
     4c2:	0020      	movs	r0, r4
     4c4:	4b21      	ldr	r3, [pc, #132]	; (54c <_ZN19ExampleStateMachine13OnStateActionEv+0xf8>)
     4c6:	4798      	blx	r3
		usb_controller.TransmitString("(Regular function will cease until unplugged)\n");
     4c8:	492a      	ldr	r1, [pc, #168]	; (574 <_ZN19ExampleStateMachine13OnStateActionEv+0x120>)
     4ca:	0020      	movs	r0, r4
     4cc:	47a8      	blx	r5
     4ce:	e7d9      	b.n	484 <_ZN19ExampleStateMachine13OnStateActionEv+0x30>
	else if(usb_controller.ReceiveParam(&param, "integer_"))
     4d0:	481d      	ldr	r0, [pc, #116]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     4d2:	0001      	movs	r1, r0
     4d4:	3124      	adds	r1, #36	; 0x24
     4d6:	2308      	movs	r3, #8
     4d8:	9300      	str	r3, [sp, #0]
     4da:	2300      	movs	r3, #0
     4dc:	4a26      	ldr	r2, [pc, #152]	; (578 <_ZN19ExampleStateMachine13OnStateActionEv+0x124>)
     4de:	4c27      	ldr	r4, [pc, #156]	; (57c <_ZN19ExampleStateMachine13OnStateActionEv+0x128>)
     4e0:	47a0      	blx	r4
     4e2:	2800      	cmp	r0, #0
     4e4:	d00d      	beq.n	502 <_ZN19ExampleStateMachine13OnStateActionEv+0xae>
		usb_controller.TransmitString("Integer: ");
     4e6:	4c18      	ldr	r4, [pc, #96]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     4e8:	4925      	ldr	r1, [pc, #148]	; (580 <_ZN19ExampleStateMachine13OnStateActionEv+0x12c>)
     4ea:	0020      	movs	r0, r4
     4ec:	4b1b      	ldr	r3, [pc, #108]	; (55c <_ZN19ExampleStateMachine13OnStateActionEv+0x108>)
     4ee:	4798      	blx	r3
		usb_controller.TransmitInt(param);
     4f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
     4f2:	0020      	movs	r0, r4
     4f4:	4b23      	ldr	r3, [pc, #140]	; (584 <_ZN19ExampleStateMachine13OnStateActionEv+0x130>)
     4f6:	4798      	blx	r3
		usb_controller.Transmit('\n');
     4f8:	210a      	movs	r1, #10
     4fa:	0020      	movs	r0, r4
     4fc:	4b22      	ldr	r3, [pc, #136]	; (588 <_ZN19ExampleStateMachine13OnStateActionEv+0x134>)
     4fe:	4798      	blx	r3
     500:	e7c0      	b.n	484 <_ZN19ExampleStateMachine13OnStateActionEv+0x30>
	else if(usb_controller.ReceiveParam(&param, "square_",'!'))
     502:	4811      	ldr	r0, [pc, #68]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     504:	0001      	movs	r1, r0
     506:	3124      	adds	r1, #36	; 0x24
     508:	2308      	movs	r3, #8
     50a:	9300      	str	r3, [sp, #0]
     50c:	3319      	adds	r3, #25
     50e:	4a1f      	ldr	r2, [pc, #124]	; (58c <_ZN19ExampleStateMachine13OnStateActionEv+0x138>)
     510:	4c1a      	ldr	r4, [pc, #104]	; (57c <_ZN19ExampleStateMachine13OnStateActionEv+0x128>)
     512:	47a0      	blx	r4
     514:	2800      	cmp	r0, #0
     516:	d0b5      	beq.n	484 <_ZN19ExampleStateMachine13OnStateActionEv+0x30>
		usb_controller.TransmitString("Square value: ");
     518:	4c0b      	ldr	r4, [pc, #44]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     51a:	491d      	ldr	r1, [pc, #116]	; (590 <_ZN19ExampleStateMachine13OnStateActionEv+0x13c>)
     51c:	0020      	movs	r0, r4
     51e:	4b0f      	ldr	r3, [pc, #60]	; (55c <_ZN19ExampleStateMachine13OnStateActionEv+0x108>)
     520:	4798      	blx	r3
		usb_controller.TransmitInt(param * param);
     522:	6a61      	ldr	r1, [r4, #36]	; 0x24
     524:	4349      	muls	r1, r1
     526:	0020      	movs	r0, r4
     528:	4b16      	ldr	r3, [pc, #88]	; (584 <_ZN19ExampleStateMachine13OnStateActionEv+0x130>)
     52a:	4798      	blx	r3
		usb_controller.Transmit('\n');
     52c:	210a      	movs	r1, #10
     52e:	0020      	movs	r0, r4
     530:	4b15      	ldr	r3, [pc, #84]	; (588 <_ZN19ExampleStateMachine13OnStateActionEv+0x134>)
     532:	4798      	blx	r3
     534:	e7a6      	b.n	484 <_ZN19ExampleStateMachine13OnStateActionEv+0x30>
		usb_controller.TransmitString("Off command received! Turning off...\n");
     536:	4917      	ldr	r1, [pc, #92]	; (594 <_ZN19ExampleStateMachine13OnStateActionEv+0x140>)
     538:	4803      	ldr	r0, [pc, #12]	; (548 <_ZN19ExampleStateMachine13OnStateActionEv+0xf4>)
     53a:	4b08      	ldr	r3, [pc, #32]	; (55c <_ZN19ExampleStateMachine13OnStateActionEv+0x108>)
     53c:	4798      	blx	r3
		current_state = STT_STATE::OFF;
     53e:	2202      	movs	r2, #2
     540:	230f      	movs	r3, #15
     542:	446b      	add	r3, sp
     544:	701a      	strb	r2, [r3, #0]
     546:	e7a1      	b.n	48c <_ZN19ExampleStateMachine13OnStateActionEv+0x38>
     548:	20000680 	.word	0x20000680
     54c:	00002ce9 	.word	0x00002ce9
     550:	00003524 	.word	0x00003524
     554:	00002c79 	.word	0x00002c79
     558:	00003530 	.word	0x00003530
     55c:	00002c41 	.word	0x00002c41
     560:	00000439 	.word	0x00000439
     564:	000003f1 	.word	0x000003f1
     568:	0000301f 	.word	0x0000301f
     56c:	00003540 	.word	0x00003540
     570:	00003548 	.word	0x00003548
     574:	0000356c 	.word	0x0000356c
     578:	0000359c 	.word	0x0000359c
     57c:	00002cb5 	.word	0x00002cb5
     580:	000035a8 	.word	0x000035a8
     584:	00002c91 	.word	0x00002c91
     588:	00002be9 	.word	0x00002be9
     58c:	000035b4 	.word	0x000035b4
     590:	000035bc 	.word	0x000035bc
     594:	000035cc 	.word	0x000035cc

00000598 <USB_Handler>:
{
     598:	b510      	push	{r4, lr}
	usb_controller.ISR();
     59a:	4802      	ldr	r0, [pc, #8]	; (5a4 <USB_Handler+0xc>)
     59c:	4b02      	ldr	r3, [pc, #8]	; (5a8 <USB_Handler+0x10>)
     59e:	4798      	blx	r3
}
     5a0:	bd10      	pop	{r4, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	20000680 	.word	0x20000680
     5a8:	00002bd9 	.word	0x00002bd9

000005ac <SERCOM0_Handler>:
}
     5ac:	4770      	bx	lr
	...

000005b0 <_GLOBAL__sub_I_RX_BUFFER>:
     5b0:	b510      	push	{r4, lr}
     5b2:	4902      	ldr	r1, [pc, #8]	; (5bc <_GLOBAL__sub_I_RX_BUFFER+0xc>)
     5b4:	2001      	movs	r0, #1
     5b6:	4b02      	ldr	r3, [pc, #8]	; (5c0 <_GLOBAL__sub_I_RX_BUFFER+0x10>)
     5b8:	4798      	blx	r3
     5ba:	bd10      	pop	{r4, pc}
     5bc:	0000ffff 	.word	0x0000ffff
     5c0:	000002a5 	.word	0x000002a5

000005c4 <main>:
#include "sam.h"
#include "example_state_machine.h"


int main(void)
{
     5c4:	b500      	push	{lr}
     5c6:	b087      	sub	sp, #28
    StateMachine::STT_MACHINE example_state_machine;
	ExampleStateMachine::GetExampleStateMachine(&example_state_machine);
     5c8:	4668      	mov	r0, sp
     5ca:	4b03      	ldr	r3, [pc, #12]	; (5d8 <main+0x14>)
     5cc:	4798      	blx	r3
    while (1) 
    {
		StateMachine::ExecuteAction(&example_state_machine);
     5ce:	4668      	mov	r0, sp
     5d0:	4b02      	ldr	r3, [pc, #8]	; (5dc <main+0x18>)
     5d2:	4798      	blx	r3
     5d4:	e7fb      	b.n	5ce <main+0xa>
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	000002e1 	.word	0x000002e1
     5dc:	0000300d 	.word	0x0000300d

000005e0 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	0004      	movs	r4, r0
  uint8_t const rhport = 0;
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
     5e4:	0005      	movs	r5, r0
     5e6:	3510      	adds	r5, #16
     5e8:	0028      	movs	r0, r5
     5ea:	4b0f      	ldr	r3, [pc, #60]	; (628 <_prep_out_transaction+0x48>)
     5ec:	4798      	blx	r3

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
     5ee:	283f      	cmp	r0, #63	; 0x3f
     5f0:	d801      	bhi.n	5f6 <_prep_out_transaction+0x16>
     5f2:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);

    return false;
  }
}
     5f4:	bd70      	pop	{r4, r5, r6, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
     5f6:	78e1      	ldrb	r1, [r4, #3]
     5f8:	2000      	movs	r0, #0
     5fa:	4b0c      	ldr	r3, [pc, #48]	; (62c <_prep_out_transaction+0x4c>)
     5fc:	4798      	blx	r3
     5fe:	2800      	cmp	r0, #0
     600:	d0f8      	beq.n	5f4 <_prep_out_transaction+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
     602:	0028      	movs	r0, r5
     604:	4b08      	ldr	r3, [pc, #32]	; (628 <_prep_out_transaction+0x48>)
     606:	4798      	blx	r3
  if ( available >= sizeof(p_cdc->epout_buf) )
     608:	283f      	cmp	r0, #63	; 0x3f
     60a:	d805      	bhi.n	618 <_prep_out_transaction+0x38>
    usbd_edpt_release(rhport, p_cdc->ep_out);
     60c:	78e1      	ldrb	r1, [r4, #3]
     60e:	2000      	movs	r0, #0
     610:	4b07      	ldr	r3, [pc, #28]	; (630 <_prep_out_transaction+0x50>)
     612:	4798      	blx	r3
    return false;
     614:	2000      	movs	r0, #0
     616:	e7ed      	b.n	5f4 <_prep_out_transaction+0x14>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
     618:	0022      	movs	r2, r4
     61a:	32b8      	adds	r2, #184	; 0xb8
     61c:	78e1      	ldrb	r1, [r4, #3]
     61e:	2340      	movs	r3, #64	; 0x40
     620:	2000      	movs	r0, #0
     622:	4c04      	ldr	r4, [pc, #16]	; (634 <_prep_out_transaction+0x54>)
     624:	47a0      	blx	r4
     626:	e7e5      	b.n	5f4 <_prep_out_transaction+0x14>
     628:	00001099 	.word	0x00001099
     62c:	00001865 	.word	0x00001865
     630:	0000188d 	.word	0x0000188d
     634:	000018b5 	.word	0x000018b5

00000638 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
     638:	b510      	push	{r4, lr}
     63a:	0003      	movs	r3, r0
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
     63c:	209c      	movs	r0, #156	; 0x9c
     63e:	0040      	lsls	r0, r0, #1
     640:	4358      	muls	r0, r3
     642:	3010      	adds	r0, #16
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <tud_cdc_n_available+0x18>)
     646:	1818      	adds	r0, r3, r0
     648:	4b02      	ldr	r3, [pc, #8]	; (654 <tud_cdc_n_available+0x1c>)
     64a:	4798      	blx	r3
}
     64c:	bd10      	pop	{r4, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	200006a8 	.word	0x200006a8
     654:	00001067 	.word	0x00001067

00000658 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
     658:	b570      	push	{r4, r5, r6, lr}
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
     65a:	4c08      	ldr	r4, [pc, #32]	; (67c <tud_cdc_n_read+0x24>)
     65c:	239c      	movs	r3, #156	; 0x9c
     65e:	005b      	lsls	r3, r3, #1
     660:	4358      	muls	r0, r3
     662:	1825      	adds	r5, r4, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
     664:	b292      	uxth	r2, r2
     666:	3010      	adds	r0, #16
     668:	1820      	adds	r0, r4, r0
     66a:	4b05      	ldr	r3, [pc, #20]	; (680 <tud_cdc_n_read+0x28>)
     66c:	4798      	blx	r3
     66e:	0004      	movs	r4, r0
  _prep_out_transaction(p_cdc);
     670:	0028      	movs	r0, r5
     672:	4b04      	ldr	r3, [pc, #16]	; (684 <tud_cdc_n_read+0x2c>)
     674:	4798      	blx	r3
  return num_read;
}
     676:	0020      	movs	r0, r4
     678:	bd70      	pop	{r4, r5, r6, pc}
     67a:	46c0      	nop			; (mov r8, r8)
     67c:	200006a8 	.word	0x200006a8
     680:	000010e5 	.word	0x000010e5
     684:	000005e1 	.word	0x000005e1

00000688 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
     688:	b570      	push	{r4, r5, r6, lr}
     68a:	0005      	movs	r5, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
     68c:	4b2a      	ldr	r3, [pc, #168]	; (738 <tud_cdc_n_write_flush+0xb0>)
     68e:	4798      	blx	r3
     690:	2800      	cmp	r0, #0
     692:	d104      	bne.n	69e <tud_cdc_n_write_flush+0x16>
     694:	2300      	movs	r3, #0
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
     696:	2b00      	cmp	r3, #0
     698:	d109      	bne.n	6ae <tud_cdc_n_write_flush+0x26>
     69a:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
     69c:	bd70      	pop	{r4, r5, r6, pc}
     69e:	4b27      	ldr	r3, [pc, #156]	; (73c <tud_cdc_n_write_flush+0xb4>)
     6a0:	4798      	blx	r3
     6a2:	2800      	cmp	r0, #0
     6a4:	d101      	bne.n	6aa <tud_cdc_n_write_flush+0x22>
     6a6:	2301      	movs	r3, #1
     6a8:	e7f5      	b.n	696 <tud_cdc_n_write_flush+0xe>
     6aa:	2300      	movs	r3, #0
     6ac:	e7f3      	b.n	696 <tud_cdc_n_write_flush+0xe>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
     6ae:	249c      	movs	r4, #156	; 0x9c
     6b0:	0064      	lsls	r4, r4, #1
     6b2:	436c      	muls	r4, r5
     6b4:	3420      	adds	r4, #32
     6b6:	4b22      	ldr	r3, [pc, #136]	; (740 <tud_cdc_n_write_flush+0xb8>)
     6b8:	191c      	adds	r4, r3, r4
     6ba:	3404      	adds	r4, #4
     6bc:	0020      	movs	r0, r4
     6be:	4b21      	ldr	r3, [pc, #132]	; (744 <tud_cdc_n_write_flush+0xbc>)
     6c0:	4798      	blx	r3
     6c2:	2800      	cmp	r0, #0
     6c4:	d101      	bne.n	6ca <tud_cdc_n_write_flush+0x42>
     6c6:	2000      	movs	r0, #0
     6c8:	e7e8      	b.n	69c <tud_cdc_n_write_flush+0x14>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
     6ca:	229c      	movs	r2, #156	; 0x9c
     6cc:	0052      	lsls	r2, r2, #1
     6ce:	436a      	muls	r2, r5
     6d0:	4b1b      	ldr	r3, [pc, #108]	; (740 <tud_cdc_n_write_flush+0xb8>)
     6d2:	189b      	adds	r3, r3, r2
     6d4:	7899      	ldrb	r1, [r3, #2]
     6d6:	2000      	movs	r0, #0
     6d8:	4b1b      	ldr	r3, [pc, #108]	; (748 <tud_cdc_n_write_flush+0xc0>)
     6da:	4798      	blx	r3
     6dc:	2800      	cmp	r0, #0
     6de:	d101      	bne.n	6e4 <tud_cdc_n_write_flush+0x5c>
     6e0:	2000      	movs	r0, #0
     6e2:	e7db      	b.n	69c <tud_cdc_n_write_flush+0x14>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
     6e4:	239c      	movs	r3, #156	; 0x9c
     6e6:	005b      	lsls	r3, r3, #1
     6e8:	436b      	muls	r3, r5
     6ea:	33f8      	adds	r3, #248	; 0xf8
     6ec:	4e14      	ldr	r6, [pc, #80]	; (740 <tud_cdc_n_write_flush+0xb8>)
     6ee:	18f6      	adds	r6, r6, r3
     6f0:	2240      	movs	r2, #64	; 0x40
     6f2:	0031      	movs	r1, r6
     6f4:	0020      	movs	r0, r4
     6f6:	4b15      	ldr	r3, [pc, #84]	; (74c <tud_cdc_n_write_flush+0xc4>)
     6f8:	4798      	blx	r3
     6fa:	1e04      	subs	r4, r0, #0
  if ( count )
     6fc:	d00e      	beq.n	71c <tud_cdc_n_write_flush+0x94>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
     6fe:	239c      	movs	r3, #156	; 0x9c
     700:	005b      	lsls	r3, r3, #1
     702:	436b      	muls	r3, r5
     704:	4d0e      	ldr	r5, [pc, #56]	; (740 <tud_cdc_n_write_flush+0xb8>)
     706:	18ed      	adds	r5, r5, r3
     708:	78a9      	ldrb	r1, [r5, #2]
     70a:	0003      	movs	r3, r0
     70c:	0032      	movs	r2, r6
     70e:	2000      	movs	r0, #0
     710:	4d0f      	ldr	r5, [pc, #60]	; (750 <tud_cdc_n_write_flush+0xc8>)
     712:	47a8      	blx	r5
     714:	2800      	cmp	r0, #0
     716:	d00c      	beq.n	732 <tud_cdc_n_write_flush+0xaa>
    return count;
     718:	0020      	movs	r0, r4
     71a:	e7bf      	b.n	69c <tud_cdc_n_write_flush+0x14>
    usbd_edpt_release(rhport, p_cdc->ep_in);
     71c:	239c      	movs	r3, #156	; 0x9c
     71e:	005b      	lsls	r3, r3, #1
     720:	436b      	muls	r3, r5
     722:	4d07      	ldr	r5, [pc, #28]	; (740 <tud_cdc_n_write_flush+0xb8>)
     724:	18ed      	adds	r5, r5, r3
     726:	78a9      	ldrb	r1, [r5, #2]
     728:	2000      	movs	r0, #0
     72a:	4b0a      	ldr	r3, [pc, #40]	; (754 <tud_cdc_n_write_flush+0xcc>)
     72c:	4798      	blx	r3
    return 0;
     72e:	2000      	movs	r0, #0
     730:	e7b4      	b.n	69c <tud_cdc_n_write_flush+0x14>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
     732:	2000      	movs	r0, #0
     734:	e7b2      	b.n	69c <tud_cdc_n_write_flush+0x14>
     736:	46c0      	nop			; (mov r8, r8)
     738:	000014e5 	.word	0x000014e5
     73c:	000014f5 	.word	0x000014f5
     740:	200006a8 	.word	0x200006a8
     744:	00001067 	.word	0x00001067
     748:	00001865 	.word	0x00001865
     74c:	000010e5 	.word	0x000010e5
     750:	000018b5 	.word	0x000018b5
     754:	0000188d 	.word	0x0000188d

00000758 <tud_cdc_n_write>:
{
     758:	b570      	push	{r4, r5, r6, lr}
     75a:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
     75c:	249c      	movs	r4, #156	; 0x9c
     75e:	0064      	lsls	r4, r4, #1
     760:	4344      	muls	r4, r0
     762:	3420      	adds	r4, #32
     764:	4b09      	ldr	r3, [pc, #36]	; (78c <tud_cdc_n_write+0x34>)
     766:	191c      	adds	r4, r3, r4
     768:	3404      	adds	r4, #4
     76a:	b292      	uxth	r2, r2
     76c:	0020      	movs	r0, r4
     76e:	4b08      	ldr	r3, [pc, #32]	; (790 <tud_cdc_n_write+0x38>)
     770:	4798      	blx	r3
     772:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
     774:	0020      	movs	r0, r4
     776:	4b07      	ldr	r3, [pc, #28]	; (794 <tud_cdc_n_write+0x3c>)
     778:	4798      	blx	r3
     77a:	283f      	cmp	r0, #63	; 0x3f
     77c:	d801      	bhi.n	782 <tud_cdc_n_write+0x2a>
}
     77e:	0030      	movs	r0, r6
     780:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
     782:	0028      	movs	r0, r5
     784:	4b04      	ldr	r3, [pc, #16]	; (798 <tud_cdc_n_write+0x40>)
     786:	4798      	blx	r3
     788:	e7f9      	b.n	77e <tud_cdc_n_write+0x26>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	200006a8 	.word	0x200006a8
     790:	00001155 	.word	0x00001155
     794:	00001067 	.word	0x00001067
     798:	00000689 	.word	0x00000689

0000079c <tud_cdc_n_write_clear>:
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
}

bool tud_cdc_n_write_clear (uint8_t itf)
{
     79c:	b510      	push	{r4, lr}
  return tu_fifo_clear(&_cdcd_itf[itf].tx_ff);
     79e:	239c      	movs	r3, #156	; 0x9c
     7a0:	005b      	lsls	r3, r3, #1
     7a2:	4343      	muls	r3, r0
     7a4:	3320      	adds	r3, #32
     7a6:	4803      	ldr	r0, [pc, #12]	; (7b4 <tud_cdc_n_write_clear+0x18>)
     7a8:	18c0      	adds	r0, r0, r3
     7aa:	3004      	adds	r0, #4
     7ac:	4b02      	ldr	r3, [pc, #8]	; (7b8 <tud_cdc_n_write_clear+0x1c>)
     7ae:	4798      	blx	r3
}
     7b0:	bd10      	pop	{r4, pc}
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	200006a8 	.word	0x200006a8
     7b8:	00001165 	.word	0x00001165

000007bc <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	b083      	sub	sp, #12
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
     7c0:	229c      	movs	r2, #156	; 0x9c
     7c2:	0052      	lsls	r2, r2, #1
     7c4:	2100      	movs	r1, #0
     7c6:	4819      	ldr	r0, [pc, #100]	; (82c <cdcd_init+0x70>)
     7c8:	4b19      	ldr	r3, [pc, #100]	; (830 <cdcd_init+0x74>)
     7ca:	4798      	blx	r3

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
     7cc:	2600      	movs	r6, #0
     7ce:	2e00      	cmp	r6, #0
     7d0:	d001      	beq.n	7d6 <cdcd_init+0x1a>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
     7d2:	b003      	add	sp, #12
     7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cdc->wanted_char = (char) -1;
     7d6:	4c15      	ldr	r4, [pc, #84]	; (82c <cdcd_init+0x70>)
     7d8:	259c      	movs	r5, #156	; 0x9c
     7da:	006d      	lsls	r5, r5, #1
     7dc:	4375      	muls	r5, r6
     7de:	1963      	adds	r3, r4, r5
     7e0:	22ff      	movs	r2, #255	; 0xff
     7e2:	715a      	strb	r2, [r3, #5]
    p_cdc->line_coding.bit_rate  = 115200;
     7e4:	2200      	movs	r2, #0
     7e6:	4913      	ldr	r1, [pc, #76]	; (834 <cdcd_init+0x78>)
     7e8:	80d9      	strh	r1, [r3, #6]
     7ea:	2101      	movs	r1, #1
     7ec:	8119      	strh	r1, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
     7ee:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
     7f0:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
     7f2:	2208      	movs	r2, #8
     7f4:	731a      	strb	r2, [r3, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
     7f6:	0029      	movs	r1, r5
     7f8:	3138      	adds	r1, #56	; 0x38
     7fa:	1861      	adds	r1, r4, r1
     7fc:	0028      	movs	r0, r5
     7fe:	3010      	adds	r0, #16
     800:	1820      	adds	r0, r4, r0
     802:	2300      	movs	r3, #0
     804:	9300      	str	r3, [sp, #0]
     806:	3301      	adds	r3, #1
     808:	3238      	adds	r2, #56	; 0x38
     80a:	4f0b      	ldr	r7, [pc, #44]	; (838 <cdcd_init+0x7c>)
     80c:	47b8      	blx	r7
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
     80e:	0029      	movs	r1, r5
     810:	3178      	adds	r1, #120	; 0x78
     812:	1861      	adds	r1, r4, r1
     814:	0028      	movs	r0, r5
     816:	3020      	adds	r0, #32
     818:	1820      	adds	r0, r4, r0
     81a:	3004      	adds	r0, #4
     81c:	2301      	movs	r3, #1
     81e:	9300      	str	r3, [sp, #0]
     820:	2240      	movs	r2, #64	; 0x40
     822:	47b8      	blx	r7
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
     824:	3601      	adds	r6, #1
     826:	b2f6      	uxtb	r6, r6
     828:	e7d1      	b.n	7ce <cdcd_init+0x12>
     82a:	46c0      	nop			; (mov r8, r8)
     82c:	200006a8 	.word	0x200006a8
     830:	00003261 	.word	0x00003261
     834:	ffffc200 	.word	0xffffc200
     838:	00001035 	.word	0x00001035

0000083c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
     83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
     83e:	2500      	movs	r5, #0
     840:	2d00      	cmp	r5, #0
     842:	d000      	beq.n	846 <cdcd_reset+0xa>
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
  }
}
     844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
     846:	4c0d      	ldr	r4, [pc, #52]	; (87c <cdcd_reset+0x40>)
     848:	269c      	movs	r6, #156	; 0x9c
     84a:	0076      	lsls	r6, r6, #1
     84c:	436e      	muls	r6, r5
     84e:	19a0      	adds	r0, r4, r6
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
     850:	2205      	movs	r2, #5
     852:	2100      	movs	r1, #0
     854:	4b0a      	ldr	r3, [pc, #40]	; (880 <cdcd_reset+0x44>)
     856:	4798      	blx	r3
    tu_fifo_clear(&p_cdc->rx_ff);
     858:	0030      	movs	r0, r6
     85a:	3010      	adds	r0, #16
     85c:	1820      	adds	r0, r4, r0
     85e:	4f09      	ldr	r7, [pc, #36]	; (884 <cdcd_reset+0x48>)
     860:	47b8      	blx	r7
    tu_fifo_clear(&p_cdc->tx_ff);
     862:	3620      	adds	r6, #32
     864:	19a4      	adds	r4, r4, r6
     866:	3404      	adds	r4, #4
     868:	0020      	movs	r0, r4
     86a:	47b8      	blx	r7
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
     86c:	2101      	movs	r1, #1
     86e:	0020      	movs	r0, r4
     870:	4b05      	ldr	r3, [pc, #20]	; (888 <cdcd_reset+0x4c>)
     872:	4798      	blx	r3
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
     874:	3501      	adds	r5, #1
     876:	b2ed      	uxtb	r5, r5
     878:	e7e2      	b.n	840 <cdcd_reset+0x4>
     87a:	46c0      	nop			; (mov r8, r8)
     87c:	200006a8 	.word	0x200006a8
     880:	00003261 	.word	0x00003261
     884:	00001165 	.word	0x00001165
     888:	0000117f 	.word	0x0000117f

0000088c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	b083      	sub	sp, #12
     890:	0005      	movs	r5, r0
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
     892:	794b      	ldrb	r3, [r1, #5]
     894:	2b02      	cmp	r3, #2
     896:	d003      	beq.n	8a0 <cdcd_open+0x14>
     898:	2400      	movs	r4, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
     89a:	0020      	movs	r0, r4
     89c:	b003      	add	sp, #12
     89e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
     8a0:	798b      	ldrb	r3, [r1, #6]
     8a2:	2b02      	cmp	r3, #2
     8a4:	d001      	beq.n	8aa <cdcd_open+0x1e>
     8a6:	2400      	movs	r4, #0
     8a8:	e7f7      	b.n	89a <cdcd_open+0xe>
     8aa:	2300      	movs	r3, #0
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
     8ac:	2b00      	cmp	r3, #0
     8ae:	d111      	bne.n	8d4 <cdcd_open+0x48>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
     8b0:	0018      	movs	r0, r3
     8b2:	269c      	movs	r6, #156	; 0x9c
     8b4:	0076      	lsls	r6, r6, #1
     8b6:	435e      	muls	r6, r3
     8b8:	4c28      	ldr	r4, [pc, #160]	; (95c <cdcd_open+0xd0>)
     8ba:	19a4      	adds	r4, r4, r6
     8bc:	78a4      	ldrb	r4, [r4, #2]
     8be:	2c00      	cmp	r4, #0
     8c0:	d002      	beq.n	8c8 <cdcd_open+0x3c>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
     8c2:	3301      	adds	r3, #1
     8c4:	b2db      	uxtb	r3, r3
     8c6:	e7f1      	b.n	8ac <cdcd_open+0x20>
      p_cdc = &_cdcd_itf[cdc_id];
     8c8:	269c      	movs	r6, #156	; 0x9c
     8ca:	0076      	lsls	r6, r6, #1
     8cc:	4370      	muls	r0, r6
     8ce:	4e23      	ldr	r6, [pc, #140]	; (95c <cdcd_open+0xd0>)
     8d0:	1836      	adds	r6, r6, r0
      break;
     8d2:	e000      	b.n	8d6 <cdcd_open+0x4a>
  cdcd_interface_t * p_cdc = NULL;
     8d4:	2600      	movs	r6, #0
  TU_ASSERT(p_cdc, 0);
     8d6:	2e00      	cmp	r6, #0
     8d8:	d039      	beq.n	94e <cdcd_open+0xc2>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
     8da:	788b      	ldrb	r3, [r1, #2]
     8dc:	7033      	strb	r3, [r6, #0]
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
     8de:	780f      	ldrb	r7, [r1, #0]
     8e0:	19cf      	adds	r7, r1, r7
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
     8e2:	2409      	movs	r4, #9
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
     8e4:	787b      	ldrb	r3, [r7, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
     8e6:	2b24      	cmp	r3, #36	; 0x24
     8e8:	d106      	bne.n	8f8 <cdcd_open+0x6c>
     8ea:	4294      	cmp	r4, r2
     8ec:	d804      	bhi.n	8f8 <cdcd_open+0x6c>
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
     8ee:	783b      	ldrb	r3, [r7, #0]
    drv_len += tu_desc_len(p_desc);
     8f0:	191c      	adds	r4, r3, r4
     8f2:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
     8f4:	18ff      	adds	r7, r7, r3
     8f6:	e7f5      	b.n	8e4 <cdcd_open+0x58>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
     8f8:	2b05      	cmp	r3, #5
     8fa:	d006      	beq.n	90a <cdcd_open+0x7e>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
     8fc:	787b      	ldrb	r3, [r7, #1]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
     8fe:	2b04      	cmp	r3, #4
     900:	d010      	beq.n	924 <cdcd_open+0x98>
  _prep_out_transaction(p_cdc);
     902:	0030      	movs	r0, r6
     904:	4b16      	ldr	r3, [pc, #88]	; (960 <cdcd_open+0xd4>)
     906:	4798      	blx	r3
  return drv_len;
     908:	e7c7      	b.n	89a <cdcd_open+0xe>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
     90a:	0039      	movs	r1, r7
     90c:	0028      	movs	r0, r5
     90e:	4b15      	ldr	r3, [pc, #84]	; (964 <cdcd_open+0xd8>)
     910:	4798      	blx	r3
     912:	2800      	cmp	r0, #0
     914:	d01d      	beq.n	952 <cdcd_open+0xc6>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
     916:	78bb      	ldrb	r3, [r7, #2]
     918:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
     91a:	783b      	ldrb	r3, [r7, #0]
    drv_len += tu_desc_len(p_desc);
     91c:	191c      	adds	r4, r3, r4
     91e:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
     920:	18ff      	adds	r7, r7, r3
     922:	e7eb      	b.n	8fc <cdcd_open+0x70>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
     924:	797b      	ldrb	r3, [r7, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
     926:	2b0a      	cmp	r3, #10
     928:	d1eb      	bne.n	902 <cdcd_open+0x76>
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
     92a:	7839      	ldrb	r1, [r7, #0]
    drv_len += tu_desc_len(p_desc);
     92c:	190c      	adds	r4, r1, r4
     92e:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
     930:	1879      	adds	r1, r7, r1
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
     932:	1cb3      	adds	r3, r6, #2
     934:	9301      	str	r3, [sp, #4]
     936:	1cf3      	adds	r3, r6, #3
     938:	9300      	str	r3, [sp, #0]
     93a:	2302      	movs	r3, #2
     93c:	2202      	movs	r2, #2
     93e:	0028      	movs	r0, r5
     940:	4d09      	ldr	r5, [pc, #36]	; (968 <cdcd_open+0xdc>)
     942:	47a8      	blx	r5
     944:	2800      	cmp	r0, #0
     946:	d006      	beq.n	956 <cdcd_open+0xca>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
     948:	340e      	adds	r4, #14
     94a:	b2a4      	uxth	r4, r4
     94c:	e7d9      	b.n	902 <cdcd_open+0x76>
  TU_ASSERT(p_cdc, 0);
     94e:	2400      	movs	r4, #0
     950:	e7a3      	b.n	89a <cdcd_open+0xe>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
     952:	2400      	movs	r4, #0
     954:	e7a1      	b.n	89a <cdcd_open+0xe>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
     956:	2400      	movs	r4, #0
     958:	e79f      	b.n	89a <cdcd_open+0xe>
     95a:	46c0      	nop			; (mov r8, r8)
     95c:	200006a8 	.word	0x200006a8
     960:	000005e1 	.word	0x000005e1
     964:	000017bd 	.word	0x000017bd
     968:	000017fd 	.word	0x000017fd

0000096c <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
     96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     96e:	0015      	movs	r5, r2
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
     970:	7812      	ldrb	r2, [r2, #0]
     972:	2360      	movs	r3, #96	; 0x60
     974:	4013      	ands	r3, r2
     976:	2b20      	cmp	r3, #32
     978:	d001      	beq.n	97e <cdcd_control_xfer_cb+0x12>
     97a:	2000      	movs	r0, #0

    default: return false; // stall unsupported request
  }

  return true;
}
     97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     97e:	4a40      	ldr	r2, [pc, #256]	; (a80 <cdcd_control_xfer_cb+0x114>)
     980:	2400      	movs	r4, #0
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
     982:	2c00      	cmp	r4, #0
     984:	d172      	bne.n	a6c <cdcd_control_xfer_cb+0x100>
    if ( p_cdc->itf_num == request->wIndex ) break;
     986:	7816      	ldrb	r6, [r2, #0]
     988:	792f      	ldrb	r7, [r5, #4]
     98a:	796b      	ldrb	r3, [r5, #5]
     98c:	021b      	lsls	r3, r3, #8
     98e:	433b      	orrs	r3, r7
     990:	429e      	cmp	r6, r3
     992:	d004      	beq.n	99e <cdcd_control_xfer_cb+0x32>
  for ( ; ; itf++, p_cdc++)
     994:	3401      	adds	r4, #1
     996:	b2e4      	uxtb	r4, r4
     998:	3239      	adds	r2, #57	; 0x39
     99a:	32ff      	adds	r2, #255	; 0xff
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
     99c:	e7f1      	b.n	982 <cdcd_control_xfer_cb+0x16>
  switch ( request->bRequest )
     99e:	786b      	ldrb	r3, [r5, #1]
     9a0:	2b21      	cmp	r3, #33	; 0x21
     9a2:	d021      	beq.n	9e8 <cdcd_control_xfer_cb+0x7c>
     9a4:	d909      	bls.n	9ba <cdcd_control_xfer_cb+0x4e>
     9a6:	2b22      	cmp	r3, #34	; 0x22
     9a8:	d029      	beq.n	9fe <cdcd_control_xfer_cb+0x92>
     9aa:	2b23      	cmp	r3, #35	; 0x23
     9ac:	d160      	bne.n	a70 <cdcd_control_xfer_cb+0x104>
      if (stage == CONTROL_STAGE_SETUP)
     9ae:	2901      	cmp	r1, #1
     9b0:	d04b      	beq.n	a4a <cdcd_control_xfer_cb+0xde>
      else if (stage == CONTROL_STAGE_ACK)
     9b2:	2903      	cmp	r1, #3
     9b4:	d04e      	beq.n	a54 <cdcd_control_xfer_cb+0xe8>
  return true;
     9b6:	2001      	movs	r0, #1
     9b8:	e7e0      	b.n	97c <cdcd_control_xfer_cb+0x10>
  switch ( request->bRequest )
     9ba:	2b20      	cmp	r3, #32
     9bc:	d158      	bne.n	a70 <cdcd_control_xfer_cb+0x104>
      if (stage == CONTROL_STAGE_SETUP)
     9be:	2901      	cmp	r1, #1
     9c0:	d003      	beq.n	9ca <cdcd_control_xfer_cb+0x5e>
      else if ( stage == CONTROL_STAGE_ACK)
     9c2:	2903      	cmp	r1, #3
     9c4:	d008      	beq.n	9d8 <cdcd_control_xfer_cb+0x6c>
  return true;
     9c6:	2001      	movs	r0, #1
     9c8:	e7d8      	b.n	97c <cdcd_control_xfer_cb+0x10>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
     9ca:	3206      	adds	r2, #6
     9cc:	2307      	movs	r3, #7
     9ce:	0029      	movs	r1, r5
     9d0:	4c2c      	ldr	r4, [pc, #176]	; (a84 <cdcd_control_xfer_cb+0x118>)
     9d2:	47a0      	blx	r4
  return true;
     9d4:	2001      	movs	r0, #1
     9d6:	e7d1      	b.n	97c <cdcd_control_xfer_cb+0x10>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
     9d8:	4b2b      	ldr	r3, [pc, #172]	; (a88 <cdcd_control_xfer_cb+0x11c>)
     9da:	2b00      	cmp	r3, #0
     9dc:	d04a      	beq.n	a74 <cdcd_control_xfer_cb+0x108>
     9de:	1d91      	adds	r1, r2, #6
     9e0:	0020      	movs	r0, r4
     9e2:	4798      	blx	r3
  return true;
     9e4:	2001      	movs	r0, #1
     9e6:	e7c9      	b.n	97c <cdcd_control_xfer_cb+0x10>
      if (stage == CONTROL_STAGE_SETUP)
     9e8:	2901      	cmp	r1, #1
     9ea:	d001      	beq.n	9f0 <cdcd_control_xfer_cb+0x84>
  return true;
     9ec:	2001      	movs	r0, #1
     9ee:	e7c5      	b.n	97c <cdcd_control_xfer_cb+0x10>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
     9f0:	3206      	adds	r2, #6
     9f2:	2307      	movs	r3, #7
     9f4:	0029      	movs	r1, r5
     9f6:	4c23      	ldr	r4, [pc, #140]	; (a84 <cdcd_control_xfer_cb+0x118>)
     9f8:	47a0      	blx	r4
  return true;
     9fa:	2001      	movs	r0, #1
     9fc:	e7be      	b.n	97c <cdcd_control_xfer_cb+0x10>
      if (stage == CONTROL_STAGE_SETUP)
     9fe:	2901      	cmp	r1, #1
     a00:	d003      	beq.n	a0a <cdcd_control_xfer_cb+0x9e>
      else if (stage == CONTROL_STAGE_ACK)
     a02:	2903      	cmp	r1, #3
     a04:	d006      	beq.n	a14 <cdcd_control_xfer_cb+0xa8>
  return true;
     a06:	2001      	movs	r0, #1
     a08:	e7b8      	b.n	97c <cdcd_control_xfer_cb+0x10>
        tud_control_status(rhport, request);
     a0a:	0029      	movs	r1, r5
     a0c:	4b1f      	ldr	r3, [pc, #124]	; (a8c <cdcd_control_xfer_cb+0x120>)
     a0e:	4798      	blx	r3
  return true;
     a10:	2001      	movs	r0, #1
     a12:	e7b3      	b.n	97c <cdcd_control_xfer_cb+0x10>
        bool const dtr = tu_bit_test(request->wValue, 0);
     a14:	78ab      	ldrb	r3, [r5, #2]
     a16:	78e9      	ldrb	r1, [r5, #3]
     a18:	0209      	lsls	r1, r1, #8
     a1a:	4319      	orrs	r1, r3
     a1c:	2301      	movs	r3, #1
     a1e:	400b      	ands	r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
     a20:	001d      	movs	r5, r3
     a22:	0848      	lsrs	r0, r1, #1
     a24:	2601      	movs	r6, #1
     a26:	4006      	ands	r6, r0
        p_cdc->line_state = (uint8_t) request->wValue;
     a28:	7111      	strb	r1, [r2, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
     a2a:	4259      	negs	r1, r3
     a2c:	4159      	adcs	r1, r3
     a2e:	b2c9      	uxtb	r1, r1
     a30:	3224      	adds	r2, #36	; 0x24
     a32:	0010      	movs	r0, r2
     a34:	4b16      	ldr	r3, [pc, #88]	; (a90 <cdcd_control_xfer_cb+0x124>)
     a36:	4798      	blx	r3
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
     a38:	4b16      	ldr	r3, [pc, #88]	; (a94 <cdcd_control_xfer_cb+0x128>)
     a3a:	2b00      	cmp	r3, #0
     a3c:	d01c      	beq.n	a78 <cdcd_control_xfer_cb+0x10c>
     a3e:	0032      	movs	r2, r6
     a40:	0029      	movs	r1, r5
     a42:	0020      	movs	r0, r4
     a44:	4798      	blx	r3
  return true;
     a46:	2001      	movs	r0, #1
     a48:	e798      	b.n	97c <cdcd_control_xfer_cb+0x10>
        tud_control_status(rhport, request);
     a4a:	0029      	movs	r1, r5
     a4c:	4b0f      	ldr	r3, [pc, #60]	; (a8c <cdcd_control_xfer_cb+0x120>)
     a4e:	4798      	blx	r3
  return true;
     a50:	2001      	movs	r0, #1
     a52:	e793      	b.n	97c <cdcd_control_xfer_cb+0x10>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
     a54:	4b10      	ldr	r3, [pc, #64]	; (a98 <cdcd_control_xfer_cb+0x12c>)
     a56:	2b00      	cmp	r3, #0
     a58:	d010      	beq.n	a7c <cdcd_control_xfer_cb+0x110>
     a5a:	78ab      	ldrb	r3, [r5, #2]
     a5c:	78e9      	ldrb	r1, [r5, #3]
     a5e:	0209      	lsls	r1, r1, #8
     a60:	4319      	orrs	r1, r3
     a62:	0020      	movs	r0, r4
     a64:	4b0c      	ldr	r3, [pc, #48]	; (a98 <cdcd_control_xfer_cb+0x12c>)
     a66:	4798      	blx	r3
  return true;
     a68:	2001      	movs	r0, #1
     a6a:	e787      	b.n	97c <cdcd_control_xfer_cb+0x10>
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
     a6c:	2000      	movs	r0, #0
     a6e:	e785      	b.n	97c <cdcd_control_xfer_cb+0x10>
    default: return false; // stall unsupported request
     a70:	2000      	movs	r0, #0
     a72:	e783      	b.n	97c <cdcd_control_xfer_cb+0x10>
  return true;
     a74:	2001      	movs	r0, #1
     a76:	e781      	b.n	97c <cdcd_control_xfer_cb+0x10>
     a78:	2001      	movs	r0, #1
     a7a:	e77f      	b.n	97c <cdcd_control_xfer_cb+0x10>
     a7c:	2001      	movs	r0, #1
     a7e:	e77d      	b.n	97c <cdcd_control_xfer_cb+0x10>
     a80:	200006a8 	.word	0x200006a8
     a84:	00001fed 	.word	0x00001fed
     a88:	00000000 	.word	0x00000000
     a8c:	00001fa9 	.word	0x00001fa9
     a90:	0000117f 	.word	0x0000117f
	...

00000a9c <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	46d6      	mov	lr, sl
     aa0:	b500      	push	{lr}
     aa2:	b082      	sub	sp, #8
     aa4:	9000      	str	r0, [sp, #0]
     aa6:	468a      	mov	sl, r1
     aa8:	001d      	movs	r5, r3

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
     aaa:	2600      	movs	r6, #0
     aac:	2e00      	cmp	r6, #0
     aae:	d009      	beq.n	ac4 <cdcd_xfer_cb+0x28>
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
     ab0:	2e00      	cmp	r6, #0
     ab2:	d172      	bne.n	b9a <cdcd_xfer_cb+0xfe>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
     ab4:	78fb      	ldrb	r3, [r7, #3]
     ab6:	459a      	cmp	sl, r3
     ab8:	d012      	beq.n	ae0 <cdcd_xfer_cb+0x44>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
     aba:	78bb      	ldrb	r3, [r7, #2]
     abc:	459a      	cmp	sl, r3
     abe:	d045      	beq.n	b4c <cdcd_xfer_cb+0xb0>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
     ac0:	2401      	movs	r4, #1
     ac2:	e06b      	b.n	b9c <cdcd_xfer_cb+0x100>
    p_cdc = &_cdcd_itf[itf];
     ac4:	279c      	movs	r7, #156	; 0x9c
     ac6:	007f      	lsls	r7, r7, #1
     ac8:	4377      	muls	r7, r6
     aca:	4b39      	ldr	r3, [pc, #228]	; (bb0 <cdcd_xfer_cb+0x114>)
     acc:	19df      	adds	r7, r3, r7
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
     ace:	78fb      	ldrb	r3, [r7, #3]
     ad0:	4553      	cmp	r3, sl
     ad2:	d0ed      	beq.n	ab0 <cdcd_xfer_cb+0x14>
     ad4:	78bb      	ldrb	r3, [r7, #2]
     ad6:	459a      	cmp	sl, r3
     ad8:	d0ea      	beq.n	ab0 <cdcd_xfer_cb+0x14>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
     ada:	3601      	adds	r6, #1
     adc:	b2f6      	uxtb	r6, r6
     ade:	e7e5      	b.n	aac <cdcd_xfer_cb+0x10>
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
     ae0:	2310      	movs	r3, #16
     ae2:	469c      	mov	ip, r3
     ae4:	44bc      	add	ip, r7
     ae6:	4663      	mov	r3, ip
     ae8:	9301      	str	r3, [sp, #4]
     aea:	0039      	movs	r1, r7
     aec:	31b8      	adds	r1, #184	; 0xb8
     aee:	b2aa      	uxth	r2, r5
     af0:	4660      	mov	r0, ip
     af2:	4b30      	ldr	r3, [pc, #192]	; (bb4 <cdcd_xfer_cb+0x118>)
     af4:	4798      	blx	r3
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
     af6:	4b30      	ldr	r3, [pc, #192]	; (bb8 <cdcd_xfer_cb+0x11c>)
     af8:	2b00      	cmp	r3, #0
     afa:	d017      	beq.n	b2c <cdcd_xfer_cb+0x90>
     afc:	797b      	ldrb	r3, [r7, #5]
     afe:	2bff      	cmp	r3, #255	; 0xff
     b00:	d014      	beq.n	b2c <cdcd_xfer_cb+0x90>
     b02:	2400      	movs	r4, #0
     b04:	e000      	b.n	b08 <cdcd_xfer_cb+0x6c>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
     b06:	3401      	adds	r4, #1
     b08:	42ac      	cmp	r4, r5
     b0a:	d20f      	bcs.n	b2c <cdcd_xfer_cb+0x90>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
     b0c:	797a      	ldrb	r2, [r7, #5]
     b0e:	193b      	adds	r3, r7, r4
     b10:	33b8      	adds	r3, #184	; 0xb8
     b12:	781b      	ldrb	r3, [r3, #0]
     b14:	429a      	cmp	r2, r3
     b16:	d1f6      	bne.n	b06 <cdcd_xfer_cb+0x6a>
     b18:	9801      	ldr	r0, [sp, #4]
     b1a:	4b28      	ldr	r3, [pc, #160]	; (bbc <cdcd_xfer_cb+0x120>)
     b1c:	4798      	blx	r3
     b1e:	2800      	cmp	r0, #0
     b20:	d1f1      	bne.n	b06 <cdcd_xfer_cb+0x6a>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
     b22:	7979      	ldrb	r1, [r7, #5]
     b24:	0030      	movs	r0, r6
     b26:	4b24      	ldr	r3, [pc, #144]	; (bb8 <cdcd_xfer_cb+0x11c>)
     b28:	4798      	blx	r3
     b2a:	e7ec      	b.n	b06 <cdcd_xfer_cb+0x6a>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
     b2c:	4b24      	ldr	r3, [pc, #144]	; (bc0 <cdcd_xfer_cb+0x124>)
     b2e:	2b00      	cmp	r3, #0
     b30:	d004      	beq.n	b3c <cdcd_xfer_cb+0xa0>
     b32:	9801      	ldr	r0, [sp, #4]
     b34:	4b21      	ldr	r3, [pc, #132]	; (bbc <cdcd_xfer_cb+0x120>)
     b36:	4798      	blx	r3
     b38:	2800      	cmp	r0, #0
     b3a:	d003      	beq.n	b44 <cdcd_xfer_cb+0xa8>
    _prep_out_transaction(p_cdc);
     b3c:	0038      	movs	r0, r7
     b3e:	4b21      	ldr	r3, [pc, #132]	; (bc4 <cdcd_xfer_cb+0x128>)
     b40:	4798      	blx	r3
     b42:	e7ba      	b.n	aba <cdcd_xfer_cb+0x1e>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
     b44:	0030      	movs	r0, r6
     b46:	4b1e      	ldr	r3, [pc, #120]	; (bc0 <cdcd_xfer_cb+0x124>)
     b48:	4798      	blx	r3
     b4a:	e7f7      	b.n	b3c <cdcd_xfer_cb+0xa0>
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
     b4c:	4b1e      	ldr	r3, [pc, #120]	; (bc8 <cdcd_xfer_cb+0x12c>)
     b4e:	2b00      	cmp	r3, #0
     b50:	d001      	beq.n	b56 <cdcd_xfer_cb+0xba>
     b52:	0030      	movs	r0, r6
     b54:	4798      	blx	r3
    if ( 0 == tud_cdc_n_write_flush(itf) )
     b56:	0030      	movs	r0, r6
     b58:	4b1c      	ldr	r3, [pc, #112]	; (bcc <cdcd_xfer_cb+0x130>)
     b5a:	4798      	blx	r3
     b5c:	2800      	cmp	r0, #0
     b5e:	d001      	beq.n	b64 <cdcd_xfer_cb+0xc8>
  return true;
     b60:	2401      	movs	r4, #1
     b62:	e01b      	b.n	b9c <cdcd_xfer_cb+0x100>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
     b64:	0038      	movs	r0, r7
     b66:	3024      	adds	r0, #36	; 0x24
     b68:	4b19      	ldr	r3, [pc, #100]	; (bd0 <cdcd_xfer_cb+0x134>)
     b6a:	4798      	blx	r3
     b6c:	2800      	cmp	r0, #0
     b6e:	d11a      	bne.n	ba6 <cdcd_xfer_cb+0x10a>
     b70:	2d00      	cmp	r5, #0
     b72:	d01a      	beq.n	baa <cdcd_xfer_cb+0x10e>
     b74:	06ab      	lsls	r3, r5, #26
     b76:	d001      	beq.n	b7c <cdcd_xfer_cb+0xe0>
  return true;
     b78:	2401      	movs	r4, #1
     b7a:	e00f      	b.n	b9c <cdcd_xfer_cb+0x100>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
     b7c:	78b9      	ldrb	r1, [r7, #2]
     b7e:	9800      	ldr	r0, [sp, #0]
     b80:	4b14      	ldr	r3, [pc, #80]	; (bd4 <cdcd_xfer_cb+0x138>)
     b82:	4798      	blx	r3
     b84:	1e04      	subs	r4, r0, #0
     b86:	d101      	bne.n	b8c <cdcd_xfer_cb+0xf0>
  return true;
     b88:	2401      	movs	r4, #1
     b8a:	e007      	b.n	b9c <cdcd_xfer_cb+0x100>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
     b8c:	78b9      	ldrb	r1, [r7, #2]
     b8e:	2300      	movs	r3, #0
     b90:	2200      	movs	r2, #0
     b92:	9800      	ldr	r0, [sp, #0]
     b94:	4d10      	ldr	r5, [pc, #64]	; (bd8 <cdcd_xfer_cb+0x13c>)
     b96:	47a8      	blx	r5
     b98:	e000      	b.n	b9c <cdcd_xfer_cb+0x100>
  TU_ASSERT(itf < CFG_TUD_CDC);
     b9a:	2400      	movs	r4, #0
}
     b9c:	0020      	movs	r0, r4
     b9e:	b002      	add	sp, #8
     ba0:	bc04      	pop	{r2}
     ba2:	4692      	mov	sl, r2
     ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return true;
     ba6:	2401      	movs	r4, #1
     ba8:	e7f8      	b.n	b9c <cdcd_xfer_cb+0x100>
     baa:	2401      	movs	r4, #1
     bac:	e7f6      	b.n	b9c <cdcd_xfer_cb+0x100>
     bae:	46c0      	nop			; (mov r8, r8)
     bb0:	200006a8 	.word	0x200006a8
     bb4:	00001155 	.word	0x00001155
     bb8:	00000000 	.word	0x00000000
     bbc:	0000108b 	.word	0x0000108b
     bc0:	00000000 	.word	0x00000000
     bc4:	000005e1 	.word	0x000005e1
     bc8:	00000000 	.word	0x00000000
     bcc:	00000689 	.word	0x00000689
     bd0:	00001067 	.word	0x00001067
     bd4:	00001865 	.word	0x00001865
     bd8:	000018b5 	.word	0x000018b5

00000bdc <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
     bdc:	188a      	adds	r2, r1, r2
     bde:	b292      	uxth	r2, r2
     be0:	4291      	cmp	r1, r2
     be2:	d802      	bhi.n	bea <advance_pointer+0xe>
     be4:	8983      	ldrh	r3, [r0, #12]
     be6:	429a      	cmp	r2, r3
     be8:	d902      	bls.n	bf0 <advance_pointer+0x14>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
     bea:	8940      	ldrh	r0, [r0, #10]
     bec:	1812      	adds	r2, r2, r0
     bee:	b292      	uxth	r2, r2
  else
  {
    p += offset;
  }
  return p;
}
     bf0:	0010      	movs	r0, r2
     bf2:	4770      	bx	lr

00000bf4 <backward_pointer>:
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
     bf4:	1a8a      	subs	r2, r1, r2
     bf6:	b292      	uxth	r2, r2
     bf8:	4291      	cmp	r1, r2
     bfa:	d302      	bcc.n	c02 <backward_pointer+0xe>
     bfc:	8983      	ldrh	r3, [r0, #12]
     bfe:	429a      	cmp	r2, r3
     c00:	d902      	bls.n	c08 <backward_pointer+0x14>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
     c02:	8940      	ldrh	r0, [r0, #10]
     c04:	1a12      	subs	r2, r2, r0
     c06:	b292      	uxth	r2, r2
  else
  {
    p -= offset;
  }
  return p;
}
     c08:	0010      	movs	r0, r2
     c0a:	4770      	bx	lr

00000c0c <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
  return _ff_mod(p, f->depth);
     c0c:	8883      	ldrh	r3, [r0, #4]
     c0e:	e001      	b.n	c14 <get_relative_pointer+0x8>
  while ( idx >= depth) idx -= depth;
     c10:	1ac9      	subs	r1, r1, r3
     c12:	b289      	uxth	r1, r1
     c14:	428b      	cmp	r3, r1
     c16:	d9fb      	bls.n	c10 <get_relative_pointer+0x4>
}
     c18:	0008      	movs	r0, r1
     c1a:	4770      	bx	lr

00000c1c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
     c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c1e:	0005      	movs	r5, r0
     c20:	000c      	movs	r4, r1
     c22:	0011      	movs	r1, r2
     c24:	001e      	movs	r6, r3
  uint16_t cnt = wAbs-rAbs;
     c26:	1ad3      	subs	r3, r2, r3
     c28:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
     c2a:	42b2      	cmp	r2, r6
     c2c:	d202      	bcs.n	c34 <_tu_fifo_peek+0x18>
     c2e:	8942      	ldrh	r2, [r0, #10]
     c30:	1a9b      	subs	r3, r3, r2
     c32:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
     c34:	88af      	ldrh	r7, [r5, #4]
     c36:	429f      	cmp	r7, r3
     c38:	d205      	bcs.n	c46 <_tu_fifo_peek+0x2a>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
     c3a:	003a      	movs	r2, r7
     c3c:	0028      	movs	r0, r5
     c3e:	4b0a      	ldr	r3, [pc, #40]	; (c68 <_tu_fifo_peek+0x4c>)
     c40:	4798      	blx	r3
     c42:	8228      	strh	r0, [r5, #16]
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
    cnt = f->depth;
     c44:	003b      	movs	r3, r7
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
     c46:	2b00      	cmp	r3, #0
     c48:	d101      	bne.n	c4e <_tu_fifo_peek+0x32>
     c4a:	2000      	movs	r0, #0

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
     c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t rRel = get_relative_pointer(f, rAbs);
     c4e:	0031      	movs	r1, r6
     c50:	0028      	movs	r0, r5
     c52:	4b06      	ldr	r3, [pc, #24]	; (c6c <_tu_fifo_peek+0x50>)
     c54:	4798      	blx	r3
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
     c56:	6829      	ldr	r1, [r5, #0]
     c58:	88ea      	ldrh	r2, [r5, #6]
     c5a:	4350      	muls	r0, r2
     c5c:	1809      	adds	r1, r1, r0
     c5e:	0020      	movs	r0, r4
     c60:	4b03      	ldr	r3, [pc, #12]	; (c70 <_tu_fifo_peek+0x54>)
     c62:	4798      	blx	r3
  return true;
     c64:	2001      	movs	r0, #1
     c66:	e7f1      	b.n	c4c <_tu_fifo_peek+0x30>
     c68:	00000bf5 	.word	0x00000bf5
     c6c:	00000c0d 	.word	0x00000c0d
     c70:	000031dd 	.word	0x000031dd

00000c74 <_ff_pull_const_addr>:
{
     c74:	b530      	push	{r4, r5, lr}
     c76:	b083      	sub	sp, #12
     c78:	0004      	movs	r4, r0
  uint16_t full_words = len >> 2;
     c7a:	0893      	lsrs	r3, r2, #2
  while(full_words--)
     c7c:	e00c      	b.n	c98 <_ff_pull_const_addr+0x24>
typedef struct { uint32_t val; } TU_ATTR_PACKED tu_unaligned_uint32_t;

TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void* mem)
{
  tu_unaligned_uint32_t const* ua32 = (tu_unaligned_uint32_t const*) mem;
  return ua32->val;
     c7e:	780b      	ldrb	r3, [r1, #0]
     c80:	7848      	ldrb	r0, [r1, #1]
     c82:	0200      	lsls	r0, r0, #8
     c84:	4318      	orrs	r0, r3
     c86:	788b      	ldrb	r3, [r1, #2]
     c88:	041b      	lsls	r3, r3, #16
     c8a:	4318      	orrs	r0, r3
     c8c:	78cb      	ldrb	r3, [r1, #3]
     c8e:	061b      	lsls	r3, r3, #24
     c90:	4303      	orrs	r3, r0
    *tx_fifo = tu_unaligned_read32(ff_buf);
     c92:	6023      	str	r3, [r4, #0]
    ff_buf += 4;
     c94:	3104      	adds	r1, #4
  while(full_words--)
     c96:	002b      	movs	r3, r5
     c98:	1e5d      	subs	r5, r3, #1
     c9a:	b2ad      	uxth	r5, r5
     c9c:	2b00      	cmp	r3, #0
     c9e:	d1ee      	bne.n	c7e <_ff_pull_const_addr+0xa>
  uint8_t const bytes_rem = len & 0x03;
     ca0:	3303      	adds	r3, #3
     ca2:	401a      	ands	r2, r3
  if ( bytes_rem )
     ca4:	d101      	bne.n	caa <_ff_pull_const_addr+0x36>
}
     ca6:	b003      	add	sp, #12
     ca8:	bd30      	pop	{r4, r5, pc}
    uint32_t tmp32 = 0;
     caa:	2300      	movs	r3, #0
     cac:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
     cae:	a801      	add	r0, sp, #4
     cb0:	4b02      	ldr	r3, [pc, #8]	; (cbc <_ff_pull_const_addr+0x48>)
     cb2:	4798      	blx	r3
    *tx_fifo = tmp32;
     cb4:	9b01      	ldr	r3, [sp, #4]
     cb6:	6023      	str	r3, [r4, #0]
}
     cb8:	e7f5      	b.n	ca6 <_ff_pull_const_addr+0x32>
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	000031dd 	.word	0x000031dd

00000cc0 <_ff_pull_n>:
{
     cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     cc2:	46ce      	mov	lr, r9
     cc4:	4647      	mov	r7, r8
     cc6:	b580      	push	{r7, lr}
     cc8:	b085      	sub	sp, #20
     cca:	0007      	movs	r7, r0
     ccc:	9101      	str	r1, [sp, #4]
     cce:	a90c      	add	r1, sp, #48	; 0x30
     cd0:	7809      	ldrb	r1, [r1, #0]
  uint16_t const nLin = f->depth - rel;
     cd2:	8884      	ldrh	r4, [r0, #4]
     cd4:	1ae4      	subs	r4, r4, r3
     cd6:	b2a4      	uxth	r4, r4
  uint16_t const nWrap = n - nLin; // only used if wrapped
     cd8:	1b15      	subs	r5, r2, r4
     cda:	b2ad      	uxth	r5, r5
  uint16_t nLin_bytes = nLin * f->item_size;
     cdc:	88c0      	ldrh	r0, [r0, #6]
     cde:	0006      	movs	r6, r0
     ce0:	4366      	muls	r6, r4
     ce2:	b2b6      	uxth	r6, r6
     ce4:	46b0      	mov	r8, r6
  uint16_t nWrap_bytes = nWrap * f->item_size;
     ce6:	4345      	muls	r5, r0
     ce8:	b2ad      	uxth	r5, r5
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
     cea:	4343      	muls	r3, r0
     cec:	683e      	ldr	r6, [r7, #0]
     cee:	46b1      	mov	r9, r6
     cf0:	4499      	add	r9, r3
  switch (copy_mode)
     cf2:	2900      	cmp	r1, #0
     cf4:	d006      	beq.n	d04 <_ff_pull_n+0x44>
     cf6:	2901      	cmp	r1, #1
     cf8:	d018      	beq.n	d2c <_ff_pull_n+0x6c>
}
     cfa:	b005      	add	sp, #20
     cfc:	bc0c      	pop	{r2, r3}
     cfe:	4690      	mov	r8, r2
     d00:	4699      	mov	r9, r3
     d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( n <= nLin )
     d04:	4294      	cmp	r4, r2
     d06:	d305      	bcc.n	d14 <_ff_pull_n+0x54>
        memcpy(app_buf, ff_buf, n*f->item_size);
     d08:	4342      	muls	r2, r0
     d0a:	4649      	mov	r1, r9
     d0c:	9801      	ldr	r0, [sp, #4]
     d0e:	4b2b      	ldr	r3, [pc, #172]	; (dbc <_ff_pull_n+0xfc>)
     d10:	4798      	blx	r3
     d12:	e7f2      	b.n	cfa <_ff_pull_n+0x3a>
        memcpy(app_buf, ff_buf, nLin_bytes);
     d14:	4642      	mov	r2, r8
     d16:	4649      	mov	r1, r9
     d18:	9e01      	ldr	r6, [sp, #4]
     d1a:	0030      	movs	r0, r6
     d1c:	4c27      	ldr	r4, [pc, #156]	; (dbc <_ff_pull_n+0xfc>)
     d1e:	47a0      	blx	r4
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
     d20:	6839      	ldr	r1, [r7, #0]
     d22:	0030      	movs	r0, r6
     d24:	4440      	add	r0, r8
     d26:	002a      	movs	r2, r5
     d28:	47a0      	blx	r4
     d2a:	e7e6      	b.n	cfa <_ff_pull_n+0x3a>
      if ( n <= nLin )
     d2c:	4294      	cmp	r4, r2
     d2e:	d21e      	bcs.n	d6e <_ff_pull_n+0xae>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
     d30:	2303      	movs	r3, #3
     d32:	4644      	mov	r4, r8
     d34:	439c      	bics	r4, r3
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
     d36:	0022      	movs	r2, r4
     d38:	4649      	mov	r1, r9
     d3a:	9801      	ldr	r0, [sp, #4]
     d3c:	4b20      	ldr	r3, [pc, #128]	; (dc0 <_ff_pull_n+0x100>)
     d3e:	4798      	blx	r3
        ff_buf += nLin_4n_bytes;
     d40:	0023      	movs	r3, r4
     d42:	444b      	add	r3, r9
        uint8_t rem = nLin_bytes & 0x03;
     d44:	2003      	movs	r0, #3
     d46:	4642      	mov	r2, r8
     d48:	4010      	ands	r0, r2
        if (rem > 0)
     d4a:	d035      	beq.n	db8 <_ff_pull_n+0xf8>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
     d4c:	2204      	movs	r2, #4
     d4e:	1a12      	subs	r2, r2, r0
     d50:	b292      	uxth	r2, r2
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
     d52:	1c29      	adds	r1, r5, #0
     d54:	4295      	cmp	r5, r2
     d56:	d900      	bls.n	d5a <_ff_pull_n+0x9a>
     d58:	1c11      	adds	r1, r2, #0
     d5a:	b28c      	uxth	r4, r1
     d5c:	b2e2      	uxtb	r2, r4
          nWrap_bytes -= remrem;
     d5e:	21ff      	movs	r1, #255	; 0xff
     d60:	4021      	ands	r1, r4
     d62:	1a6d      	subs	r5, r5, r1
     d64:	b2ad      	uxth	r5, r5
          uint32_t tmp32=0;
     d66:	2100      	movs	r1, #0
     d68:	9103      	str	r1, [sp, #12]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
     d6a:	ac03      	add	r4, sp, #12
          while(rem--) *dst_u8++ = *ff_buf++;
     d6c:	e00b      	b.n	d86 <_ff_pull_n+0xc6>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
     d6e:	4342      	muls	r2, r0
     d70:	b292      	uxth	r2, r2
     d72:	4649      	mov	r1, r9
     d74:	9801      	ldr	r0, [sp, #4]
     d76:	4b12      	ldr	r3, [pc, #72]	; (dc0 <_ff_pull_n+0x100>)
     d78:	4798      	blx	r3
     d7a:	e7be      	b.n	cfa <_ff_pull_n+0x3a>
          while(rem--) *dst_u8++ = *ff_buf++;
     d7c:	7818      	ldrb	r0, [r3, #0]
     d7e:	7020      	strb	r0, [r4, #0]
     d80:	3401      	adds	r4, #1
     d82:	0008      	movs	r0, r1
     d84:	3301      	adds	r3, #1
     d86:	1e41      	subs	r1, r0, #1
     d88:	b2c9      	uxtb	r1, r1
     d8a:	2800      	cmp	r0, #0
     d8c:	d1f6      	bne.n	d7c <_ff_pull_n+0xbc>
          ff_buf = f->buffer;
     d8e:	6839      	ldr	r1, [r7, #0]
          while(remrem--) *dst_u8++ = *ff_buf++;
     d90:	e004      	b.n	d9c <_ff_pull_n+0xdc>
     d92:	780a      	ldrb	r2, [r1, #0]
     d94:	7022      	strb	r2, [r4, #0]
     d96:	3401      	adds	r4, #1
     d98:	001a      	movs	r2, r3
     d9a:	3101      	adds	r1, #1
     d9c:	1e53      	subs	r3, r2, #1
     d9e:	b2db      	uxtb	r3, r3
     da0:	2a00      	cmp	r2, #0
     da2:	d1f6      	bne.n	d92 <_ff_pull_n+0xd2>
          *tx_fifo = tmp32;
     da4:	9b01      	ldr	r3, [sp, #4]
     da6:	9a03      	ldr	r2, [sp, #12]
     da8:	601a      	str	r2, [r3, #0]
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
     daa:	2d00      	cmp	r5, #0
     dac:	d0a5      	beq.n	cfa <_ff_pull_n+0x3a>
     dae:	002a      	movs	r2, r5
     db0:	9801      	ldr	r0, [sp, #4]
     db2:	4b03      	ldr	r3, [pc, #12]	; (dc0 <_ff_pull_n+0x100>)
     db4:	4798      	blx	r3
}
     db6:	e7a0      	b.n	cfa <_ff_pull_n+0x3a>
          ff_buf = f->buffer; // wrap around to beginning
     db8:	6839      	ldr	r1, [r7, #0]
     dba:	e7f6      	b.n	daa <_ff_pull_n+0xea>
     dbc:	000031dd 	.word	0x000031dd
     dc0:	00000c75 	.word	0x00000c75

00000dc4 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
     dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc6:	b085      	sub	sp, #20
     dc8:	0005      	movs	r5, r0
     dca:	9102      	str	r1, [sp, #8]
     dcc:	9203      	str	r2, [sp, #12]
     dce:	aa0a      	add	r2, sp, #40	; 0x28
     dd0:	8811      	ldrh	r1, [r2, #0]
     dd2:	aa0b      	add	r2, sp, #44	; 0x2c
     dd4:	7817      	ldrb	r7, [r2, #0]
  uint16_t cnt = wAbs-rAbs;
     dd6:	1a5c      	subs	r4, r3, r1
     dd8:	b2a4      	uxth	r4, r4
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
     dda:	428b      	cmp	r3, r1
     ddc:	d202      	bcs.n	de4 <_tu_fifo_peek_n+0x20>
     dde:	8942      	ldrh	r2, [r0, #10]
     de0:	1aa4      	subs	r4, r4, r2
     de2:	b2a4      	uxth	r4, r4
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
     de4:	88ae      	ldrh	r6, [r5, #4]
     de6:	42a6      	cmp	r6, r4
     de8:	d208      	bcs.n	dfc <_tu_fifo_peek_n+0x38>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
     dea:	0032      	movs	r2, r6
     dec:	0019      	movs	r1, r3
     dee:	0028      	movs	r0, r5
     df0:	4b0c      	ldr	r3, [pc, #48]	; (e24 <_tu_fifo_peek_n+0x60>)
     df2:	4798      	blx	r3
     df4:	8228      	strh	r0, [r5, #16]
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
    rAbs = f->rd_idx;
     df6:	8a29      	ldrh	r1, [r5, #16]
     df8:	b289      	uxth	r1, r1
    cnt = f->depth;
     dfa:	0034      	movs	r4, r6
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
     dfc:	2c00      	cmp	r4, #0
     dfe:	d00d      	beq.n	e1c <_tu_fifo_peek_n+0x58>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
     e00:	9a03      	ldr	r2, [sp, #12]
     e02:	4294      	cmp	r4, r2
     e04:	d300      	bcc.n	e08 <_tu_fifo_peek_n+0x44>
     e06:	0014      	movs	r4, r2

  uint16_t rRel = get_relative_pointer(f, rAbs);
     e08:	0028      	movs	r0, r5
     e0a:	4b07      	ldr	r3, [pc, #28]	; (e28 <_tu_fifo_peek_n+0x64>)
     e0c:	4798      	blx	r3
     e0e:	0003      	movs	r3, r0

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
     e10:	9700      	str	r7, [sp, #0]
     e12:	0022      	movs	r2, r4
     e14:	9902      	ldr	r1, [sp, #8]
     e16:	0028      	movs	r0, r5
     e18:	4d04      	ldr	r5, [pc, #16]	; (e2c <_tu_fifo_peek_n+0x68>)
     e1a:	47a8      	blx	r5

  return n;
}
     e1c:	0020      	movs	r0, r4
     e1e:	b005      	add	sp, #20
     e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e22:	46c0      	nop			; (mov r8, r8)
     e24:	00000bf5 	.word	0x00000bf5
     e28:	00000c0d 	.word	0x00000c0d
     e2c:	00000cc1 	.word	0x00000cc1

00000e30 <_tu_fifo_read_n>:

  return n;
}

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
     e30:	b530      	push	{r4, r5, lr}
     e32:	b083      	sub	sp, #12
     e34:	0004      	movs	r4, r0
     e36:	001d      	movs	r5, r3
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
     e38:	89c3      	ldrh	r3, [r0, #14]
     e3a:	b29b      	uxth	r3, r3
     e3c:	8a00      	ldrh	r0, [r0, #16]
     e3e:	9501      	str	r5, [sp, #4]
     e40:	9000      	str	r0, [sp, #0]
     e42:	0020      	movs	r0, r4
     e44:	4d06      	ldr	r5, [pc, #24]	; (e60 <_tu_fifo_read_n+0x30>)
     e46:	47a8      	blx	r5
     e48:	0005      	movs	r5, r0

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
     e4a:	8a21      	ldrh	r1, [r4, #16]
     e4c:	b289      	uxth	r1, r1
     e4e:	0002      	movs	r2, r0
     e50:	0020      	movs	r0, r4
     e52:	4b04      	ldr	r3, [pc, #16]	; (e64 <_tu_fifo_read_n+0x34>)
     e54:	4798      	blx	r3
     e56:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return n;
}
     e58:	0028      	movs	r0, r5
     e5a:	b003      	add	sp, #12
     e5c:	bd30      	pop	{r4, r5, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	00000dc5 	.word	0x00000dc5
     e64:	00000bdd 	.word	0x00000bdd

00000e68 <_ff_push_const_addr>:
{
     e68:	b530      	push	{r4, r5, lr}
     e6a:	b083      	sub	sp, #12
  uint16_t full_words = len >> 2;
     e6c:	0895      	lsrs	r5, r2, #2
  while(full_words--)
     e6e:	e009      	b.n	e84 <_ff_push_const_addr+0x1c>
    tu_unaligned_write32(ff_buf, *rx_fifo);
     e70:	680b      	ldr	r3, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
     e72:	7003      	strb	r3, [r0, #0]
     e74:	0a1d      	lsrs	r5, r3, #8
     e76:	7045      	strb	r5, [r0, #1]
     e78:	0c1d      	lsrs	r5, r3, #16
     e7a:	7085      	strb	r5, [r0, #2]
     e7c:	0e1b      	lsrs	r3, r3, #24
     e7e:	70c3      	strb	r3, [r0, #3]
    ff_buf += 4;
     e80:	3004      	adds	r0, #4
  while(full_words--)
     e82:	0025      	movs	r5, r4
     e84:	1e6c      	subs	r4, r5, #1
     e86:	b2a4      	uxth	r4, r4
     e88:	2d00      	cmp	r5, #0
     e8a:	d1f1      	bne.n	e70 <_ff_push_const_addr+0x8>
  uint8_t const bytes_rem = len & 0x03;
     e8c:	2303      	movs	r3, #3
     e8e:	401a      	ands	r2, r3
  if ( bytes_rem )
     e90:	d101      	bne.n	e96 <_ff_push_const_addr+0x2e>
}
     e92:	b003      	add	sp, #12
     e94:	bd30      	pop	{r4, r5, pc}
    uint32_t tmp32 = *rx_fifo;
     e96:	680b      	ldr	r3, [r1, #0]
     e98:	9301      	str	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
     e9a:	a901      	add	r1, sp, #4
     e9c:	4b01      	ldr	r3, [pc, #4]	; (ea4 <_ff_push_const_addr+0x3c>)
     e9e:	4798      	blx	r3
}
     ea0:	e7f7      	b.n	e92 <_ff_push_const_addr+0x2a>
     ea2:	46c0      	nop			; (mov r8, r8)
     ea4:	000031dd 	.word	0x000031dd

00000ea8 <_ff_push_n>:
{
     ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
     eaa:	46ce      	mov	lr, r9
     eac:	4647      	mov	r7, r8
     eae:	b580      	push	{r7, lr}
     eb0:	b085      	sub	sp, #20
     eb2:	0007      	movs	r7, r0
     eb4:	9101      	str	r1, [sp, #4]
     eb6:	a90c      	add	r1, sp, #48	; 0x30
     eb8:	7808      	ldrb	r0, [r1, #0]
  uint16_t const nLin = f->depth - rel;
     eba:	88bc      	ldrh	r4, [r7, #4]
     ebc:	1ae4      	subs	r4, r4, r3
     ebe:	b2a4      	uxth	r4, r4
  uint16_t const nWrap = n - nLin;
     ec0:	1b15      	subs	r5, r2, r4
     ec2:	b2ad      	uxth	r5, r5
  uint16_t nLin_bytes = nLin * f->item_size;
     ec4:	88f9      	ldrh	r1, [r7, #6]
     ec6:	000e      	movs	r6, r1
     ec8:	4366      	muls	r6, r4
     eca:	b2b6      	uxth	r6, r6
     ecc:	46b0      	mov	r8, r6
  uint16_t nWrap_bytes = nWrap * f->item_size;
     ece:	434d      	muls	r5, r1
     ed0:	b2ad      	uxth	r5, r5
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
     ed2:	434b      	muls	r3, r1
     ed4:	683e      	ldr	r6, [r7, #0]
     ed6:	46b1      	mov	r9, r6
     ed8:	4499      	add	r9, r3
  switch (copy_mode)
     eda:	2800      	cmp	r0, #0
     edc:	d006      	beq.n	eec <_ff_push_n+0x44>
     ede:	2801      	cmp	r0, #1
     ee0:	d018      	beq.n	f14 <_ff_push_n+0x6c>
}
     ee2:	b005      	add	sp, #20
     ee4:	bc0c      	pop	{r2, r3}
     ee6:	4690      	mov	r8, r2
     ee8:	4699      	mov	r9, r3
     eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(n <= nLin)
     eec:	4294      	cmp	r4, r2
     eee:	d305      	bcc.n	efc <_ff_push_n+0x54>
        memcpy(ff_buf, app_buf, n*f->item_size);
     ef0:	434a      	muls	r2, r1
     ef2:	9901      	ldr	r1, [sp, #4]
     ef4:	4648      	mov	r0, r9
     ef6:	4b2a      	ldr	r3, [pc, #168]	; (fa0 <_ff_push_n+0xf8>)
     ef8:	4798      	blx	r3
     efa:	e7f2      	b.n	ee2 <_ff_push_n+0x3a>
        memcpy(ff_buf, app_buf, nLin_bytes);
     efc:	4642      	mov	r2, r8
     efe:	9e01      	ldr	r6, [sp, #4]
     f00:	0031      	movs	r1, r6
     f02:	4648      	mov	r0, r9
     f04:	4c26      	ldr	r4, [pc, #152]	; (fa0 <_ff_push_n+0xf8>)
     f06:	47a0      	blx	r4
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
     f08:	6838      	ldr	r0, [r7, #0]
     f0a:	0031      	movs	r1, r6
     f0c:	4441      	add	r1, r8
     f0e:	002a      	movs	r2, r5
     f10:	47a0      	blx	r4
     f12:	e7e6      	b.n	ee2 <_ff_push_n+0x3a>
      if(n <= nLin)
     f14:	4294      	cmp	r4, r2
     f16:	d21f      	bcs.n	f58 <_ff_push_n+0xb0>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
     f18:	2303      	movs	r3, #3
     f1a:	4644      	mov	r4, r8
     f1c:	439c      	bics	r4, r3
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
     f1e:	0022      	movs	r2, r4
     f20:	9901      	ldr	r1, [sp, #4]
     f22:	4648      	mov	r0, r9
     f24:	4b1f      	ldr	r3, [pc, #124]	; (fa4 <_ff_push_n+0xfc>)
     f26:	4798      	blx	r3
        ff_buf += nLin_4n_bytes;
     f28:	0023      	movs	r3, r4
     f2a:	444b      	add	r3, r9
        uint8_t rem = nLin_bytes & 0x03;
     f2c:	2103      	movs	r1, #3
     f2e:	4642      	mov	r2, r8
     f30:	4011      	ands	r1, r2
        if (rem > 0)
     f32:	d033      	beq.n	f9c <_ff_push_n+0xf4>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
     f34:	2204      	movs	r2, #4
     f36:	1a52      	subs	r2, r2, r1
     f38:	b292      	uxth	r2, r2
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
     f3a:	1c28      	adds	r0, r5, #0
     f3c:	4295      	cmp	r5, r2
     f3e:	d900      	bls.n	f42 <_ff_push_n+0x9a>
     f40:	1c10      	adds	r0, r2, #0
     f42:	b284      	uxth	r4, r0
     f44:	b2e2      	uxtb	r2, r4
          nWrap_bytes -= remrem;
     f46:	20ff      	movs	r0, #255	; 0xff
     f48:	4020      	ands	r0, r4
     f4a:	1a2d      	subs	r5, r5, r0
     f4c:	b2ad      	uxth	r5, r5
          uint32_t tmp32 = *rx_fifo;
     f4e:	9801      	ldr	r0, [sp, #4]
     f50:	6800      	ldr	r0, [r0, #0]
     f52:	9003      	str	r0, [sp, #12]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
     f54:	ac03      	add	r4, sp, #12
          while(rem--) *ff_buf++ = *src_u8++;
     f56:	e00b      	b.n	f70 <_ff_push_n+0xc8>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
     f58:	434a      	muls	r2, r1
     f5a:	b292      	uxth	r2, r2
     f5c:	9901      	ldr	r1, [sp, #4]
     f5e:	4648      	mov	r0, r9
     f60:	4b10      	ldr	r3, [pc, #64]	; (fa4 <_ff_push_n+0xfc>)
     f62:	4798      	blx	r3
     f64:	e7bd      	b.n	ee2 <_ff_push_n+0x3a>
          while(rem--) *ff_buf++ = *src_u8++;
     f66:	7821      	ldrb	r1, [r4, #0]
     f68:	7019      	strb	r1, [r3, #0]
     f6a:	3401      	adds	r4, #1
     f6c:	0001      	movs	r1, r0
     f6e:	3301      	adds	r3, #1
     f70:	1e48      	subs	r0, r1, #1
     f72:	b2c0      	uxtb	r0, r0
     f74:	2900      	cmp	r1, #0
     f76:	d1f6      	bne.n	f66 <_ff_push_n+0xbe>
          ff_buf = f->buffer;
     f78:	6838      	ldr	r0, [r7, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
     f7a:	e004      	b.n	f86 <_ff_push_n+0xde>
     f7c:	7822      	ldrb	r2, [r4, #0]
     f7e:	7002      	strb	r2, [r0, #0]
     f80:	3401      	adds	r4, #1
     f82:	001a      	movs	r2, r3
     f84:	3001      	adds	r0, #1
     f86:	1e53      	subs	r3, r2, #1
     f88:	b2db      	uxtb	r3, r3
     f8a:	2a00      	cmp	r2, #0
     f8c:	d1f6      	bne.n	f7c <_ff_push_n+0xd4>
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
     f8e:	2d00      	cmp	r5, #0
     f90:	d0a7      	beq.n	ee2 <_ff_push_n+0x3a>
     f92:	002a      	movs	r2, r5
     f94:	9901      	ldr	r1, [sp, #4]
     f96:	4b03      	ldr	r3, [pc, #12]	; (fa4 <_ff_push_n+0xfc>)
     f98:	4798      	blx	r3
}
     f9a:	e7a2      	b.n	ee2 <_ff_push_n+0x3a>
          ff_buf = f->buffer; // wrap around to beginning
     f9c:	6838      	ldr	r0, [r7, #0]
     f9e:	e7f6      	b.n	f8e <_ff_push_n+0xe6>
     fa0:	000031dd 	.word	0x000031dd
     fa4:	00000e69 	.word	0x00000e69

00000fa8 <_tu_fifo_write_n>:
{
     fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     faa:	b085      	sub	sp, #20
     fac:	0004      	movs	r4, r0
     fae:	9303      	str	r3, [sp, #12]
  if ( n == 0 ) return 0;
     fb0:	2a00      	cmp	r2, #0
     fb2:	d037      	beq.n	1024 <_tu_fifo_write_n+0x7c>
  uint16_t w = f->wr_idx, r = f->rd_idx;
     fb4:	89c7      	ldrh	r7, [r0, #14]
     fb6:	b2bf      	uxth	r7, r7
     fb8:	8a03      	ldrh	r3, [r0, #16]
     fba:	b29b      	uxth	r3, r3
  if (!f->overwritable)
     fbc:	7a00      	ldrb	r0, [r0, #8]
     fbe:	2800      	cmp	r0, #0
     fc0:	d124      	bne.n	100c <_tu_fifo_write_n+0x64>
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
     fc2:	88a0      	ldrh	r0, [r4, #4]
  uint16_t cnt = wAbs-rAbs;
     fc4:	1afd      	subs	r5, r7, r3
     fc6:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
     fc8:	429f      	cmp	r7, r3
     fca:	d202      	bcs.n	fd2 <_tu_fifo_write_n+0x2a>
     fcc:	8963      	ldrh	r3, [r4, #10]
     fce:	1aed      	subs	r5, r5, r3
     fd0:	b2ad      	uxth	r5, r5
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
     fd2:	1b43      	subs	r3, r0, r5
     fd4:	b29b      	uxth	r3, r3
     fd6:	1c15      	adds	r5, r2, #0
     fd8:	429a      	cmp	r2, r3
     fda:	d900      	bls.n	fde <_tu_fifo_write_n+0x36>
     fdc:	1c1d      	adds	r5, r3, #0
     fde:	b2ad      	uxth	r5, r5
  uint8_t const* buf8 = (uint8_t const*) data;
     fe0:	000e      	movs	r6, r1
  uint16_t wRel = get_relative_pointer(f, w);
     fe2:	0039      	movs	r1, r7
     fe4:	0020      	movs	r0, r4
     fe6:	4b10      	ldr	r3, [pc, #64]	; (1028 <_tu_fifo_write_n+0x80>)
     fe8:	4798      	blx	r3
     fea:	0003      	movs	r3, r0
  _ff_push_n(f, buf8, n, wRel, copy_mode);
     fec:	9a03      	ldr	r2, [sp, #12]
     fee:	9200      	str	r2, [sp, #0]
     ff0:	002a      	movs	r2, r5
     ff2:	0031      	movs	r1, r6
     ff4:	0020      	movs	r0, r4
     ff6:	4e0d      	ldr	r6, [pc, #52]	; (102c <_tu_fifo_write_n+0x84>)
     ff8:	47b0      	blx	r6
  f->wr_idx = advance_pointer(f, w, n);
     ffa:	002a      	movs	r2, r5
     ffc:	0039      	movs	r1, r7
     ffe:	0020      	movs	r0, r4
    1000:	4b0b      	ldr	r3, [pc, #44]	; (1030 <_tu_fifo_write_n+0x88>)
    1002:	4798      	blx	r3
    1004:	81e0      	strh	r0, [r4, #14]
}
    1006:	0028      	movs	r0, r5
    1008:	b005      	add	sp, #20
    100a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (n >= f->depth)
    100c:	88a5      	ldrh	r5, [r4, #4]
    100e:	42aa      	cmp	r2, r5
    1010:	d305      	bcc.n	101e <_tu_fifo_write_n+0x76>
    buf8 = buf8 + (n - f->depth) * f->item_size;
    1012:	1b52      	subs	r2, r2, r5
    1014:	88e6      	ldrh	r6, [r4, #6]
    1016:	4356      	muls	r6, r2
    1018:	198e      	adds	r6, r1, r6
    w = r;
    101a:	001f      	movs	r7, r3
    101c:	e7e1      	b.n	fe2 <_tu_fifo_write_n+0x3a>
  uint8_t const* buf8 = (uint8_t const*) data;
    101e:	000e      	movs	r6, r1
    1020:	0015      	movs	r5, r2
    1022:	e7de      	b.n	fe2 <_tu_fifo_write_n+0x3a>
  if ( n == 0 ) return 0;
    1024:	0015      	movs	r5, r2
    1026:	e7ee      	b.n	1006 <_tu_fifo_write_n+0x5e>
    1028:	00000c0d 	.word	0x00000c0d
    102c:	00000ea9 	.word	0x00000ea9
    1030:	00000bdd 	.word	0x00000bdd

00001034 <tu_fifo_config>:
{
    1034:	b530      	push	{r4, r5, lr}
    1036:	ac03      	add	r4, sp, #12
    1038:	7825      	ldrb	r5, [r4, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
    103a:	2480      	movs	r4, #128	; 0x80
    103c:	0224      	lsls	r4, r4, #8
    103e:	42a2      	cmp	r2, r4
    1040:	d80f      	bhi.n	1062 <tu_fifo_config+0x2e>
  f->buffer = (uint8_t*) buffer;
    1042:	6001      	str	r1, [r0, #0]
  f->depth  = depth;
    1044:	8082      	strh	r2, [r0, #4]
  f->item_size = item_size;
    1046:	80c3      	strh	r3, [r0, #6]
  f->overwritable = overwritable;
    1048:	7205      	strb	r5, [r0, #8]
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
    104a:	0052      	lsls	r2, r2, #1
    104c:	b292      	uxth	r2, r2
    104e:	3a01      	subs	r2, #1
    1050:	b292      	uxth	r2, r2
    1052:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
    1054:	43d2      	mvns	r2, r2
    1056:	8142      	strh	r2, [r0, #10]
  f->rd_idx = f->wr_idx = 0;
    1058:	2300      	movs	r3, #0
    105a:	81c3      	strh	r3, [r0, #14]
    105c:	8203      	strh	r3, [r0, #16]
  return true;
    105e:	2001      	movs	r0, #1
}
    1060:	bd30      	pop	{r4, r5, pc}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
    1062:	2000      	movs	r0, #0
    1064:	e7fc      	b.n	1060 <tu_fifo_config+0x2c>

00001066 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
    1066:	89c1      	ldrh	r1, [r0, #14]
    1068:	b289      	uxth	r1, r1
    106a:	8a02      	ldrh	r2, [r0, #16]
    106c:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
    106e:	1a8b      	subs	r3, r1, r2
    1070:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1072:	4291      	cmp	r1, r2
    1074:	d202      	bcs.n	107c <tu_fifo_count+0x16>
    1076:	8942      	ldrh	r2, [r0, #10]
    1078:	1a9b      	subs	r3, r3, r2
    107a:	b29b      	uxth	r3, r3
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
    107c:	8882      	ldrh	r2, [r0, #4]
    107e:	1c10      	adds	r0, r2, #0
    1080:	429a      	cmp	r2, r3
    1082:	d900      	bls.n	1086 <tu_fifo_count+0x20>
    1084:	1c18      	adds	r0, r3, #0
    1086:	b280      	uxth	r0, r0
}
    1088:	4770      	bx	lr

0000108a <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
    108a:	89c3      	ldrh	r3, [r0, #14]
    108c:	8a00      	ldrh	r0, [r0, #16]
  return wAbs == rAbs;
    108e:	1a18      	subs	r0, r3, r0
    1090:	4243      	negs	r3, r0
    1092:	4158      	adcs	r0, r3
    1094:	b2c0      	uxtb	r0, r0
}
    1096:	4770      	bx	lr

00001098 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
    1098:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
    109a:	89c4      	ldrh	r4, [r0, #14]
    109c:	b2a4      	uxth	r4, r4
    109e:	8a01      	ldrh	r1, [r0, #16]
    10a0:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    10a2:	8882      	ldrh	r2, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
    10a4:	1a63      	subs	r3, r4, r1
    10a6:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    10a8:	428c      	cmp	r4, r1
    10aa:	d202      	bcs.n	10b2 <tu_fifo_remaining+0x1a>
    10ac:	8940      	ldrh	r0, [r0, #10]
    10ae:	1a1b      	subs	r3, r3, r0
    10b0:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    10b2:	1ad0      	subs	r0, r2, r3
    10b4:	b280      	uxth	r0, r0
}
    10b6:	bd10      	pop	{r4, pc}

000010b8 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
    10b8:	b570      	push	{r4, r5, r6, lr}
    10ba:	0004      	movs	r4, r0
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
    10bc:	89c2      	ldrh	r2, [r0, #14]
    10be:	b292      	uxth	r2, r2
    10c0:	8a03      	ldrh	r3, [r0, #16]
    10c2:	b29b      	uxth	r3, r3
    10c4:	4d05      	ldr	r5, [pc, #20]	; (10dc <tu_fifo_read+0x24>)
    10c6:	47a8      	blx	r5
    10c8:	0005      	movs	r5, r0

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
    10ca:	8a21      	ldrh	r1, [r4, #16]
    10cc:	b289      	uxth	r1, r1
    10ce:	b282      	uxth	r2, r0
    10d0:	0020      	movs	r0, r4
    10d2:	4b03      	ldr	r3, [pc, #12]	; (10e0 <tu_fifo_read+0x28>)
    10d4:	4798      	blx	r3
    10d6:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
    10d8:	0028      	movs	r0, r5
    10da:	bd70      	pop	{r4, r5, r6, pc}
    10dc:	00000c1d 	.word	0x00000c1d
    10e0:	00000bdd 	.word	0x00000bdd

000010e4 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
    10e4:	b510      	push	{r4, lr}
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
    10e6:	2300      	movs	r3, #0
    10e8:	4c01      	ldr	r4, [pc, #4]	; (10f0 <tu_fifo_read_n+0xc>)
    10ea:	47a0      	blx	r4
}
    10ec:	bd10      	pop	{r4, pc}
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	00000e31 	.word	0x00000e31

000010f4 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	0004      	movs	r4, r0
    10f8:	000e      	movs	r6, r1
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
    10fa:	89c5      	ldrh	r5, [r0, #14]
    10fc:	b2ad      	uxth	r5, r5

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    10fe:	8a02      	ldrh	r2, [r0, #16]
    1100:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
    1102:	1aab      	subs	r3, r5, r2
    1104:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1106:	4295      	cmp	r5, r2
    1108:	d202      	bcs.n	1110 <tu_fifo_write+0x1c>
    110a:	8942      	ldrh	r2, [r0, #10]
    110c:	1a9b      	subs	r3, r3, r2
    110e:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
    1110:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1112:	429a      	cmp	r2, r3
    1114:	d013      	beq.n	113e <tu_fifo_write+0x4a>
  {
    ret = false;
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
    1116:	0029      	movs	r1, r5
    1118:	0020      	movs	r0, r4
    111a:	4b0b      	ldr	r3, [pc, #44]	; (1148 <tu_fifo_write+0x54>)
    111c:	4798      	blx	r3
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
    111e:	88e2      	ldrh	r2, [r4, #6]
    1120:	4350      	muls	r0, r2
    1122:	6823      	ldr	r3, [r4, #0]
    1124:	469c      	mov	ip, r3
    1126:	4460      	add	r0, ip
    1128:	0031      	movs	r1, r6
    112a:	4b08      	ldr	r3, [pc, #32]	; (114c <tu_fifo_write+0x58>)
    112c:	4798      	blx	r3

    // Write data
    _ff_push(f, data, wRel);

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
    112e:	2201      	movs	r2, #1
    1130:	0029      	movs	r1, r5
    1132:	0020      	movs	r0, r4
    1134:	4b06      	ldr	r3, [pc, #24]	; (1150 <tu_fifo_write+0x5c>)
    1136:	4798      	blx	r3
    1138:	81e0      	strh	r0, [r4, #14]

    ret = true;
    113a:	2001      	movs	r0, #1
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
    113c:	bd70      	pop	{r4, r5, r6, pc}
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    113e:	7a20      	ldrb	r0, [r4, #8]
    1140:	2800      	cmp	r0, #0
    1142:	d1e8      	bne.n	1116 <tu_fifo_write+0x22>
    1144:	e7fa      	b.n	113c <tu_fifo_write+0x48>
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	00000c0d 	.word	0x00000c0d
    114c:	000031dd 	.word	0x000031dd
    1150:	00000bdd 	.word	0x00000bdd

00001154 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
    1154:	b510      	push	{r4, lr}
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
    1156:	2300      	movs	r3, #0
    1158:	4c01      	ldr	r4, [pc, #4]	; (1160 <tu_fifo_write_n+0xc>)
    115a:	47a0      	blx	r4
}
    115c:	bd10      	pop	{r4, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	00000fa9 	.word	0x00000fa9

00001164 <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
    1164:	2300      	movs	r3, #0
    1166:	81c3      	strh	r3, [r0, #14]
    1168:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
    116a:	8883      	ldrh	r3, [r0, #4]
    116c:	005b      	lsls	r3, r3, #1
    116e:	b29b      	uxth	r3, r3
    1170:	3b01      	subs	r3, #1
    1172:	b29b      	uxth	r3, r3
    1174:	8183      	strh	r3, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
    1176:	43db      	mvns	r3, r3
    1178:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
    117a:	2001      	movs	r0, #1
    117c:	4770      	bx	lr

0000117e <tu_fifo_set_overwritable>:
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
    117e:	7201      	strb	r1, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
    1180:	2001      	movs	r0, #1
    1182:	4770      	bx	lr

00001184 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
    1184:	b570      	push	{r4, r5, r6, lr}
    1186:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    1188:	2400      	movs	r4, #0
    118a:	e00f      	b.n	11ac <configuration_reset+0x28>
    drvid -= _app_driver_count;
    118c:	1ae3      	subs	r3, r4, r3
    118e:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1190:	2b00      	cmp	r3, #0
    1192:	d11e      	bne.n	11d2 <configuration_reset+0x4e>
    1194:	005a      	lsls	r2, r3, #1
    1196:	18d3      	adds	r3, r2, r3
    1198:	00da      	lsls	r2, r3, #3
    119a:	4b18      	ldr	r3, [pc, #96]	; (11fc <configuration_reset+0x78>)
    119c:	189b      	adds	r3, r3, r2
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
    119e:	2b00      	cmp	r3, #0
    11a0:	d02a      	beq.n	11f8 <configuration_reset+0x74>
    driver->reset(rhport);
    11a2:	685b      	ldr	r3, [r3, #4]
    11a4:	0028      	movs	r0, r5
    11a6:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    11a8:	3401      	adds	r4, #1
    11aa:	b2e4      	uxtb	r4, r4
    11ac:	4b14      	ldr	r3, [pc, #80]	; (1200 <configuration_reset+0x7c>)
    11ae:	791b      	ldrb	r3, [r3, #4]
    11b0:	1c5a      	adds	r2, r3, #1
    11b2:	4294      	cmp	r4, r2
    11b4:	da0f      	bge.n	11d6 <configuration_reset+0x52>
  if ( usbd_app_driver_get_cb )
    11b6:	4a13      	ldr	r2, [pc, #76]	; (1204 <configuration_reset+0x80>)
    11b8:	2a00      	cmp	r2, #0
    11ba:	d008      	beq.n	11ce <configuration_reset+0x4a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    11bc:	429c      	cmp	r4, r3
    11be:	d2e5      	bcs.n	118c <configuration_reset+0x8>
    11c0:	0062      	lsls	r2, r4, #1
    11c2:	1912      	adds	r2, r2, r4
    11c4:	00d1      	lsls	r1, r2, #3
    11c6:	4b0e      	ldr	r3, [pc, #56]	; (1200 <configuration_reset+0x7c>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	185b      	adds	r3, r3, r1
    11cc:	e7e7      	b.n	119e <configuration_reset+0x1a>
  if ( usbd_app_driver_get_cb )
    11ce:	0023      	movs	r3, r4
    11d0:	e7de      	b.n	1190 <configuration_reset+0xc>
  return NULL;
    11d2:	2300      	movs	r3, #0
    11d4:	e7e3      	b.n	119e <configuration_reset+0x1a>
  }

  tu_varclr(&_usbd_dev);
    11d6:	4c0a      	ldr	r4, [pc, #40]	; (1200 <configuration_reset+0x7c>)
    11d8:	0020      	movs	r0, r4
    11da:	3008      	adds	r0, #8
    11dc:	2233      	movs	r2, #51	; 0x33
    11de:	2100      	movs	r1, #0
    11e0:	4d09      	ldr	r5, [pc, #36]	; (1208 <configuration_reset+0x84>)
    11e2:	47a8      	blx	r5
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
    11e4:	0020      	movs	r0, r4
    11e6:	300b      	adds	r0, #11
    11e8:	2210      	movs	r2, #16
    11ea:	21ff      	movs	r1, #255	; 0xff
    11ec:	47a8      	blx	r5
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
    11ee:	0020      	movs	r0, r4
    11f0:	301b      	adds	r0, #27
    11f2:	2210      	movs	r2, #16
    11f4:	21ff      	movs	r1, #255	; 0xff
    11f6:	47a8      	blx	r5
}
    11f8:	bd70      	pop	{r4, r5, r6, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	00003680 	.word	0x00003680
    1200:	200007e0 	.word	0x200007e0
    1204:	00000000 	.word	0x00000000
    1208:	00003261 	.word	0x00003261

0000120c <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
    120c:	b510      	push	{r4, lr}
  configuration_reset(rhport);
    120e:	4b02      	ldr	r3, [pc, #8]	; (1218 <usbd_reset+0xc>)
    1210:	4798      	blx	r3
  usbd_control_reset();
    1212:	4b02      	ldr	r3, [pc, #8]	; (121c <usbd_reset+0x10>)
    1214:	4798      	blx	r3
}
    1216:	bd10      	pop	{r4, pc}
    1218:	00001185 	.word	0x00001185
    121c:	00002071 	.word	0x00002071

00001220 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
    1220:	b570      	push	{r4, r5, r6, lr}
    1222:	0005      	movs	r5, r0
    1224:	000c      	movs	r4, r1
    1226:	0016      	movs	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
    1228:	68c8      	ldr	r0, [r1, #12]
    122a:	4b04      	ldr	r3, [pc, #16]	; (123c <invoke_class_control+0x1c>)
    122c:	4798      	blx	r3
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
    122e:	68e3      	ldr	r3, [r4, #12]
    1230:	0032      	movs	r2, r6
    1232:	2101      	movs	r1, #1
    1234:	0028      	movs	r0, r5
    1236:	4798      	blx	r3
}
    1238:	bd70      	pop	{r4, r5, r6, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	00002089 	.word	0x00002089

00001240 <process_set_config>:
}

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	46de      	mov	lr, fp
    1244:	4657      	mov	r7, sl
    1246:	b580      	push	{r7, lr}
    1248:	b085      	sub	sp, #20
    124a:	9002      	str	r0, [sp, #8]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
    124c:	3901      	subs	r1, #1
    124e:	b2c8      	uxtb	r0, r1
    1250:	4b56      	ldr	r3, [pc, #344]	; (13ac <process_set_config+0x16c>)
    1252:	4798      	blx	r3
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1254:	2800      	cmp	r0, #0
    1256:	d100      	bne.n	125a <process_set_config+0x1a>
    1258:	e09d      	b.n	1396 <process_set_config+0x156>
    125a:	7843      	ldrb	r3, [r0, #1]
    125c:	2b02      	cmp	r3, #2
    125e:	d005      	beq.n	126c <process_set_config+0x2c>
    1260:	2000      	movs	r0, #0

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();

  return true;
}
    1262:	b005      	add	sp, #20
    1264:	bc0c      	pop	{r2, r3}
    1266:	4692      	mov	sl, r2
    1268:	469b      	mov	fp, r3
    126a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    126c:	79c1      	ldrb	r1, [r0, #7]
    126e:	068b      	lsls	r3, r1, #26
    1270:	d529      	bpl.n	12c6 <process_set_config+0x86>
    1272:	2201      	movs	r2, #1
    1274:	4c4e      	ldr	r4, [pc, #312]	; (13b0 <process_set_config+0x170>)
    1276:	0112      	lsls	r2, r2, #4
    1278:	7a23      	ldrb	r3, [r4, #8]
    127a:	2510      	movs	r5, #16
    127c:	43ab      	bics	r3, r5
    127e:	4313      	orrs	r3, r2
    1280:	7223      	strb	r3, [r4, #8]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    1282:	064b      	lsls	r3, r1, #25
    1284:	d521      	bpl.n	12ca <process_set_config+0x8a>
    1286:	2201      	movs	r2, #1
    1288:	4949      	ldr	r1, [pc, #292]	; (13b0 <process_set_config+0x170>)
    128a:	0152      	lsls	r2, r2, #5
    128c:	7a0b      	ldrb	r3, [r1, #8]
    128e:	2420      	movs	r4, #32
    1290:	43a3      	bics	r3, r4
    1292:	4313      	orrs	r3, r2
    1294:	720b      	strb	r3, [r1, #8]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
    1296:	0006      	movs	r6, r0
    1298:	3609      	adds	r6, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
    129a:	7882      	ldrb	r2, [r0, #2]
    129c:	78c3      	ldrb	r3, [r0, #3]
    129e:	021b      	lsls	r3, r3, #8
    12a0:	4313      	orrs	r3, r2
    12a2:	4682      	mov	sl, r0
    12a4:	449a      	add	sl, r3
  while( p_desc < desc_end )
    12a6:	4556      	cmp	r6, sl
    12a8:	d26f      	bcs.n	138a <process_set_config+0x14a>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    12aa:	7873      	ldrb	r3, [r6, #1]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
    12ac:	2b0b      	cmp	r3, #11
    12ae:	d00e      	beq.n	12ce <process_set_config+0x8e>
    uint8_t assoc_itf_count = 1;
    12b0:	2301      	movs	r3, #1
    12b2:	469b      	mov	fp, r3
    12b4:	7873      	ldrb	r3, [r6, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    12b6:	2b04      	cmp	r3, #4
    12b8:	d16f      	bne.n	139a <process_set_config+0x15a>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
    12ba:	4653      	mov	r3, sl
    12bc:	1b9d      	subs	r5, r3, r6
    12be:	b2ab      	uxth	r3, r5
    12c0:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    12c2:	2400      	movs	r4, #0
    12c4:	e020      	b.n	1308 <process_set_config+0xc8>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    12c6:	2200      	movs	r2, #0
    12c8:	e7d4      	b.n	1274 <process_set_config+0x34>
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    12ca:	2200      	movs	r2, #0
    12cc:	e7dc      	b.n	1288 <process_set_config+0x48>
      assoc_itf_count = desc_iad->bInterfaceCount;
    12ce:	78f3      	ldrb	r3, [r6, #3]
    12d0:	469b      	mov	fp, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
    12d2:	7833      	ldrb	r3, [r6, #0]
    12d4:	18f6      	adds	r6, r6, r3
    12d6:	e7ed      	b.n	12b4 <process_set_config+0x74>
    drvid -= _app_driver_count;
    12d8:	1ae3      	subs	r3, r4, r3
    12da:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    12dc:	2b00      	cmp	r3, #0
    12de:	d127      	bne.n	1330 <process_set_config+0xf0>
    12e0:	005a      	lsls	r2, r3, #1
    12e2:	18d3      	adds	r3, r2, r3
    12e4:	00dd      	lsls	r5, r3, #3
    12e6:	4b33      	ldr	r3, [pc, #204]	; (13b4 <process_set_config+0x174>)
    12e8:	195d      	adds	r5, r3, r5
      TU_ASSERT(driver);
    12ea:	2d00      	cmp	r5, #0
    12ec:	d057      	beq.n	139e <process_set_config+0x15e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
    12ee:	9a01      	ldr	r2, [sp, #4]
    12f0:	0031      	movs	r1, r6
    12f2:	9802      	ldr	r0, [sp, #8]
    12f4:	68af      	ldr	r7, [r5, #8]
    12f6:	47b8      	blx	r7
    12f8:	0007      	movs	r7, r0
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
    12fa:	2808      	cmp	r0, #8
    12fc:	d902      	bls.n	1304 <process_set_config+0xc4>
    12fe:	9b01      	ldr	r3, [sp, #4]
    1300:	4283      	cmp	r3, r0
    1302:	d217      	bcs.n	1334 <process_set_config+0xf4>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    1304:	3401      	adds	r4, #1
    1306:	b2e4      	uxtb	r4, r4
    1308:	9403      	str	r4, [sp, #12]
    130a:	4b29      	ldr	r3, [pc, #164]	; (13b0 <process_set_config+0x170>)
    130c:	791b      	ldrb	r3, [r3, #4]
    130e:	1c5a      	adds	r2, r3, #1
    1310:	4294      	cmp	r4, r2
    1312:	da32      	bge.n	137a <process_set_config+0x13a>
  if ( usbd_app_driver_get_cb )
    1314:	4a28      	ldr	r2, [pc, #160]	; (13b8 <process_set_config+0x178>)
    1316:	2a00      	cmp	r2, #0
    1318:	d008      	beq.n	132c <process_set_config+0xec>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    131a:	429c      	cmp	r4, r3
    131c:	d2dc      	bcs.n	12d8 <process_set_config+0x98>
    131e:	0063      	lsls	r3, r4, #1
    1320:	191b      	adds	r3, r3, r4
    1322:	00dd      	lsls	r5, r3, #3
    1324:	4b22      	ldr	r3, [pc, #136]	; (13b0 <process_set_config+0x170>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	195d      	adds	r5, r3, r5
    132a:	e7de      	b.n	12ea <process_set_config+0xaa>
  if ( usbd_app_driver_get_cb )
    132c:	0023      	movs	r3, r4
    132e:	e7d5      	b.n	12dc <process_set_config+0x9c>
  return NULL;
    1330:	2500      	movs	r5, #0
    1332:	e7da      	b.n	12ea <process_set_config+0xaa>
        if ( assoc_itf_count == 1)
    1334:	465b      	mov	r3, fp
    1336:	2b01      	cmp	r3, #1
    1338:	d010      	beq.n	135c <process_set_config+0x11c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
    133a:	2200      	movs	r2, #0
    133c:	4593      	cmp	fp, r2
    133e:	d914      	bls.n	136a <process_set_config+0x12a>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
    1340:	78b3      	ldrb	r3, [r6, #2]
    1342:	18d3      	adds	r3, r2, r3
    1344:	b2db      	uxtb	r3, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    1346:	491a      	ldr	r1, [pc, #104]	; (13b0 <process_set_config+0x170>)
    1348:	18c9      	adds	r1, r1, r3
    134a:	7ac9      	ldrb	r1, [r1, #11]
    134c:	29ff      	cmp	r1, #255	; 0xff
    134e:	d128      	bne.n	13a2 <process_set_config+0x162>
          _usbd_dev.itf2drv[itf_num] = drv_id;
    1350:	4917      	ldr	r1, [pc, #92]	; (13b0 <process_set_config+0x170>)
    1352:	18cb      	adds	r3, r1, r3
    1354:	72dc      	strb	r4, [r3, #11]
        for(uint8_t i=0; i<assoc_itf_count; i++)
    1356:	3201      	adds	r2, #1
    1358:	b2d2      	uxtb	r2, r2
    135a:	e7ef      	b.n	133c <process_set_config+0xfc>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
    135c:	68aa      	ldr	r2, [r5, #8]
    135e:	4b17      	ldr	r3, [pc, #92]	; (13bc <process_set_config+0x17c>)
    1360:	429a      	cmp	r2, r3
    1362:	d1ea      	bne.n	133a <process_set_config+0xfa>
    1364:	2302      	movs	r3, #2
    1366:	469b      	mov	fp, r3
    1368:	e7e7      	b.n	133a <process_set_config+0xfa>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
    136a:	4811      	ldr	r0, [pc, #68]	; (13b0 <process_set_config+0x170>)
    136c:	301b      	adds	r0, #27
    136e:	0023      	movs	r3, r4
    1370:	003a      	movs	r2, r7
    1372:	0031      	movs	r1, r6
    1374:	4c12      	ldr	r4, [pc, #72]	; (13c0 <process_set_config+0x180>)
    1376:	47a0      	blx	r4
        p_desc += drv_len;
    1378:	19f6      	adds	r6, r6, r7
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
    137a:	4b0d      	ldr	r3, [pc, #52]	; (13b0 <process_set_config+0x170>)
    137c:	791b      	ldrb	r3, [r3, #4]
    137e:	3301      	adds	r3, #1
    1380:	9a03      	ldr	r2, [sp, #12]
    1382:	429a      	cmp	r2, r3
    1384:	db8f      	blt.n	12a6 <process_set_config+0x66>
    1386:	2000      	movs	r0, #0
    1388:	e76b      	b.n	1262 <process_set_config+0x22>
  if (tud_mount_cb) tud_mount_cb();
    138a:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <process_set_config+0x184>)
    138c:	2b00      	cmp	r3, #0
    138e:	d00a      	beq.n	13a6 <process_set_config+0x166>
    1390:	4798      	blx	r3
  return true;
    1392:	2001      	movs	r0, #1
    1394:	e765      	b.n	1262 <process_set_config+0x22>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1396:	2000      	movs	r0, #0
    1398:	e763      	b.n	1262 <process_set_config+0x22>
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    139a:	2000      	movs	r0, #0
    139c:	e761      	b.n	1262 <process_set_config+0x22>
      TU_ASSERT(driver);
    139e:	2000      	movs	r0, #0
    13a0:	e75f      	b.n	1262 <process_set_config+0x22>
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    13a2:	2000      	movs	r0, #0
    13a4:	e75d      	b.n	1262 <process_set_config+0x22>
  return true;
    13a6:	2001      	movs	r0, #1
    13a8:	e75b      	b.n	1262 <process_set_config+0x22>
    13aa:	46c0      	nop			; (mov r8, r8)
    13ac:	00002f99 	.word	0x00002f99
    13b0:	200007e0 	.word	0x200007e0
    13b4:	00003680 	.word	0x00003680
    13b8:	00000000 	.word	0x00000000
    13bc:	0000088d 	.word	0x0000088d
    13c0:	00002f69 	.word	0x00002f69
    13c4:	00000000 	.word	0x00000000

000013c8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
    13c8:	b570      	push	{r4, r5, r6, lr}
    13ca:	0004      	movs	r4, r0
    13cc:	000d      	movs	r5, r1
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
    13ce:	788b      	ldrb	r3, [r1, #2]
    13d0:	78c8      	ldrb	r0, [r1, #3]
    13d2:	0200      	lsls	r0, r0, #8
    13d4:	4318      	orrs	r0, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
    13d6:	0a02      	lsrs	r2, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    13d8:	b2c0      	uxtb	r0, r0
  uint8_t const desc_index = tu_u16_low( p_request->wValue );

  switch(desc_type)
    13da:	2a0f      	cmp	r2, #15
    13dc:	d851      	bhi.n	1482 <process_get_descriptor+0xba>
    13de:	0093      	lsls	r3, r2, #2
    13e0:	492e      	ldr	r1, [pc, #184]	; (149c <process_get_descriptor+0xd4>)
    13e2:	58cb      	ldr	r3, [r1, r3]
    13e4:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
    13e6:	4b2e      	ldr	r3, [pc, #184]	; (14a0 <process_get_descriptor+0xd8>)
    13e8:	4798      	blx	r3
    13ea:	0002      	movs	r2, r0
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
    13ec:	2312      	movs	r3, #18
    13ee:	0029      	movs	r1, r5
    13f0:	0020      	movs	r0, r4
    13f2:	4c2c      	ldr	r4, [pc, #176]	; (14a4 <process_get_descriptor+0xdc>)
    13f4:	47a0      	blx	r4
    }
    // break; // unreachable

    default: return false;
  }
}
    13f6:	bd70      	pop	{r4, r5, r6, pc}
      if (!tud_descriptor_bos_cb) return false;
    13f8:	4b2b      	ldr	r3, [pc, #172]	; (14a8 <process_get_descriptor+0xe0>)
    13fa:	2b00      	cmp	r3, #0
    13fc:	d043      	beq.n	1486 <process_get_descriptor+0xbe>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
    13fe:	4798      	blx	r3
      TU_ASSERT(desc_bos);
    1400:	2800      	cmp	r0, #0
    1402:	d101      	bne.n	1408 <process_get_descriptor+0x40>
    1404:	2000      	movs	r0, #0
    1406:	e7f6      	b.n	13f6 <process_get_descriptor+0x2e>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
    1408:	7882      	ldrb	r2, [r0, #2]
    140a:	78c3      	ldrb	r3, [r0, #3]
    140c:	021b      	lsls	r3, r3, #8
    140e:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
    1410:	0002      	movs	r2, r0
    1412:	0029      	movs	r1, r5
    1414:	0020      	movs	r0, r4
    1416:	4c23      	ldr	r4, [pc, #140]	; (14a4 <process_get_descriptor+0xdc>)
    1418:	47a0      	blx	r4
    141a:	e7ec      	b.n	13f6 <process_get_descriptor+0x2e>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
    141c:	2a02      	cmp	r2, #2
    141e:	d007      	beq.n	1430 <process_get_descriptor+0x68>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    1420:	4b22      	ldr	r3, [pc, #136]	; (14ac <process_get_descriptor+0xe4>)
    1422:	2b00      	cmp	r3, #0
    1424:	d031      	beq.n	148a <process_get_descriptor+0xc2>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
    1426:	4798      	blx	r3
      TU_ASSERT(desc_config);
    1428:	2800      	cmp	r0, #0
    142a:	d104      	bne.n	1436 <process_get_descriptor+0x6e>
    142c:	2000      	movs	r0, #0
    142e:	e7e2      	b.n	13f6 <process_get_descriptor+0x2e>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
    1430:	4b1f      	ldr	r3, [pc, #124]	; (14b0 <process_get_descriptor+0xe8>)
    1432:	4798      	blx	r3
    1434:	e7f8      	b.n	1428 <process_get_descriptor+0x60>
    1436:	7882      	ldrb	r2, [r0, #2]
    1438:	78c3      	ldrb	r3, [r0, #3]
    143a:	021b      	lsls	r3, r3, #8
    143c:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
    143e:	0002      	movs	r2, r0
    1440:	0029      	movs	r1, r5
    1442:	0020      	movs	r0, r4
    1444:	4c17      	ldr	r4, [pc, #92]	; (14a4 <process_get_descriptor+0xdc>)
    1446:	47a0      	blx	r4
    1448:	e7d5      	b.n	13f6 <process_get_descriptor+0x2e>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
    144a:	792b      	ldrb	r3, [r5, #4]
    144c:	7969      	ldrb	r1, [r5, #5]
    144e:	0209      	lsls	r1, r1, #8
    1450:	4319      	orrs	r1, r3
    1452:	4b18      	ldr	r3, [pc, #96]	; (14b4 <process_get_descriptor+0xec>)
    1454:	4798      	blx	r3
      TU_VERIFY(desc_str);
    1456:	2800      	cmp	r0, #0
    1458:	d019      	beq.n	148e <process_get_descriptor+0xc6>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
    145a:	7803      	ldrb	r3, [r0, #0]
    145c:	0002      	movs	r2, r0
    145e:	0029      	movs	r1, r5
    1460:	0020      	movs	r0, r4
    1462:	4c10      	ldr	r4, [pc, #64]	; (14a4 <process_get_descriptor+0xdc>)
    1464:	47a0      	blx	r4
    1466:	e7c6      	b.n	13f6 <process_get_descriptor+0x2e>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    1468:	4b13      	ldr	r3, [pc, #76]	; (14b8 <process_get_descriptor+0xf0>)
    146a:	2b00      	cmp	r3, #0
    146c:	d011      	beq.n	1492 <process_get_descriptor+0xca>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
    146e:	4798      	blx	r3
      TU_VERIFY(desc_qualifier);
    1470:	2800      	cmp	r0, #0
    1472:	d010      	beq.n	1496 <process_get_descriptor+0xce>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
    1474:	7803      	ldrb	r3, [r0, #0]
    1476:	0002      	movs	r2, r0
    1478:	0029      	movs	r1, r5
    147a:	0020      	movs	r0, r4
    147c:	4c09      	ldr	r4, [pc, #36]	; (14a4 <process_get_descriptor+0xdc>)
    147e:	47a0      	blx	r4
    1480:	e7b9      	b.n	13f6 <process_get_descriptor+0x2e>
    default: return false;
    1482:	2000      	movs	r0, #0
    1484:	e7b7      	b.n	13f6 <process_get_descriptor+0x2e>
      if (!tud_descriptor_bos_cb) return false;
    1486:	2000      	movs	r0, #0
    1488:	e7b5      	b.n	13f6 <process_get_descriptor+0x2e>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    148a:	2000      	movs	r0, #0
    148c:	e7b3      	b.n	13f6 <process_get_descriptor+0x2e>
      TU_VERIFY(desc_str);
    148e:	2000      	movs	r0, #0
    1490:	e7b1      	b.n	13f6 <process_get_descriptor+0x2e>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    1492:	2000      	movs	r0, #0
    1494:	e7af      	b.n	13f6 <process_get_descriptor+0x2e>
      TU_VERIFY(desc_qualifier);
    1496:	2000      	movs	r0, #0
    1498:	e7ad      	b.n	13f6 <process_get_descriptor+0x2e>
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	000035f4 	.word	0x000035f4
    14a0:	00002f91 	.word	0x00002f91
    14a4:	00001fed 	.word	0x00001fed
	...
    14b0:	00002f99 	.word	0x00002f99
    14b4:	00002fa5 	.word	0x00002fa5
    14b8:	00000000 	.word	0x00000000

000014bc <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
    14bc:	b510      	push	{r4, lr}
  if (enabled)
    14be:	2800      	cmp	r0, #0
    14c0:	d104      	bne.n	14cc <usbd_int_set+0x10>
  {
    dcd_int_enable(_usbd_rhport);
  }else
  {
    dcd_int_disable(_usbd_rhport);
    14c2:	4b05      	ldr	r3, [pc, #20]	; (14d8 <usbd_int_set+0x1c>)
    14c4:	7818      	ldrb	r0, [r3, #0]
    14c6:	4b05      	ldr	r3, [pc, #20]	; (14dc <usbd_int_set+0x20>)
    14c8:	4798      	blx	r3
  }
}
    14ca:	bd10      	pop	{r4, pc}
    dcd_int_enable(_usbd_rhport);
    14cc:	4b02      	ldr	r3, [pc, #8]	; (14d8 <usbd_int_set+0x1c>)
    14ce:	7818      	ldrb	r0, [r3, #0]
    14d0:	4b03      	ldr	r3, [pc, #12]	; (14e0 <usbd_int_set+0x24>)
    14d2:	4798      	blx	r3
    14d4:	e7f9      	b.n	14ca <usbd_int_set+0xe>
    14d6:	46c0      	nop			; (mov r8, r8)
    14d8:	20000004 	.word	0x20000004
    14dc:	000022a1 	.word	0x000022a1
    14e0:	00002295 	.word	0x00002295

000014e4 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
    14e4:	4b02      	ldr	r3, [pc, #8]	; (14f0 <tud_mounted+0xc>)
    14e6:	7a58      	ldrb	r0, [r3, #9]
    14e8:	1e43      	subs	r3, r0, #1
    14ea:	4198      	sbcs	r0, r3
    14ec:	b2c0      	uxtb	r0, r0
}
    14ee:	4770      	bx	lr
    14f0:	200007e0 	.word	0x200007e0

000014f4 <tud_suspended>:
  return _usbd_dev.suspended;
    14f4:	4b02      	ldr	r3, [pc, #8]	; (1500 <tud_suspended+0xc>)
    14f6:	7a18      	ldrb	r0, [r3, #8]
    14f8:	0740      	lsls	r0, r0, #29
    14fa:	0fc0      	lsrs	r0, r0, #31
}
    14fc:	4770      	bx	lr
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	200007e0 	.word	0x200007e0

00001504 <tud_disconnect>:
{
    1504:	b510      	push	{r4, lr}
  TU_VERIFY(dcd_disconnect);
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <tud_disconnect+0x18>)
    1508:	2b00      	cmp	r3, #0
    150a:	d005      	beq.n	1518 <tud_disconnect+0x14>
  dcd_disconnect(_usbd_rhport);
    150c:	4b04      	ldr	r3, [pc, #16]	; (1520 <tud_disconnect+0x1c>)
    150e:	7818      	ldrb	r0, [r3, #0]
    1510:	4b02      	ldr	r3, [pc, #8]	; (151c <tud_disconnect+0x18>)
    1512:	4798      	blx	r3
  return true;
    1514:	2001      	movs	r0, #1
}
    1516:	bd10      	pop	{r4, pc}
  TU_VERIFY(dcd_disconnect);
    1518:	2000      	movs	r0, #0
    151a:	e7fc      	b.n	1516 <tud_disconnect+0x12>
    151c:	000022b5 	.word	0x000022b5
    1520:	20000004 	.word	0x20000004

00001524 <tud_connect>:
{
    1524:	b510      	push	{r4, lr}
  TU_VERIFY(dcd_connect);
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <tud_connect+0x18>)
    1528:	2b00      	cmp	r3, #0
    152a:	d005      	beq.n	1538 <tud_connect+0x14>
  dcd_connect(_usbd_rhport);
    152c:	4b04      	ldr	r3, [pc, #16]	; (1540 <tud_connect+0x1c>)
    152e:	7818      	ldrb	r0, [r3, #0]
    1530:	4b02      	ldr	r3, [pc, #8]	; (153c <tud_connect+0x18>)
    1532:	4798      	blx	r3
  return true;
    1534:	2001      	movs	r0, #1
}
    1536:	bd10      	pop	{r4, pc}
  TU_VERIFY(dcd_connect);
    1538:	2000      	movs	r0, #0
    153a:	e7fc      	b.n	1536 <tud_connect+0x12>
    153c:	000022c9 	.word	0x000022c9
    1540:	20000004 	.word	0x20000004

00001544 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
    1544:	4b03      	ldr	r3, [pc, #12]	; (1554 <tud_inited+0x10>)
    1546:	7818      	ldrb	r0, [r3, #0]
    1548:	38ff      	subs	r0, #255	; 0xff
    154a:	1e43      	subs	r3, r0, #1
    154c:	4198      	sbcs	r0, r3
    154e:	b2c0      	uxtb	r0, r0
}
    1550:	4770      	bx	lr
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	20000004 	.word	0x20000004

00001558 <tud_init>:
{
    1558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    155a:	0006      	movs	r6, r0
  if ( tud_inited() ) return true;
    155c:	4b24      	ldr	r3, [pc, #144]	; (15f0 <tud_init+0x98>)
    155e:	4798      	blx	r3
    1560:	1e05      	subs	r5, r0, #0
    1562:	d001      	beq.n	1568 <tud_init+0x10>
}
    1564:	0028      	movs	r0, r5
    1566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tu_varclr(&_usbd_dev);
    1568:	4f22      	ldr	r7, [pc, #136]	; (15f4 <tud_init+0x9c>)
    156a:	0038      	movs	r0, r7
    156c:	3008      	adds	r0, #8
    156e:	2233      	movs	r2, #51	; 0x33
    1570:	2100      	movs	r1, #0
    1572:	4b21      	ldr	r3, [pc, #132]	; (15f8 <tud_init+0xa0>)
    1574:	4798      	blx	r3
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
    1576:	4c21      	ldr	r4, [pc, #132]	; (15fc <tud_init+0xa4>)
    1578:	3404      	adds	r4, #4
    157a:	1d20      	adds	r0, r4, #4
    157c:	4b20      	ldr	r3, [pc, #128]	; (1600 <tud_init+0xa8>)
    157e:	4798      	blx	r3
  _usbd_q = osal_queue_create(&_usbd_qdef);
    1580:	63fc      	str	r4, [r7, #60]	; 0x3c
  if ( usbd_app_driver_get_cb )
    1582:	4b20      	ldr	r3, [pc, #128]	; (1604 <tud_init+0xac>)
    1584:	2b00      	cmp	r3, #0
    1586:	d003      	beq.n	1590 <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
    1588:	4c1a      	ldr	r4, [pc, #104]	; (15f4 <tud_init+0x9c>)
    158a:	1d20      	adds	r0, r4, #4
    158c:	4798      	blx	r3
    158e:	6020      	str	r0, [r4, #0]
  return NULL;
    1590:	2400      	movs	r4, #0
    1592:	e00e      	b.n	15b2 <tud_init+0x5a>
    drvid -= _app_driver_count;
    1594:	1ae3      	subs	r3, r4, r3
    1596:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1598:	2b00      	cmp	r3, #0
    159a:	d11d      	bne.n	15d8 <tud_init+0x80>
    159c:	005a      	lsls	r2, r3, #1
    159e:	18d3      	adds	r3, r2, r3
    15a0:	00da      	lsls	r2, r3, #3
    15a2:	4b19      	ldr	r3, [pc, #100]	; (1608 <tud_init+0xb0>)
    15a4:	189b      	adds	r3, r3, r2
    TU_ASSERT(driver);
    15a6:	2b00      	cmp	r3, #0
    15a8:	d0dc      	beq.n	1564 <tud_init+0xc>
    driver->init();
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    15ae:	3401      	adds	r4, #1
    15b0:	b2e4      	uxtb	r4, r4
    15b2:	4b10      	ldr	r3, [pc, #64]	; (15f4 <tud_init+0x9c>)
    15b4:	791b      	ldrb	r3, [r3, #4]
    15b6:	1c5a      	adds	r2, r3, #1
    15b8:	4294      	cmp	r4, r2
    15ba:	da0f      	bge.n	15dc <tud_init+0x84>
  if ( usbd_app_driver_get_cb )
    15bc:	4a11      	ldr	r2, [pc, #68]	; (1604 <tud_init+0xac>)
    15be:	2a00      	cmp	r2, #0
    15c0:	d008      	beq.n	15d4 <tud_init+0x7c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    15c2:	429c      	cmp	r4, r3
    15c4:	d2e6      	bcs.n	1594 <tud_init+0x3c>
    15c6:	0062      	lsls	r2, r4, #1
    15c8:	1912      	adds	r2, r2, r4
    15ca:	00d1      	lsls	r1, r2, #3
    15cc:	4b09      	ldr	r3, [pc, #36]	; (15f4 <tud_init+0x9c>)
    15ce:	681b      	ldr	r3, [r3, #0]
    15d0:	185b      	adds	r3, r3, r1
    15d2:	e7e8      	b.n	15a6 <tud_init+0x4e>
  if ( usbd_app_driver_get_cb )
    15d4:	0023      	movs	r3, r4
    15d6:	e7df      	b.n	1598 <tud_init+0x40>
  return NULL;
    15d8:	2300      	movs	r3, #0
    15da:	e7e4      	b.n	15a6 <tud_init+0x4e>
  _usbd_rhport = rhport;
    15dc:	4b07      	ldr	r3, [pc, #28]	; (15fc <tud_init+0xa4>)
    15de:	701e      	strb	r6, [r3, #0]
  dcd_init(rhport);
    15e0:	0030      	movs	r0, r6
    15e2:	4b0a      	ldr	r3, [pc, #40]	; (160c <tud_init+0xb4>)
    15e4:	4798      	blx	r3
  dcd_int_enable(rhport);
    15e6:	0030      	movs	r0, r6
    15e8:	4b09      	ldr	r3, [pc, #36]	; (1610 <tud_init+0xb8>)
    15ea:	4798      	blx	r3
  return true;
    15ec:	2501      	movs	r5, #1
    15ee:	e7b9      	b.n	1564 <tud_init+0xc>
    15f0:	00001545 	.word	0x00001545
    15f4:	200007e0 	.word	0x200007e0
    15f8:	00003261 	.word	0x00003261
    15fc:	20000004 	.word	0x20000004
    1600:	00001165 	.word	0x00001165
    1604:	00000000 	.word	0x00000000
    1608:	00003680 	.word	0x00003680
    160c:	000021f9 	.word	0x000021f9
    1610:	00002295 	.word	0x00002295

00001614 <dcd_event_handler>:
{
    1614:	b5f0      	push	{r4, r5, r6, r7, lr}
    1616:	b085      	sub	sp, #20
    1618:	0005      	movs	r5, r0
    161a:	000e      	movs	r6, r1
  switch (event->event_id)
    161c:	7843      	ldrb	r3, [r0, #1]
    161e:	2b03      	cmp	r3, #3
    1620:	d100      	bne.n	1624 <dcd_event_handler+0x10>
    1622:	e086      	b.n	1732 <dcd_event_handler+0x11e>
    1624:	d91c      	bls.n	1660 <dcd_event_handler+0x4c>
    1626:	2b04      	cmp	r3, #4
    1628:	d03d      	beq.n	16a6 <dcd_event_handler+0x92>
    162a:	2b05      	cmp	r3, #5
    162c:	d000      	beq.n	1630 <dcd_event_handler+0x1c>
    162e:	e0a6      	b.n	177e <dcd_event_handler+0x16a>
      if ( _usbd_dev.connected )
    1630:	4b5d      	ldr	r3, [pc, #372]	; (17a8 <dcd_event_handler+0x194>)
    1632:	7a1b      	ldrb	r3, [r3, #8]
    1634:	07db      	lsls	r3, r3, #31
    1636:	d400      	bmi.n	163a <dcd_event_handler+0x26>
    1638:	e0ab      	b.n	1792 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 0;
    163a:	4b5b      	ldr	r3, [pc, #364]	; (17a8 <dcd_event_handler+0x194>)
    163c:	7a1a      	ldrb	r2, [r3, #8]
    163e:	2104      	movs	r1, #4
    1640:	438a      	bics	r2, r1
    1642:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    1644:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
    1646:	2e00      	cmp	r6, #0
    1648:	d047      	beq.n	16da <dcd_event_handler+0xc6>
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
    164a:	1d20      	adds	r0, r4, #4
    164c:	0029      	movs	r1, r5
    164e:	4b57      	ldr	r3, [pc, #348]	; (17ac <dcd_event_handler+0x198>)
    1650:	4798      	blx	r3

  if (!in_isr) {
    1652:	2e00      	cmp	r6, #0
    1654:	d000      	beq.n	1658 <dcd_event_handler+0x44>
    1656:	e09c      	b.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    1658:	6823      	ldr	r3, [r4, #0]
    165a:	2001      	movs	r0, #1
    165c:	4798      	blx	r3
    165e:	e098      	b.n	1792 <dcd_event_handler+0x17e>
  switch (event->event_id)
    1660:	2b02      	cmp	r3, #2
    1662:	d000      	beq.n	1666 <dcd_event_handler+0x52>
    1664:	e08b      	b.n	177e <dcd_event_handler+0x16a>
      _usbd_dev.connected  = 0;
    1666:	4b50      	ldr	r3, [pc, #320]	; (17a8 <dcd_event_handler+0x194>)
    1668:	7a1a      	ldrb	r2, [r3, #8]
    166a:	2101      	movs	r1, #1
    166c:	438a      	bics	r2, r1
    166e:	721a      	strb	r2, [r3, #8]
      _usbd_dev.addressed  = 0;
    1670:	7a1a      	ldrb	r2, [r3, #8]
    1672:	3101      	adds	r1, #1
    1674:	438a      	bics	r2, r1
    1676:	721a      	strb	r2, [r3, #8]
      _usbd_dev.cfg_num    = 0;
    1678:	2200      	movs	r2, #0
    167a:	725a      	strb	r2, [r3, #9]
      _usbd_dev.suspended  = 0;
    167c:	7a1a      	ldrb	r2, [r3, #8]
    167e:	3102      	adds	r1, #2
    1680:	438a      	bics	r2, r1
    1682:	721a      	strb	r2, [r3, #8]
      osal_queue_send(_usbd_q, event, in_isr);
    1684:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    1686:	2e00      	cmp	r6, #0
    1688:	d009      	beq.n	169e <dcd_event_handler+0x8a>
  bool success = tu_fifo_write(&qhdl->ff, data);
    168a:	1d20      	adds	r0, r4, #4
    168c:	0029      	movs	r1, r5
    168e:	4b47      	ldr	r3, [pc, #284]	; (17ac <dcd_event_handler+0x198>)
    1690:	4798      	blx	r3
  if (!in_isr) {
    1692:	2e00      	cmp	r6, #0
    1694:	d17d      	bne.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    1696:	6823      	ldr	r3, [r4, #0]
    1698:	2001      	movs	r0, #1
    169a:	4798      	blx	r3
    169c:	e079      	b.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    169e:	2000      	movs	r0, #0
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	4798      	blx	r3
    16a4:	e7f1      	b.n	168a <dcd_event_handler+0x76>
      if ( _usbd_dev.connected )
    16a6:	4b40      	ldr	r3, [pc, #256]	; (17a8 <dcd_event_handler+0x194>)
    16a8:	7a1b      	ldrb	r3, [r3, #8]
    16aa:	07db      	lsls	r3, r3, #31
    16ac:	d571      	bpl.n	1792 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 1;
    16ae:	4b3e      	ldr	r3, [pc, #248]	; (17a8 <dcd_event_handler+0x194>)
    16b0:	7a1a      	ldrb	r2, [r3, #8]
    16b2:	2104      	movs	r1, #4
    16b4:	430a      	orrs	r2, r1
    16b6:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    16b8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    16ba:	2e00      	cmp	r6, #0
    16bc:	d009      	beq.n	16d2 <dcd_event_handler+0xbe>
  bool success = tu_fifo_write(&qhdl->ff, data);
    16be:	1d20      	adds	r0, r4, #4
    16c0:	0029      	movs	r1, r5
    16c2:	4b3a      	ldr	r3, [pc, #232]	; (17ac <dcd_event_handler+0x198>)
    16c4:	4798      	blx	r3
  if (!in_isr) {
    16c6:	2e00      	cmp	r6, #0
    16c8:	d163      	bne.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    16ca:	6823      	ldr	r3, [r4, #0]
    16cc:	2001      	movs	r0, #1
    16ce:	4798      	blx	r3
    16d0:	e05f      	b.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    16d2:	2000      	movs	r0, #0
    16d4:	6823      	ldr	r3, [r4, #0]
    16d6:	4798      	blx	r3
    16d8:	e7f1      	b.n	16be <dcd_event_handler+0xaa>
    16da:	2000      	movs	r0, #0
    16dc:	6823      	ldr	r3, [r4, #0]
    16de:	4798      	blx	r3
    16e0:	e7b3      	b.n	164a <dcd_event_handler+0x36>
    drvid -= _app_driver_count;
    16e2:	1ae3      	subs	r3, r4, r3
    16e4:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    16e6:	2b00      	cmp	r3, #0
    16e8:	d121      	bne.n	172e <dcd_event_handler+0x11a>
    16ea:	005a      	lsls	r2, r3, #1
    16ec:	18d3      	adds	r3, r2, r3
    16ee:	00da      	lsls	r2, r3, #3
    16f0:	4b2f      	ldr	r3, [pc, #188]	; (17b0 <dcd_event_handler+0x19c>)
    16f2:	189b      	adds	r3, r3, r2
        if (driver && driver->sof)
    16f4:	2b00      	cmp	r3, #0
    16f6:	d005      	beq.n	1704 <dcd_event_handler+0xf0>
    16f8:	695b      	ldr	r3, [r3, #20]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d002      	beq.n	1704 <dcd_event_handler+0xf0>
          driver->sof(event->rhport, event->sof.frame_count);
    16fe:	7828      	ldrb	r0, [r5, #0]
    1700:	6869      	ldr	r1, [r5, #4]
    1702:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    1704:	3401      	adds	r4, #1
    1706:	b2e4      	uxtb	r4, r4
    1708:	4b27      	ldr	r3, [pc, #156]	; (17a8 <dcd_event_handler+0x194>)
    170a:	791b      	ldrb	r3, [r3, #4]
    170c:	1c5a      	adds	r2, r3, #1
    170e:	4294      	cmp	r4, r2
    1710:	da11      	bge.n	1736 <dcd_event_handler+0x122>
  if ( usbd_app_driver_get_cb )
    1712:	4a28      	ldr	r2, [pc, #160]	; (17b4 <dcd_event_handler+0x1a0>)
    1714:	2a00      	cmp	r2, #0
    1716:	d008      	beq.n	172a <dcd_event_handler+0x116>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1718:	429c      	cmp	r4, r3
    171a:	d2e2      	bcs.n	16e2 <dcd_event_handler+0xce>
    171c:	0062      	lsls	r2, r4, #1
    171e:	1912      	adds	r2, r2, r4
    1720:	00d1      	lsls	r1, r2, #3
    1722:	4b21      	ldr	r3, [pc, #132]	; (17a8 <dcd_event_handler+0x194>)
    1724:	681b      	ldr	r3, [r3, #0]
    1726:	185b      	adds	r3, r3, r1
    1728:	e7e4      	b.n	16f4 <dcd_event_handler+0xe0>
  if ( usbd_app_driver_get_cb )
    172a:	0023      	movs	r3, r4
    172c:	e7db      	b.n	16e6 <dcd_event_handler+0xd2>
  return NULL;
    172e:	2300      	movs	r3, #0
    1730:	e7e0      	b.n	16f4 <dcd_event_handler+0xe0>
  switch (event->event_id)
    1732:	2400      	movs	r4, #0
    1734:	e7e8      	b.n	1708 <dcd_event_handler+0xf4>
      if ( _usbd_dev.suspended )
    1736:	4b1c      	ldr	r3, [pc, #112]	; (17a8 <dcd_event_handler+0x194>)
    1738:	7a1b      	ldrb	r3, [r3, #8]
    173a:	075b      	lsls	r3, r3, #29
    173c:	d529      	bpl.n	1792 <dcd_event_handler+0x17e>
        _usbd_dev.suspended = 0;
    173e:	4c1a      	ldr	r4, [pc, #104]	; (17a8 <dcd_event_handler+0x194>)
    1740:	7a23      	ldrb	r3, [r4, #8]
    1742:	2204      	movs	r2, #4
    1744:	4393      	bics	r3, r2
    1746:	7223      	strb	r3, [r4, #8]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
    1748:	af01      	add	r7, sp, #4
    174a:	3208      	adds	r2, #8
    174c:	2100      	movs	r1, #0
    174e:	0038      	movs	r0, r7
    1750:	4b19      	ldr	r3, [pc, #100]	; (17b8 <dcd_event_handler+0x1a4>)
    1752:	4798      	blx	r3
    1754:	782b      	ldrb	r3, [r5, #0]
    1756:	703b      	strb	r3, [r7, #0]
    1758:	2305      	movs	r3, #5
    175a:	707b      	strb	r3, [r7, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
    175c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
  if (!in_isr) {
    175e:	2e00      	cmp	r6, #0
    1760:	d009      	beq.n	1776 <dcd_event_handler+0x162>
  bool success = tu_fifo_write(&qhdl->ff, data);
    1762:	1d20      	adds	r0, r4, #4
    1764:	a901      	add	r1, sp, #4
    1766:	4b11      	ldr	r3, [pc, #68]	; (17ac <dcd_event_handler+0x198>)
    1768:	4798      	blx	r3
  if (!in_isr) {
    176a:	2e00      	cmp	r6, #0
    176c:	d111      	bne.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(true);
    176e:	6823      	ldr	r3, [r4, #0]
    1770:	2001      	movs	r0, #1
    1772:	4798      	blx	r3
    1774:	e00d      	b.n	1792 <dcd_event_handler+0x17e>
  qhdl->interrupt_set(false);
    1776:	2000      	movs	r0, #0
    1778:	6823      	ldr	r3, [r4, #0]
    177a:	4798      	blx	r3
    177c:	e7f1      	b.n	1762 <dcd_event_handler+0x14e>
      osal_queue_send(_usbd_q, event, in_isr);
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <dcd_event_handler+0x194>)
    1780:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    1782:	2e00      	cmp	r6, #0
    1784:	d007      	beq.n	1796 <dcd_event_handler+0x182>
  bool success = tu_fifo_write(&qhdl->ff, data);
    1786:	1d20      	adds	r0, r4, #4
    1788:	0029      	movs	r1, r5
    178a:	4b08      	ldr	r3, [pc, #32]	; (17ac <dcd_event_handler+0x198>)
    178c:	4798      	blx	r3
  if (!in_isr) {
    178e:	2e00      	cmp	r6, #0
    1790:	d005      	beq.n	179e <dcd_event_handler+0x18a>
}
    1792:	b005      	add	sp, #20
    1794:	bdf0      	pop	{r4, r5, r6, r7, pc}
  qhdl->interrupt_set(false);
    1796:	2000      	movs	r0, #0
    1798:	6823      	ldr	r3, [r4, #0]
    179a:	4798      	blx	r3
    179c:	e7f3      	b.n	1786 <dcd_event_handler+0x172>
  qhdl->interrupt_set(true);
    179e:	6823      	ldr	r3, [r4, #0]
    17a0:	2001      	movs	r0, #1
    17a2:	4798      	blx	r3
    17a4:	e7f5      	b.n	1792 <dcd_event_handler+0x17e>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	200007e0 	.word	0x200007e0
    17ac:	000010f5 	.word	0x000010f5
    17b0:	00003680 	.word	0x00003680
    17b4:	00000000 	.word	0x00000000
    17b8:	00003261 	.word	0x00003261

000017bc <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
    17bc:	b570      	push	{r4, r5, r6, lr}
    17be:	000c      	movs	r4, r1
  rhport = _usbd_rhport;
    17c0:	4b0a      	ldr	r3, [pc, #40]	; (17ec <usbd_edpt_open+0x30>)
    17c2:	781d      	ldrb	r5, [r3, #0]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
    17c4:	788a      	ldrb	r2, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    17c6:	237f      	movs	r3, #127	; 0x7f
    17c8:	4013      	ands	r3, r2
    17ca:	2b07      	cmp	r3, #7
    17cc:	d901      	bls.n	17d2 <usbd_edpt_open+0x16>
    17ce:	2000      	movs	r0, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
    17d0:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
    17d2:	4b07      	ldr	r3, [pc, #28]	; (17f0 <usbd_edpt_open+0x34>)
    17d4:	7a99      	ldrb	r1, [r3, #10]
    17d6:	0020      	movs	r0, r4
    17d8:	4b06      	ldr	r3, [pc, #24]	; (17f4 <usbd_edpt_open+0x38>)
    17da:	4798      	blx	r3
    17dc:	2800      	cmp	r0, #0
    17de:	d0f7      	beq.n	17d0 <usbd_edpt_open+0x14>
  return dcd_edpt_open(rhport, desc_ep);
    17e0:	0021      	movs	r1, r4
    17e2:	0028      	movs	r0, r5
    17e4:	4b04      	ldr	r3, [pc, #16]	; (17f8 <usbd_edpt_open+0x3c>)
    17e6:	4798      	blx	r3
    17e8:	e7f2      	b.n	17d0 <usbd_edpt_open+0x14>
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	20000004 	.word	0x20000004
    17f0:	200007e0 	.word	0x200007e0
    17f4:	00002ef5 	.word	0x00002ef5
    17f8:	00002321 	.word	0x00002321

000017fc <usbd_open_edpt_pair>:
{
    17fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    17fe:	46c6      	mov	lr, r8
    1800:	b500      	push	{lr}
    1802:	b082      	sub	sp, #8
    1804:	9001      	str	r0, [sp, #4]
    1806:	000c      	movs	r4, r1
    1808:	0016      	movs	r6, r2
    180a:	001d      	movs	r5, r3
    180c:	9b08      	ldr	r3, [sp, #32]
    180e:	4698      	mov	r8, r3
  for(int i=0; i<ep_count; i++)
    1810:	2700      	movs	r7, #0
    1812:	e004      	b.n	181e <usbd_open_edpt_pair+0x22>
      (*ep_in) = desc_ep->bEndpointAddress;
    1814:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1816:	7013      	strb	r3, [r2, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
    1818:	7823      	ldrb	r3, [r4, #0]
    181a:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
    181c:	3701      	adds	r7, #1
    181e:	42b7      	cmp	r7, r6
    1820:	da14      	bge.n	184c <usbd_open_edpt_pair+0x50>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
    1822:	7863      	ldrb	r3, [r4, #1]
    1824:	2b05      	cmp	r3, #5
    1826:	d116      	bne.n	1856 <usbd_open_edpt_pair+0x5a>
    1828:	78e3      	ldrb	r3, [r4, #3]
    182a:	079b      	lsls	r3, r3, #30
    182c:	0f9b      	lsrs	r3, r3, #30
    182e:	42ab      	cmp	r3, r5
    1830:	d113      	bne.n	185a <usbd_open_edpt_pair+0x5e>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
    1832:	0021      	movs	r1, r4
    1834:	9801      	ldr	r0, [sp, #4]
    1836:	4b0a      	ldr	r3, [pc, #40]	; (1860 <usbd_open_edpt_pair+0x64>)
    1838:	4798      	blx	r3
    183a:	2800      	cmp	r0, #0
    183c:	d007      	beq.n	184e <usbd_open_edpt_pair+0x52>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
    183e:	78a3      	ldrb	r3, [r4, #2]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1840:	b25a      	sxtb	r2, r3
    1842:	2a00      	cmp	r2, #0
    1844:	dbe6      	blt.n	1814 <usbd_open_edpt_pair+0x18>
      (*ep_out) = desc_ep->bEndpointAddress;
    1846:	4642      	mov	r2, r8
    1848:	7013      	strb	r3, [r2, #0]
    184a:	e7e5      	b.n	1818 <usbd_open_edpt_pair+0x1c>
  return true;
    184c:	2001      	movs	r0, #1
}
    184e:	b002      	add	sp, #8
    1850:	bc04      	pop	{r2}
    1852:	4690      	mov	r8, r2
    1854:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
    1856:	2000      	movs	r0, #0
    1858:	e7f9      	b.n	184e <usbd_open_edpt_pair+0x52>
    185a:	2000      	movs	r0, #0
    185c:	e7f7      	b.n	184e <usbd_open_edpt_pair+0x52>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	000017bd 	.word	0x000017bd

00001864 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
    1864:	b510      	push	{r4, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    1866:	207f      	movs	r0, #127	; 0x7f
    1868:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    186a:	09c9      	lsrs	r1, r1, #7
  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
  uint8_t const dir         = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
    186c:	0040      	lsls	r0, r0, #1
    186e:	1840      	adds	r0, r0, r1
    1870:	3020      	adds	r0, #32
    1872:	4904      	ldr	r1, [pc, #16]	; (1884 <usbd_edpt_claim+0x20>)
    1874:	3108      	adds	r1, #8
    1876:	1808      	adds	r0, r1, r0
    1878:	3003      	adds	r0, #3

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
    187a:	2100      	movs	r1, #0
    187c:	4b02      	ldr	r3, [pc, #8]	; (1888 <usbd_edpt_claim+0x24>)
    187e:	4798      	blx	r3
#endif
}
    1880:	bd10      	pop	{r4, pc}
    1882:	46c0      	nop			; (mov r8, r8)
    1884:	200007e0 	.word	0x200007e0
    1888:	00002ea9 	.word	0x00002ea9

0000188c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
    188c:	b510      	push	{r4, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    188e:	207f      	movs	r0, #127	; 0x7f
    1890:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1892:	09c9      	lsrs	r1, r1, #7
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
  uint8_t const dir         = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
    1894:	0040      	lsls	r0, r0, #1
    1896:	1840      	adds	r0, r0, r1
    1898:	3020      	adds	r0, #32
    189a:	4904      	ldr	r1, [pc, #16]	; (18ac <usbd_edpt_release+0x20>)
    189c:	3108      	adds	r1, #8
    189e:	1808      	adds	r0, r1, r0
    18a0:	3003      	adds	r0, #3

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
    18a2:	2100      	movs	r1, #0
    18a4:	4b02      	ldr	r3, [pc, #8]	; (18b0 <usbd_edpt_release+0x24>)
    18a6:	4798      	blx	r3
#endif
}
    18a8:	bd10      	pop	{r4, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	200007e0 	.word	0x200007e0
    18b0:	00002ecf 	.word	0x00002ecf

000018b4 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    18b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18b6:	46ce      	mov	lr, r9
    18b8:	4647      	mov	r7, r8
    18ba:	b580      	push	{r7, lr}
  rhport = _usbd_rhport;
    18bc:	4819      	ldr	r0, [pc, #100]	; (1924 <usbd_edpt_xfer+0x70>)
    18be:	7800      	ldrb	r0, [r0, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    18c0:	257f      	movs	r5, #127	; 0x7f
    18c2:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    18c4:	09ce      	lsrs	r6, r1, #7
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
    18c6:	006f      	lsls	r7, r5, #1
    18c8:	4c17      	ldr	r4, [pc, #92]	; (1928 <usbd_edpt_xfer+0x74>)
    18ca:	19e4      	adds	r4, r4, r7
    18cc:	19a4      	adds	r4, r4, r6
    18ce:	3428      	adds	r4, #40	; 0x28
    18d0:	78e4      	ldrb	r4, [r4, #3]
    18d2:	07e4      	lsls	r4, r4, #31
    18d4:	d504      	bpl.n	18e0 <usbd_edpt_xfer+0x2c>
    18d6:	2000      	movs	r0, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
    18d8:	bc0c      	pop	{r2, r3}
    18da:	4690      	mov	r8, r2
    18dc:	4699      	mov	r9, r3
    18de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
    18e0:	4c11      	ldr	r4, [pc, #68]	; (1928 <usbd_edpt_xfer+0x74>)
    18e2:	19e4      	adds	r4, r4, r7
    18e4:	19a4      	adds	r4, r4, r6
    18e6:	2728      	movs	r7, #40	; 0x28
    18e8:	46b9      	mov	r9, r7
    18ea:	44a1      	add	r9, r4
    18ec:	464c      	mov	r4, r9
    18ee:	78e4      	ldrb	r4, [r4, #3]
    18f0:	2701      	movs	r7, #1
    18f2:	46bc      	mov	ip, r7
    18f4:	4667      	mov	r7, ip
    18f6:	433c      	orrs	r4, r7
    18f8:	0027      	movs	r7, r4
    18fa:	464c      	mov	r4, r9
    18fc:	70e7      	strb	r7, [r4, #3]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
    18fe:	4c0b      	ldr	r4, [pc, #44]	; (192c <usbd_edpt_xfer+0x78>)
    1900:	47a0      	blx	r4
    1902:	2800      	cmp	r0, #0
    1904:	d1e8      	bne.n	18d8 <usbd_edpt_xfer+0x24>
    _usbd_dev.ep_status[epnum][dir].busy = false;
    1906:	006d      	lsls	r5, r5, #1
    1908:	4b07      	ldr	r3, [pc, #28]	; (1928 <usbd_edpt_xfer+0x74>)
    190a:	195d      	adds	r5, r3, r5
    190c:	19ae      	adds	r6, r5, r6
    190e:	3628      	adds	r6, #40	; 0x28
    1910:	78f3      	ldrb	r3, [r6, #3]
    1912:	2201      	movs	r2, #1
    1914:	4393      	bics	r3, r2
    1916:	70f3      	strb	r3, [r6, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    1918:	78f3      	ldrb	r3, [r6, #3]
    191a:	3203      	adds	r2, #3
    191c:	4393      	bics	r3, r2
    191e:	70f3      	strb	r3, [r6, #3]
    return false;
    1920:	e7da      	b.n	18d8 <usbd_edpt_xfer+0x24>
    1922:	46c0      	nop			; (mov r8, r8)
    1924:	20000004 	.word	0x20000004
    1928:	200007e0 	.word	0x200007e0
    192c:	000023f5 	.word	0x000023f5

00001930 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
    1930:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    1932:	4b0f      	ldr	r3, [pc, #60]	; (1970 <usbd_edpt_stall+0x40>)
    1934:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    1936:	247f      	movs	r4, #127	; 0x7f
    1938:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    193a:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
    193c:	0062      	lsls	r2, r4, #1
    193e:	4b0d      	ldr	r3, [pc, #52]	; (1974 <usbd_edpt_stall+0x44>)
    1940:	189b      	adds	r3, r3, r2
    1942:	195b      	adds	r3, r3, r5
    1944:	3328      	adds	r3, #40	; 0x28
    1946:	78db      	ldrb	r3, [r3, #3]
    1948:	079b      	lsls	r3, r3, #30
    194a:	d500      	bpl.n	194e <usbd_edpt_stall+0x1e>
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    _usbd_dev.ep_status[epnum][dir].busy = true;
  }
}
    194c:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_stall(rhport, ep_addr);
    194e:	4b0a      	ldr	r3, [pc, #40]	; (1978 <usbd_edpt_stall+0x48>)
    1950:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    1952:	0063      	lsls	r3, r4, #1
    1954:	4c07      	ldr	r4, [pc, #28]	; (1974 <usbd_edpt_stall+0x44>)
    1956:	18e4      	adds	r4, r4, r3
    1958:	1964      	adds	r4, r4, r5
    195a:	3428      	adds	r4, #40	; 0x28
    195c:	78e3      	ldrb	r3, [r4, #3]
    195e:	2202      	movs	r2, #2
    1960:	4313      	orrs	r3, r2
    1962:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
    1964:	78e3      	ldrb	r3, [r4, #3]
    1966:	2201      	movs	r2, #1
    1968:	4313      	orrs	r3, r2
    196a:	70e3      	strb	r3, [r4, #3]
}
    196c:	e7ee      	b.n	194c <usbd_edpt_stall+0x1c>
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	20000004 	.word	0x20000004
    1974:	200007e0 	.word	0x200007e0
    1978:	000024d1 	.word	0x000024d1

0000197c <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
    197c:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    197e:	4b0f      	ldr	r3, [pc, #60]	; (19bc <usbd_edpt_clear_stall+0x40>)
    1980:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    1982:	247f      	movs	r4, #127	; 0x7f
    1984:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1986:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
    1988:	0062      	lsls	r2, r4, #1
    198a:	4b0d      	ldr	r3, [pc, #52]	; (19c0 <usbd_edpt_clear_stall+0x44>)
    198c:	189b      	adds	r3, r3, r2
    198e:	195b      	adds	r3, r3, r5
    1990:	3328      	adds	r3, #40	; 0x28
    1992:	78db      	ldrb	r3, [r3, #3]
    1994:	079b      	lsls	r3, r3, #30
    1996:	d400      	bmi.n	199a <usbd_edpt_clear_stall+0x1e>
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    _usbd_dev.ep_status[epnum][dir].busy = false;
  }
}
    1998:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_clear_stall(rhport, ep_addr);
    199a:	4b0a      	ldr	r3, [pc, #40]	; (19c4 <usbd_edpt_clear_stall+0x48>)
    199c:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    199e:	0063      	lsls	r3, r4, #1
    19a0:	4c07      	ldr	r4, [pc, #28]	; (19c0 <usbd_edpt_clear_stall+0x44>)
    19a2:	18e4      	adds	r4, r4, r3
    19a4:	1964      	adds	r4, r4, r5
    19a6:	3428      	adds	r4, #40	; 0x28
    19a8:	78e3      	ldrb	r3, [r4, #3]
    19aa:	2202      	movs	r2, #2
    19ac:	4393      	bics	r3, r2
    19ae:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
    19b0:	78e3      	ldrb	r3, [r4, #3]
    19b2:	3a01      	subs	r2, #1
    19b4:	4393      	bics	r3, r2
    19b6:	70e3      	strb	r3, [r4, #3]
}
    19b8:	e7ee      	b.n	1998 <usbd_edpt_clear_stall+0x1c>
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000004 	.word	0x20000004
    19c0:	200007e0 	.word	0x200007e0
    19c4:	000024f5 	.word	0x000024f5

000019c8 <usbd_edpt_stalled>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    19c8:	237f      	movs	r3, #127	; 0x7f
    19ca:	400b      	ands	r3, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    19cc:	09ca      	lsrs	r2, r1, #7
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
    19ce:	005b      	lsls	r3, r3, #1
    19d0:	4903      	ldr	r1, [pc, #12]	; (19e0 <usbd_edpt_stalled+0x18>)
    19d2:	18c9      	adds	r1, r1, r3
    19d4:	1889      	adds	r1, r1, r2
    19d6:	3128      	adds	r1, #40	; 0x28
    19d8:	78c8      	ldrb	r0, [r1, #3]
    19da:	0780      	lsls	r0, r0, #30
    19dc:	0fc0      	lsrs	r0, r0, #31
}
    19de:	4770      	bx	lr
    19e0:	200007e0 	.word	0x200007e0

000019e4 <process_control_request>:
{
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e6:	46c6      	mov	lr, r8
    19e8:	b500      	push	{lr}
    19ea:	b082      	sub	sp, #8
    19ec:	0004      	movs	r4, r0
    19ee:	000d      	movs	r5, r1
  usbd_control_set_complete_callback(NULL);
    19f0:	2000      	movs	r0, #0
    19f2:	4bc9      	ldr	r3, [pc, #804]	; (1d18 <process_control_request+0x334>)
    19f4:	4798      	blx	r3
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    19f6:	782b      	ldrb	r3, [r5, #0]
    19f8:	065b      	lsls	r3, r3, #25
    19fa:	0f9b      	lsrs	r3, r3, #30
    19fc:	2b02      	cmp	r3, #2
    19fe:	dd00      	ble.n	1a02 <process_control_request+0x1e>
    1a00:	e1b4      	b.n	1d6c <process_control_request+0x388>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
    1a02:	782b      	ldrb	r3, [r5, #0]
    1a04:	2260      	movs	r2, #96	; 0x60
    1a06:	401a      	ands	r2, r3
    1a08:	2a40      	cmp	r2, #64	; 0x40
    1a0a:	d00c      	beq.n	1a26 <process_control_request+0x42>
  switch ( p_request->bmRequestType_bit.recipient )
    1a0c:	782b      	ldrb	r3, [r5, #0]
    1a0e:	06db      	lsls	r3, r3, #27
    1a10:	0edb      	lsrs	r3, r3, #27
    1a12:	2b01      	cmp	r3, #1
    1a14:	d100      	bne.n	1a18 <process_control_request+0x34>
    1a16:	e0cc      	b.n	1bb2 <process_control_request+0x1ce>
    1a18:	2b00      	cmp	r3, #0
    1a1a:	d011      	beq.n	1a40 <process_control_request+0x5c>
    1a1c:	2b02      	cmp	r3, #2
    1a1e:	d100      	bne.n	1a22 <process_control_request+0x3e>
    1a20:	e112      	b.n	1c48 <process_control_request+0x264>
    default: TU_BREAKPOINT(); return false;
    1a22:	2000      	movs	r0, #0
    1a24:	e1a3      	b.n	1d6e <process_control_request+0x38a>
    TU_VERIFY(tud_vendor_control_xfer_cb);
    1a26:	4bbd      	ldr	r3, [pc, #756]	; (1d1c <process_control_request+0x338>)
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d100      	bne.n	1a2e <process_control_request+0x4a>
    1a2c:	e1a3      	b.n	1d76 <process_control_request+0x392>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
    1a2e:	001e      	movs	r6, r3
    1a30:	0018      	movs	r0, r3
    1a32:	4bb9      	ldr	r3, [pc, #740]	; (1d18 <process_control_request+0x334>)
    1a34:	4798      	blx	r3
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
    1a36:	002a      	movs	r2, r5
    1a38:	2101      	movs	r1, #1
    1a3a:	0020      	movs	r0, r4
    1a3c:	47b0      	blx	r6
    1a3e:	e196      	b.n	1d6e <process_control_request+0x38a>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
    1a40:	2a20      	cmp	r2, #32
    1a42:	d00a      	beq.n	1a5a <process_control_request+0x76>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    1a44:	2a00      	cmp	r2, #0
    1a46:	d000      	beq.n	1a4a <process_control_request+0x66>
    1a48:	e19b      	b.n	1d82 <process_control_request+0x39e>
      switch ( p_request->bRequest )
    1a4a:	786b      	ldrb	r3, [r5, #1]
    1a4c:	2b09      	cmp	r3, #9
    1a4e:	d900      	bls.n	1a52 <process_control_request+0x6e>
    1a50:	e199      	b.n	1d86 <process_control_request+0x3a2>
    1a52:	009b      	lsls	r3, r3, #2
    1a54:	4ab2      	ldr	r2, [pc, #712]	; (1d20 <process_control_request+0x33c>)
    1a56:	58d3      	ldr	r3, [r2, r3]
    1a58:	469f      	mov	pc, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    1a5a:	792b      	ldrb	r3, [r5, #4]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    1a5c:	2b0f      	cmp	r3, #15
    1a5e:	d900      	bls.n	1a62 <process_control_request+0x7e>
    1a60:	e18b      	b.n	1d7a <process_control_request+0x396>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    1a62:	4ab0      	ldr	r2, [pc, #704]	; (1d24 <process_control_request+0x340>)
    1a64:	18d3      	adds	r3, r2, r3
    1a66:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    1a68:	4aaf      	ldr	r2, [pc, #700]	; (1d28 <process_control_request+0x344>)
    1a6a:	2a00      	cmp	r2, #0
    1a6c:	d013      	beq.n	1a96 <process_control_request+0xb2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1a6e:	4aad      	ldr	r2, [pc, #692]	; (1d24 <process_control_request+0x340>)
    1a70:	7912      	ldrb	r2, [r2, #4]
    1a72:	429a      	cmp	r2, r3
    1a74:	d90d      	bls.n	1a92 <process_control_request+0xae>
    1a76:	005a      	lsls	r2, r3, #1
    1a78:	18d3      	adds	r3, r2, r3
    1a7a:	00da      	lsls	r2, r3, #3
    1a7c:	4ba9      	ldr	r3, [pc, #676]	; (1d24 <process_control_request+0x340>)
    1a7e:	6819      	ldr	r1, [r3, #0]
    1a80:	1889      	adds	r1, r1, r2
        TU_VERIFY(driver);
    1a82:	2900      	cmp	r1, #0
    1a84:	d100      	bne.n	1a88 <process_control_request+0xa4>
    1a86:	e17a      	b.n	1d7e <process_control_request+0x39a>
        return invoke_class_control(rhport, driver, p_request);
    1a88:	002a      	movs	r2, r5
    1a8a:	0020      	movs	r0, r4
    1a8c:	4ba7      	ldr	r3, [pc, #668]	; (1d2c <process_control_request+0x348>)
    1a8e:	4798      	blx	r3
    1a90:	e16d      	b.n	1d6e <process_control_request+0x38a>
    drvid -= _app_driver_count;
    1a92:	1a9b      	subs	r3, r3, r2
    1a94:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1a96:	2b00      	cmp	r3, #0
    1a98:	d105      	bne.n	1aa6 <process_control_request+0xc2>
    1a9a:	005a      	lsls	r2, r3, #1
    1a9c:	18d3      	adds	r3, r2, r3
    1a9e:	00da      	lsls	r2, r3, #3
    1aa0:	49a3      	ldr	r1, [pc, #652]	; (1d30 <process_control_request+0x34c>)
    1aa2:	1889      	adds	r1, r1, r2
    1aa4:	e7ed      	b.n	1a82 <process_control_request+0x9e>
  return NULL;
    1aa6:	2100      	movs	r1, #0
    1aa8:	e7eb      	b.n	1a82 <process_control_request+0x9e>
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
    1aaa:	0028      	movs	r0, r5
    1aac:	4ba1      	ldr	r3, [pc, #644]	; (1d34 <process_control_request+0x350>)
    1aae:	4798      	blx	r3
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
    1ab0:	78a9      	ldrb	r1, [r5, #2]
    1ab2:	0020      	movs	r0, r4
    1ab4:	4ba0      	ldr	r3, [pc, #640]	; (1d38 <process_control_request+0x354>)
    1ab6:	4798      	blx	r3
          _usbd_dev.addressed = 1;
    1ab8:	4a9a      	ldr	r2, [pc, #616]	; (1d24 <process_control_request+0x340>)
    1aba:	7a13      	ldrb	r3, [r2, #8]
    1abc:	2102      	movs	r1, #2
    1abe:	430b      	orrs	r3, r1
    1ac0:	7213      	strb	r3, [r2, #8]
  return true;
    1ac2:	2001      	movs	r0, #1
        break;
    1ac4:	e153      	b.n	1d6e <process_control_request+0x38a>
          uint8_t cfg_num = _usbd_dev.cfg_num;
    1ac6:	4b97      	ldr	r3, [pc, #604]	; (1d24 <process_control_request+0x340>)
    1ac8:	7a5b      	ldrb	r3, [r3, #9]
    1aca:	466a      	mov	r2, sp
    1acc:	3206      	adds	r2, #6
    1ace:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
    1ad0:	2301      	movs	r3, #1
    1ad2:	0029      	movs	r1, r5
    1ad4:	0020      	movs	r0, r4
    1ad6:	4c99      	ldr	r4, [pc, #612]	; (1d3c <process_control_request+0x358>)
    1ad8:	47a0      	blx	r4
  return true;
    1ada:	2001      	movs	r0, #1
        break;
    1adc:	e147      	b.n	1d6e <process_control_request+0x38a>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
    1ade:	78ae      	ldrb	r6, [r5, #2]
          if (_usbd_dev.cfg_num != cfg_num)
    1ae0:	4b90      	ldr	r3, [pc, #576]	; (1d24 <process_control_request+0x340>)
    1ae2:	7a5b      	ldrb	r3, [r3, #9]
    1ae4:	b2db      	uxtb	r3, r3
    1ae6:	429e      	cmp	r6, r3
    1ae8:	d005      	beq.n	1af6 <process_control_request+0x112>
            if ( _usbd_dev.cfg_num )
    1aea:	4b8e      	ldr	r3, [pc, #568]	; (1d24 <process_control_request+0x340>)
    1aec:	7a5b      	ldrb	r3, [r3, #9]
    1aee:	2b00      	cmp	r3, #0
    1af0:	d109      	bne.n	1b06 <process_control_request+0x122>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    1af2:	2e00      	cmp	r6, #0
    1af4:	d113      	bne.n	1b1e <process_control_request+0x13a>
          _usbd_dev.cfg_num = cfg_num;
    1af6:	4b8b      	ldr	r3, [pc, #556]	; (1d24 <process_control_request+0x340>)
    1af8:	725e      	strb	r6, [r3, #9]
          tud_control_status(rhport, p_request);
    1afa:	0029      	movs	r1, r5
    1afc:	0020      	movs	r0, r4
    1afe:	4b90      	ldr	r3, [pc, #576]	; (1d40 <process_control_request+0x35c>)
    1b00:	4798      	blx	r3
  return true;
    1b02:	2001      	movs	r0, #1
        break;
    1b04:	e133      	b.n	1d6e <process_control_request+0x38a>
              dcd_edpt_close_all(rhport);
    1b06:	0020      	movs	r0, r4
    1b08:	4b8e      	ldr	r3, [pc, #568]	; (1d44 <process_control_request+0x360>)
    1b0a:	4798      	blx	r3
              uint8_t const speed = _usbd_dev.speed;
    1b0c:	4f85      	ldr	r7, [pc, #532]	; (1d24 <process_control_request+0x340>)
    1b0e:	7abb      	ldrb	r3, [r7, #10]
    1b10:	4698      	mov	r8, r3
              configuration_reset(rhport);
    1b12:	0020      	movs	r0, r4
    1b14:	4b8c      	ldr	r3, [pc, #560]	; (1d48 <process_control_request+0x364>)
    1b16:	4798      	blx	r3
              _usbd_dev.speed = speed; // restore speed
    1b18:	4643      	mov	r3, r8
    1b1a:	72bb      	strb	r3, [r7, #10]
    1b1c:	e7e9      	b.n	1af2 <process_control_request+0x10e>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    1b1e:	0031      	movs	r1, r6
    1b20:	0020      	movs	r0, r4
    1b22:	4b8a      	ldr	r3, [pc, #552]	; (1d4c <process_control_request+0x368>)
    1b24:	4798      	blx	r3
    1b26:	2800      	cmp	r0, #0
    1b28:	d100      	bne.n	1b2c <process_control_request+0x148>
    1b2a:	e120      	b.n	1d6e <process_control_request+0x38a>
    1b2c:	e7e3      	b.n	1af6 <process_control_request+0x112>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
    1b2e:	0029      	movs	r1, r5
    1b30:	0020      	movs	r0, r4
    1b32:	4b87      	ldr	r3, [pc, #540]	; (1d50 <process_control_request+0x36c>)
    1b34:	4798      	blx	r3
    1b36:	e11a      	b.n	1d6e <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    1b38:	78aa      	ldrb	r2, [r5, #2]
    1b3a:	78eb      	ldrb	r3, [r5, #3]
    1b3c:	021b      	lsls	r3, r3, #8
    1b3e:	4313      	orrs	r3, r2
    1b40:	2b01      	cmp	r3, #1
    1b42:	d001      	beq.n	1b48 <process_control_request+0x164>
    1b44:	2000      	movs	r0, #0
    1b46:	e112      	b.n	1d6e <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = true;
    1b48:	4a76      	ldr	r2, [pc, #472]	; (1d24 <process_control_request+0x340>)
    1b4a:	7a11      	ldrb	r1, [r2, #8]
    1b4c:	3307      	adds	r3, #7
    1b4e:	430b      	orrs	r3, r1
    1b50:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    1b52:	0029      	movs	r1, r5
    1b54:	0020      	movs	r0, r4
    1b56:	4b7a      	ldr	r3, [pc, #488]	; (1d40 <process_control_request+0x35c>)
    1b58:	4798      	blx	r3
  return true;
    1b5a:	2001      	movs	r0, #1
        break;
    1b5c:	e107      	b.n	1d6e <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    1b5e:	78aa      	ldrb	r2, [r5, #2]
    1b60:	78eb      	ldrb	r3, [r5, #3]
    1b62:	021b      	lsls	r3, r3, #8
    1b64:	4313      	orrs	r3, r2
    1b66:	2b01      	cmp	r3, #1
    1b68:	d001      	beq.n	1b6e <process_control_request+0x18a>
    1b6a:	2000      	movs	r0, #0
    1b6c:	e0ff      	b.n	1d6e <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = false;
    1b6e:	4a6d      	ldr	r2, [pc, #436]	; (1d24 <process_control_request+0x340>)
    1b70:	7a13      	ldrb	r3, [r2, #8]
    1b72:	2108      	movs	r1, #8
    1b74:	438b      	bics	r3, r1
    1b76:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    1b78:	0029      	movs	r1, r5
    1b7a:	0020      	movs	r0, r4
    1b7c:	4b70      	ldr	r3, [pc, #448]	; (1d40 <process_control_request+0x35c>)
    1b7e:	4798      	blx	r3
  return true;
    1b80:	2001      	movs	r0, #1
        break;
    1b82:	e0f4      	b.n	1d6e <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    1b84:	4b67      	ldr	r3, [pc, #412]	; (1d24 <process_control_request+0x340>)
    1b86:	7a1a      	ldrb	r2, [r3, #8]
    1b88:	0693      	lsls	r3, r2, #26
    1b8a:	d50e      	bpl.n	1baa <process_control_request+0x1c6>
    1b8c:	2301      	movs	r3, #1
    1b8e:	0712      	lsls	r2, r2, #28
    1b90:	d40d      	bmi.n	1bae <process_control_request+0x1ca>
    1b92:	2200      	movs	r2, #0
    1b94:	4313      	orrs	r3, r2
    1b96:	466a      	mov	r2, sp
    1b98:	3206      	adds	r2, #6
    1b9a:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
    1b9c:	2302      	movs	r3, #2
    1b9e:	0029      	movs	r1, r5
    1ba0:	0020      	movs	r0, r4
    1ba2:	4c66      	ldr	r4, [pc, #408]	; (1d3c <process_control_request+0x358>)
    1ba4:	47a0      	blx	r4
  return true;
    1ba6:	2001      	movs	r0, #1
        break;
    1ba8:	e0e1      	b.n	1d6e <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    1baa:	2300      	movs	r3, #0
    1bac:	e7ef      	b.n	1b8e <process_control_request+0x1aa>
    1bae:	2202      	movs	r2, #2
    1bb0:	e7f0      	b.n	1b94 <process_control_request+0x1b0>
    1bb2:	792b      	ldrb	r3, [r5, #4]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    1bb4:	2b0f      	cmp	r3, #15
    1bb6:	d900      	bls.n	1bba <process_control_request+0x1d6>
    1bb8:	e0e7      	b.n	1d8a <process_control_request+0x3a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    1bba:	4a5a      	ldr	r2, [pc, #360]	; (1d24 <process_control_request+0x340>)
    1bbc:	18d3      	adds	r3, r2, r3
    1bbe:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    1bc0:	4a59      	ldr	r2, [pc, #356]	; (1d28 <process_control_request+0x344>)
    1bc2:	2a00      	cmp	r2, #0
    1bc4:	d02b      	beq.n	1c1e <process_control_request+0x23a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1bc6:	4a57      	ldr	r2, [pc, #348]	; (1d24 <process_control_request+0x340>)
    1bc8:	7912      	ldrb	r2, [r2, #4]
    1bca:	4293      	cmp	r3, r2
    1bcc:	d225      	bcs.n	1c1a <process_control_request+0x236>
    1bce:	005a      	lsls	r2, r3, #1
    1bd0:	18d3      	adds	r3, r2, r3
    1bd2:	00da      	lsls	r2, r3, #3
    1bd4:	4b53      	ldr	r3, [pc, #332]	; (1d24 <process_control_request+0x340>)
    1bd6:	6819      	ldr	r1, [r3, #0]
    1bd8:	1889      	adds	r1, r1, r2
      TU_VERIFY(driver);
    1bda:	2900      	cmp	r1, #0
    1bdc:	d100      	bne.n	1be0 <process_control_request+0x1fc>
    1bde:	e0d6      	b.n	1d8e <process_control_request+0x3aa>
      if ( !invoke_class_control(rhport, driver, p_request) )
    1be0:	002a      	movs	r2, r5
    1be2:	0020      	movs	r0, r4
    1be4:	4b51      	ldr	r3, [pc, #324]	; (1d2c <process_control_request+0x348>)
    1be6:	4798      	blx	r3
    1be8:	2800      	cmp	r0, #0
    1bea:	d000      	beq.n	1bee <process_control_request+0x20a>
    1bec:	e0bf      	b.n	1d6e <process_control_request+0x38a>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
    1bee:	782b      	ldrb	r3, [r5, #0]
    1bf0:	2260      	movs	r2, #96	; 0x60
    1bf2:	421a      	tst	r2, r3
    1bf4:	d000      	beq.n	1bf8 <process_control_request+0x214>
    1bf6:	e0ba      	b.n	1d6e <process_control_request+0x38a>
        switch(p_request->bRequest)
    1bf8:	786b      	ldrb	r3, [r5, #1]
    1bfa:	3b0a      	subs	r3, #10
    1bfc:	b2db      	uxtb	r3, r3
    1bfe:	2b01      	cmp	r3, #1
    1c00:	d900      	bls.n	1c04 <process_control_request+0x220>
    1c02:	e0b4      	b.n	1d6e <process_control_request+0x38a>
            usbd_control_set_complete_callback(NULL);
    1c04:	4b44      	ldr	r3, [pc, #272]	; (1d18 <process_control_request+0x334>)
    1c06:	4798      	blx	r3
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
    1c08:	786b      	ldrb	r3, [r5, #1]
    1c0a:	2b0a      	cmp	r3, #10
    1c0c:	d011      	beq.n	1c32 <process_control_request+0x24e>
              tud_control_status(rhport, p_request);
    1c0e:	0029      	movs	r1, r5
    1c10:	0020      	movs	r0, r4
    1c12:	4b4b      	ldr	r3, [pc, #300]	; (1d40 <process_control_request+0x35c>)
    1c14:	4798      	blx	r3
  return true;
    1c16:	2001      	movs	r0, #1
    1c18:	e0a9      	b.n	1d6e <process_control_request+0x38a>
    drvid -= _app_driver_count;
    1c1a:	1a9b      	subs	r3, r3, r2
    1c1c:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d105      	bne.n	1c2e <process_control_request+0x24a>
    1c22:	005a      	lsls	r2, r3, #1
    1c24:	18d3      	adds	r3, r2, r3
    1c26:	00da      	lsls	r2, r3, #3
    1c28:	4941      	ldr	r1, [pc, #260]	; (1d30 <process_control_request+0x34c>)
    1c2a:	1889      	adds	r1, r1, r2
    1c2c:	e7d5      	b.n	1bda <process_control_request+0x1f6>
  return NULL;
    1c2e:	2100      	movs	r1, #0
    1c30:	e7d3      	b.n	1bda <process_control_request+0x1f6>
              uint8_t alternate = 0;
    1c32:	466b      	mov	r3, sp
    1c34:	1d9a      	adds	r2, r3, #6
    1c36:	2300      	movs	r3, #0
    1c38:	7013      	strb	r3, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
    1c3a:	3301      	adds	r3, #1
    1c3c:	0029      	movs	r1, r5
    1c3e:	0020      	movs	r0, r4
    1c40:	4c3e      	ldr	r4, [pc, #248]	; (1d3c <process_control_request+0x358>)
    1c42:	47a0      	blx	r4
  return true;
    1c44:	2001      	movs	r0, #1
    1c46:	e092      	b.n	1d6e <process_control_request+0x38a>
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
    1c48:	7929      	ldrb	r1, [r5, #4]
    1c4a:	796b      	ldrb	r3, [r5, #5]
    1c4c:	021b      	lsls	r3, r3, #8
    1c4e:	430b      	orrs	r3, r1
    1c50:	b2d9      	uxtb	r1, r3
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    1c52:	207f      	movs	r0, #127	; 0x7f
    1c54:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1c56:	09cb      	lsrs	r3, r1, #7
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    1c58:	2807      	cmp	r0, #7
    1c5a:	d900      	bls.n	1c5e <process_control_request+0x27a>
    1c5c:	e099      	b.n	1d92 <process_control_request+0x3ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
    1c5e:	0040      	lsls	r0, r0, #1
    1c60:	4e30      	ldr	r6, [pc, #192]	; (1d24 <process_control_request+0x340>)
    1c62:	1830      	adds	r0, r6, r0
    1c64:	18c3      	adds	r3, r0, r3
    1c66:	7edb      	ldrb	r3, [r3, #27]
  if ( usbd_app_driver_get_cb )
    1c68:	482f      	ldr	r0, [pc, #188]	; (1d28 <process_control_request+0x344>)
    1c6a:	2800      	cmp	r0, #0
    1c6c:	d014      	beq.n	1c98 <process_control_request+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1c6e:	7930      	ldrb	r0, [r6, #4]
    1c70:	4283      	cmp	r3, r0
    1c72:	d20f      	bcs.n	1c94 <process_control_request+0x2b0>
    1c74:	0058      	lsls	r0, r3, #1
    1c76:	18c3      	adds	r3, r0, r3
    1c78:	00d8      	lsls	r0, r3, #3
    1c7a:	6836      	ldr	r6, [r6, #0]
    1c7c:	1836      	adds	r6, r6, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    1c7e:	2a00      	cmp	r2, #0
    1c80:	d014      	beq.n	1cac <process_control_request+0x2c8>
        TU_VERIFY(driver);
    1c82:	2e00      	cmp	r6, #0
    1c84:	d100      	bne.n	1c88 <process_control_request+0x2a4>
    1c86:	e086      	b.n	1d96 <process_control_request+0x3b2>
        return invoke_class_control(rhport, driver, p_request);
    1c88:	002a      	movs	r2, r5
    1c8a:	0031      	movs	r1, r6
    1c8c:	0020      	movs	r0, r4
    1c8e:	4b27      	ldr	r3, [pc, #156]	; (1d2c <process_control_request+0x348>)
    1c90:	4798      	blx	r3
    1c92:	e06c      	b.n	1d6e <process_control_request+0x38a>
    drvid -= _app_driver_count;
    1c94:	1a1b      	subs	r3, r3, r0
    1c96:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1c98:	2b00      	cmp	r3, #0
    1c9a:	d105      	bne.n	1ca8 <process_control_request+0x2c4>
    1c9c:	0058      	lsls	r0, r3, #1
    1c9e:	18c3      	adds	r3, r0, r3
    1ca0:	00d8      	lsls	r0, r3, #3
    1ca2:	4e23      	ldr	r6, [pc, #140]	; (1d30 <process_control_request+0x34c>)
    1ca4:	1836      	adds	r6, r6, r0
    1ca6:	e7ea      	b.n	1c7e <process_control_request+0x29a>
  return NULL;
    1ca8:	2600      	movs	r6, #0
    1caa:	e7e8      	b.n	1c7e <process_control_request+0x29a>
        switch ( p_request->bRequest )
    1cac:	786b      	ldrb	r3, [r5, #1]
    1cae:	2b01      	cmp	r3, #1
    1cb0:	d012      	beq.n	1cd8 <process_control_request+0x2f4>
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d003      	beq.n	1cbe <process_control_request+0x2da>
    1cb6:	2b03      	cmp	r3, #3
    1cb8:	d00e      	beq.n	1cd8 <process_control_request+0x2f4>
          default: TU_BREAKPOINT(); return false;
    1cba:	2000      	movs	r0, #0
    1cbc:	e057      	b.n	1d6e <process_control_request+0x38a>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
    1cbe:	0020      	movs	r0, r4
    1cc0:	4b24      	ldr	r3, [pc, #144]	; (1d54 <process_control_request+0x370>)
    1cc2:	4798      	blx	r3
    1cc4:	466b      	mov	r3, sp
    1cc6:	1d9a      	adds	r2, r3, #6
    1cc8:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
    1cca:	2302      	movs	r3, #2
    1ccc:	0029      	movs	r1, r5
    1cce:	0020      	movs	r0, r4
    1cd0:	4c1a      	ldr	r4, [pc, #104]	; (1d3c <process_control_request+0x358>)
    1cd2:	47a0      	blx	r4
  return true;
    1cd4:	2001      	movs	r0, #1
          break;
    1cd6:	e04a      	b.n	1d6e <process_control_request+0x38a>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
    1cd8:	78a8      	ldrb	r0, [r5, #2]
    1cda:	78ea      	ldrb	r2, [r5, #3]
    1cdc:	0212      	lsls	r2, r2, #8
    1cde:	4302      	orrs	r2, r0
    1ce0:	d104      	bne.n	1cec <process_control_request+0x308>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
    1ce2:	2b01      	cmp	r3, #1
    1ce4:	d013      	beq.n	1d0e <process_control_request+0x32a>
                usbd_edpt_stall(rhport, ep_addr);
    1ce6:	0020      	movs	r0, r4
    1ce8:	4b1b      	ldr	r3, [pc, #108]	; (1d58 <process_control_request+0x374>)
    1cea:	4798      	blx	r3
            if (driver)
    1cec:	2e00      	cmp	r6, #0
    1cee:	d054      	beq.n	1d9a <process_control_request+0x3b6>
              (void) invoke_class_control(rhport, driver, p_request);
    1cf0:	002a      	movs	r2, r5
    1cf2:	0031      	movs	r1, r6
    1cf4:	0020      	movs	r0, r4
    1cf6:	4b0d      	ldr	r3, [pc, #52]	; (1d2c <process_control_request+0x348>)
    1cf8:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
    1cfa:	2000      	movs	r0, #0
    1cfc:	4b06      	ldr	r3, [pc, #24]	; (1d18 <process_control_request+0x334>)
    1cfe:	4798      	blx	r3
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    1d00:	232c      	movs	r3, #44	; 0x2c
    1d02:	4a08      	ldr	r2, [pc, #32]	; (1d24 <process_control_request+0x340>)
    1d04:	5cd3      	ldrb	r3, [r2, r3]
    1d06:	07db      	lsls	r3, r3, #31
    1d08:	d52a      	bpl.n	1d60 <process_control_request+0x37c>
  return true;
    1d0a:	2001      	movs	r0, #1
    1d0c:	e02f      	b.n	1d6e <process_control_request+0x38a>
                usbd_edpt_clear_stall(rhport, ep_addr);
    1d0e:	0020      	movs	r0, r4
    1d10:	4b12      	ldr	r3, [pc, #72]	; (1d5c <process_control_request+0x378>)
    1d12:	4798      	blx	r3
    1d14:	e7ea      	b.n	1cec <process_control_request+0x308>
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	00002089 	.word	0x00002089
    1d1c:	00000000 	.word	0x00000000
    1d20:	00003634 	.word	0x00003634
    1d24:	200007e0 	.word	0x200007e0
    1d28:	00000000 	.word	0x00000000
    1d2c:	00001221 	.word	0x00001221
    1d30:	00003680 	.word	0x00003680
    1d34:	00002095 	.word	0x00002095
    1d38:	000024b1 	.word	0x000024b1
    1d3c:	00001fed 	.word	0x00001fed
    1d40:	00001fa9 	.word	0x00001fa9
    1d44:	000023f1 	.word	0x000023f1
    1d48:	00001185 	.word	0x00001185
    1d4c:	00001241 	.word	0x00001241
    1d50:	000013c9 	.word	0x000013c9
    1d54:	000019c9 	.word	0x000019c9
    1d58:	00001931 	.word	0x00001931
    1d5c:	0000197d 	.word	0x0000197d
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    1d60:	0029      	movs	r1, r5
    1d62:	0020      	movs	r0, r4
    1d64:	4b0e      	ldr	r3, [pc, #56]	; (1da0 <process_control_request+0x3bc>)
    1d66:	4798      	blx	r3
  return true;
    1d68:	2001      	movs	r0, #1
    1d6a:	e000      	b.n	1d6e <process_control_request+0x38a>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    1d6c:	2000      	movs	r0, #0
}
    1d6e:	b002      	add	sp, #8
    1d70:	bc04      	pop	{r2}
    1d72:	4690      	mov	r8, r2
    1d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_VERIFY(tud_vendor_control_xfer_cb);
    1d76:	2000      	movs	r0, #0
    1d78:	e7f9      	b.n	1d6e <process_control_request+0x38a>
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    1d7a:	2000      	movs	r0, #0
    1d7c:	e7f7      	b.n	1d6e <process_control_request+0x38a>
        TU_VERIFY(driver);
    1d7e:	2000      	movs	r0, #0
    1d80:	e7f5      	b.n	1d6e <process_control_request+0x38a>
        return false;
    1d82:	2000      	movs	r0, #0
    1d84:	e7f3      	b.n	1d6e <process_control_request+0x38a>
        default: TU_BREAKPOINT(); return false;
    1d86:	2000      	movs	r0, #0
    1d88:	e7f1      	b.n	1d6e <process_control_request+0x38a>
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    1d8a:	2000      	movs	r0, #0
    1d8c:	e7ef      	b.n	1d6e <process_control_request+0x38a>
      TU_VERIFY(driver);
    1d8e:	2000      	movs	r0, #0
    1d90:	e7ed      	b.n	1d6e <process_control_request+0x38a>
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    1d92:	2000      	movs	r0, #0
    1d94:	e7eb      	b.n	1d6e <process_control_request+0x38a>
        TU_VERIFY(driver);
    1d96:	2000      	movs	r0, #0
    1d98:	e7e9      	b.n	1d6e <process_control_request+0x38a>
  return true;
    1d9a:	2001      	movs	r0, #1
    1d9c:	e7e7      	b.n	1d6e <process_control_request+0x38a>
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	00001fa9 	.word	0x00001fa9

00001da4 <tud_task_ext>:
{
    1da4:	b530      	push	{r4, r5, lr}
    1da6:	b085      	sub	sp, #20
  if ( !tusb_inited() ) return;
    1da8:	4b5b      	ldr	r3, [pc, #364]	; (1f18 <tud_task_ext+0x174>)
    1daa:	4798      	blx	r3
    1dac:	2800      	cmp	r0, #0
    1dae:	d108      	bne.n	1dc2 <tud_task_ext+0x1e>
}
    1db0:	b005      	add	sp, #20
    1db2:	bd30      	pop	{r4, r5, pc}
        usbd_reset(event.rhport);
    1db4:	ac01      	add	r4, sp, #4
    1db6:	7820      	ldrb	r0, [r4, #0]
    1db8:	4b58      	ldr	r3, [pc, #352]	; (1f1c <tud_task_ext+0x178>)
    1dba:	4798      	blx	r3
        _usbd_dev.speed = event.bus_reset.speed;
    1dbc:	7922      	ldrb	r2, [r4, #4]
    1dbe:	4b58      	ldr	r3, [pc, #352]	; (1f20 <tud_task_ext+0x17c>)
    1dc0:	729a      	strb	r2, [r3, #10]
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
    1dc2:	4b57      	ldr	r3, [pc, #348]	; (1f20 <tud_task_ext+0x17c>)
    1dc4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  qhdl->interrupt_set(false);
    1dc6:	002c      	movs	r4, r5
    1dc8:	cc08      	ldmia	r4!, {r3}
    1dca:	2000      	movs	r0, #0
    1dcc:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
    1dce:	a901      	add	r1, sp, #4
    1dd0:	0020      	movs	r0, r4
    1dd2:	4b54      	ldr	r3, [pc, #336]	; (1f24 <tud_task_ext+0x180>)
    1dd4:	4798      	blx	r3
    1dd6:	0004      	movs	r4, r0
  qhdl->interrupt_set(true);
    1dd8:	682b      	ldr	r3, [r5, #0]
    1dda:	2001      	movs	r0, #1
    1ddc:	4798      	blx	r3
    1dde:	2c00      	cmp	r4, #0
    1de0:	d0e6      	beq.n	1db0 <tud_task_ext+0xc>
    switch ( event.event_id )
    1de2:	ab01      	add	r3, sp, #4
    1de4:	785b      	ldrb	r3, [r3, #1]
    1de6:	2b08      	cmp	r3, #8
    1de8:	d8eb      	bhi.n	1dc2 <tud_task_ext+0x1e>
    1dea:	009b      	lsls	r3, r3, #2
    1dec:	4a4e      	ldr	r2, [pc, #312]	; (1f28 <tud_task_ext+0x184>)
    1dee:	58d3      	ldr	r3, [r2, r3]
    1df0:	469f      	mov	pc, r3
        usbd_reset(event.rhport);
    1df2:	ab01      	add	r3, sp, #4
    1df4:	7818      	ldrb	r0, [r3, #0]
    1df6:	4b49      	ldr	r3, [pc, #292]	; (1f1c <tud_task_ext+0x178>)
    1df8:	4798      	blx	r3
        if (tud_umount_cb) tud_umount_cb();
    1dfa:	4b4c      	ldr	r3, [pc, #304]	; (1f2c <tud_task_ext+0x188>)
    1dfc:	2b00      	cmp	r3, #0
    1dfe:	d0e0      	beq.n	1dc2 <tud_task_ext+0x1e>
    1e00:	4798      	blx	r3
    1e02:	e7de      	b.n	1dc2 <tud_task_ext+0x1e>
        _usbd_dev.connected = 1;
    1e04:	4b46      	ldr	r3, [pc, #280]	; (1f20 <tud_task_ext+0x17c>)
    1e06:	7a1a      	ldrb	r2, [r3, #8]
    1e08:	2401      	movs	r4, #1
    1e0a:	2101      	movs	r1, #1
    1e0c:	430a      	orrs	r2, r1
    1e0e:	721a      	strb	r2, [r3, #8]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
    1e10:	222b      	movs	r2, #43	; 0x2b
    1e12:	5c99      	ldrb	r1, [r3, r2]
    1e14:	43a1      	bics	r1, r4
    1e16:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
    1e18:	5c99      	ldrb	r1, [r3, r2]
    1e1a:	2004      	movs	r0, #4
    1e1c:	4381      	bics	r1, r0
    1e1e:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
    1e20:	3201      	adds	r2, #1
    1e22:	5c99      	ldrb	r1, [r3, r2]
    1e24:	43a1      	bics	r1, r4
    1e26:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
    1e28:	5c99      	ldrb	r1, [r3, r2]
    1e2a:	4381      	bics	r1, r0
    1e2c:	5499      	strb	r1, [r3, r2]
        if ( !process_control_request(event.rhport, &event.setup_received) )
    1e2e:	ab01      	add	r3, sp, #4
    1e30:	7818      	ldrb	r0, [r3, #0]
    1e32:	a902      	add	r1, sp, #8
    1e34:	4b3e      	ldr	r3, [pc, #248]	; (1f30 <tud_task_ext+0x18c>)
    1e36:	4798      	blx	r3
    1e38:	2800      	cmp	r0, #0
    1e3a:	d1c2      	bne.n	1dc2 <tud_task_ext+0x1e>
          dcd_edpt_stall(event.rhport, 0);
    1e3c:	ad01      	add	r5, sp, #4
    1e3e:	7828      	ldrb	r0, [r5, #0]
    1e40:	2100      	movs	r1, #0
    1e42:	4c3c      	ldr	r4, [pc, #240]	; (1f34 <tud_task_ext+0x190>)
    1e44:	47a0      	blx	r4
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
    1e46:	7828      	ldrb	r0, [r5, #0]
    1e48:	2180      	movs	r1, #128	; 0x80
    1e4a:	47a0      	blx	r4
    1e4c:	e7b9      	b.n	1dc2 <tud_task_ext+0x1e>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
    1e4e:	ab01      	add	r3, sp, #4
    1e50:	7919      	ldrb	r1, [r3, #4]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    1e52:	227f      	movs	r2, #127	; 0x7f
    1e54:	400a      	ands	r2, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    1e56:	09cc      	lsrs	r4, r1, #7
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
    1e58:	0050      	lsls	r0, r2, #1
    1e5a:	4b31      	ldr	r3, [pc, #196]	; (1f20 <tud_task_ext+0x17c>)
    1e5c:	181b      	adds	r3, r3, r0
    1e5e:	191b      	adds	r3, r3, r4
    1e60:	3328      	adds	r3, #40	; 0x28
    1e62:	78d8      	ldrb	r0, [r3, #3]
    1e64:	2501      	movs	r5, #1
    1e66:	43a8      	bics	r0, r5
    1e68:	70d8      	strb	r0, [r3, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
    1e6a:	78d8      	ldrb	r0, [r3, #3]
    1e6c:	3503      	adds	r5, #3
    1e6e:	43a8      	bics	r0, r5
    1e70:	70d8      	strb	r0, [r3, #3]
        if ( 0 == epnum )
    1e72:	2a00      	cmp	r2, #0
    1e74:	d012      	beq.n	1e9c <tud_task_ext+0xf8>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
    1e76:	0052      	lsls	r2, r2, #1
    1e78:	4b29      	ldr	r3, [pc, #164]	; (1f20 <tud_task_ext+0x17c>)
    1e7a:	189a      	adds	r2, r3, r2
    1e7c:	1912      	adds	r2, r2, r4
    1e7e:	7ed3      	ldrb	r3, [r2, #27]
  if ( usbd_app_driver_get_cb )
    1e80:	4a2d      	ldr	r2, [pc, #180]	; (1f38 <tud_task_ext+0x194>)
    1e82:	2a00      	cmp	r2, #0
    1e84:	d013      	beq.n	1eae <tud_task_ext+0x10a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1e86:	4a26      	ldr	r2, [pc, #152]	; (1f20 <tud_task_ext+0x17c>)
    1e88:	7912      	ldrb	r2, [r2, #4]
    1e8a:	4293      	cmp	r3, r2
    1e8c:	d20d      	bcs.n	1eaa <tud_task_ext+0x106>
    1e8e:	005a      	lsls	r2, r3, #1
    1e90:	18d3      	adds	r3, r2, r3
    1e92:	00da      	lsls	r2, r3, #3
    1e94:	4b22      	ldr	r3, [pc, #136]	; (1f20 <tud_task_ext+0x17c>)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	189b      	adds	r3, r3, r2
    1e9a:	e00f      	b.n	1ebc <tud_task_ext+0x118>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    1e9c:	a801      	add	r0, sp, #4
    1e9e:	7942      	ldrb	r2, [r0, #5]
    1ea0:	9b03      	ldr	r3, [sp, #12]
    1ea2:	7800      	ldrb	r0, [r0, #0]
    1ea4:	4c25      	ldr	r4, [pc, #148]	; (1f3c <tud_task_ext+0x198>)
    1ea6:	47a0      	blx	r4
    1ea8:	e78b      	b.n	1dc2 <tud_task_ext+0x1e>
    drvid -= _app_driver_count;
    1eaa:	1a9b      	subs	r3, r3, r2
    1eac:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1eae:	2b00      	cmp	r3, #0
    1eb0:	d10e      	bne.n	1ed0 <tud_task_ext+0x12c>
    1eb2:	005a      	lsls	r2, r3, #1
    1eb4:	18d3      	adds	r3, r2, r3
    1eb6:	00da      	lsls	r2, r3, #3
    1eb8:	4b21      	ldr	r3, [pc, #132]	; (1f40 <tud_task_ext+0x19c>)
    1eba:	189b      	adds	r3, r3, r2
          TU_ASSERT(driver, );
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d100      	bne.n	1ec2 <tud_task_ext+0x11e>
    1ec0:	e776      	b.n	1db0 <tud_task_ext+0xc>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    1ec2:	691c      	ldr	r4, [r3, #16]
    1ec4:	a801      	add	r0, sp, #4
    1ec6:	7942      	ldrb	r2, [r0, #5]
    1ec8:	9b03      	ldr	r3, [sp, #12]
    1eca:	7800      	ldrb	r0, [r0, #0]
    1ecc:	47a0      	blx	r4
    1ece:	e778      	b.n	1dc2 <tud_task_ext+0x1e>
  return NULL;
    1ed0:	2300      	movs	r3, #0
    1ed2:	e7f3      	b.n	1ebc <tud_task_ext+0x118>
        if ( _usbd_dev.connected )
    1ed4:	4b12      	ldr	r3, [pc, #72]	; (1f20 <tud_task_ext+0x17c>)
    1ed6:	7a1b      	ldrb	r3, [r3, #8]
    1ed8:	07db      	lsls	r3, r3, #31
    1eda:	d400      	bmi.n	1ede <tud_task_ext+0x13a>
    1edc:	e771      	b.n	1dc2 <tud_task_ext+0x1e>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
    1ede:	4b19      	ldr	r3, [pc, #100]	; (1f44 <tud_task_ext+0x1a0>)
    1ee0:	2b00      	cmp	r3, #0
    1ee2:	d100      	bne.n	1ee6 <tud_task_ext+0x142>
    1ee4:	e76d      	b.n	1dc2 <tud_task_ext+0x1e>
    1ee6:	4b0e      	ldr	r3, [pc, #56]	; (1f20 <tud_task_ext+0x17c>)
    1ee8:	7a18      	ldrb	r0, [r3, #8]
    1eea:	0700      	lsls	r0, r0, #28
    1eec:	0fc0      	lsrs	r0, r0, #31
    1eee:	4b15      	ldr	r3, [pc, #84]	; (1f44 <tud_task_ext+0x1a0>)
    1ef0:	4798      	blx	r3
    1ef2:	e766      	b.n	1dc2 <tud_task_ext+0x1e>
        if ( _usbd_dev.connected )
    1ef4:	4b0a      	ldr	r3, [pc, #40]	; (1f20 <tud_task_ext+0x17c>)
    1ef6:	7a1b      	ldrb	r3, [r3, #8]
    1ef8:	07db      	lsls	r3, r3, #31
    1efa:	d400      	bmi.n	1efe <tud_task_ext+0x15a>
    1efc:	e761      	b.n	1dc2 <tud_task_ext+0x1e>
          if (tud_resume_cb) tud_resume_cb();
    1efe:	4b12      	ldr	r3, [pc, #72]	; (1f48 <tud_task_ext+0x1a4>)
    1f00:	2b00      	cmp	r3, #0
    1f02:	d100      	bne.n	1f06 <tud_task_ext+0x162>
    1f04:	e75d      	b.n	1dc2 <tud_task_ext+0x1e>
    1f06:	4798      	blx	r3
    1f08:	e75b      	b.n	1dc2 <tud_task_ext+0x1e>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
    1f0a:	9b02      	ldr	r3, [sp, #8]
    1f0c:	2b00      	cmp	r3, #0
    1f0e:	d100      	bne.n	1f12 <tud_task_ext+0x16e>
    1f10:	e757      	b.n	1dc2 <tud_task_ext+0x1e>
    1f12:	9803      	ldr	r0, [sp, #12]
    1f14:	4798      	blx	r3
  {
    1f16:	e754      	b.n	1dc2 <tud_task_ext+0x1e>
    1f18:	00002e95 	.word	0x00002e95
    1f1c:	0000120d 	.word	0x0000120d
    1f20:	200007e0 	.word	0x200007e0
    1f24:	000010b9 	.word	0x000010b9
    1f28:	0000365c 	.word	0x0000365c
    1f2c:	00000000 	.word	0x00000000
    1f30:	000019e5 	.word	0x000019e5
    1f34:	000024d1 	.word	0x000024d1
    1f38:	00000000 	.word	0x00000000
    1f3c:	000020b9 	.word	0x000020b9
    1f40:	00003680 	.word	0x00003680
	...

00001f4c <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	0004      	movs	r4, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
    1f50:	4b12      	ldr	r3, [pc, #72]	; (1f9c <_data_stage_xact+0x50>)
    1f52:	3340      	adds	r3, #64	; 0x40
    1f54:	8999      	ldrh	r1, [r3, #12]
    1f56:	89db      	ldrh	r3, [r3, #14]
    1f58:	1ac9      	subs	r1, r1, r3
    1f5a:	b289      	uxth	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
    1f5c:	1c0d      	adds	r5, r1, #0
    1f5e:	2940      	cmp	r1, #64	; 0x40
    1f60:	d900      	bls.n	1f64 <_data_stage_xact+0x18>
    1f62:	2540      	movs	r5, #64	; 0x40
    1f64:	b2ad      	uxth	r5, r5

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
    1f66:	2340      	movs	r3, #64	; 0x40
    1f68:	4a0c      	ldr	r2, [pc, #48]	; (1f9c <_data_stage_xact+0x50>)
    1f6a:	56d3      	ldrsb	r3, [r2, r3]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	db08      	blt.n	1f82 <_data_stage_xact+0x36>
  uint8_t ep_addr = EDPT_CTRL_OUT;
    1f70:	2100      	movs	r1, #0
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    1f72:	2d00      	cmp	r5, #0
    1f74:	d110      	bne.n	1f98 <_data_stage_xact+0x4c>
    1f76:	2200      	movs	r2, #0
    1f78:	002b      	movs	r3, r5
    1f7a:	0020      	movs	r0, r4
    1f7c:	4c08      	ldr	r4, [pc, #32]	; (1fa0 <_data_stage_xact+0x54>)
    1f7e:	47a0      	blx	r4
}
    1f80:	bd70      	pop	{r4, r5, r6, pc}
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    1f82:	2d00      	cmp	r5, #0
    1f84:	d101      	bne.n	1f8a <_data_stage_xact+0x3e>
    ep_addr = EDPT_CTRL_IN;
    1f86:	2180      	movs	r1, #128	; 0x80
    1f88:	e7f3      	b.n	1f72 <_data_stage_xact+0x26>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    1f8a:	0010      	movs	r0, r2
    1f8c:	002a      	movs	r2, r5
    1f8e:	6c81      	ldr	r1, [r0, #72]	; 0x48
    1f90:	4b04      	ldr	r3, [pc, #16]	; (1fa4 <_data_stage_xact+0x58>)
    1f92:	4798      	blx	r3
    ep_addr = EDPT_CTRL_IN;
    1f94:	2180      	movs	r1, #128	; 0x80
    1f96:	e7ec      	b.n	1f72 <_data_stage_xact+0x26>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    1f98:	4a00      	ldr	r2, [pc, #0]	; (1f9c <_data_stage_xact+0x50>)
    1f9a:	e7ed      	b.n	1f78 <_data_stage_xact+0x2c>
    1f9c:	20000820 	.word	0x20000820
    1fa0:	000018b5 	.word	0x000018b5
    1fa4:	000031dd 	.word	0x000031dd

00001fa8 <tud_control_status>:
{
    1fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1faa:	0006      	movs	r6, r0
    1fac:	000d      	movs	r5, r1
  _ctrl_xfer.request       = (*request);
    1fae:	4f0c      	ldr	r7, [pc, #48]	; (1fe0 <tud_control_status+0x38>)
    1fb0:	003c      	movs	r4, r7
    1fb2:	3440      	adds	r4, #64	; 0x40
    1fb4:	2208      	movs	r2, #8
    1fb6:	0020      	movs	r0, r4
    1fb8:	4b0a      	ldr	r3, [pc, #40]	; (1fe4 <tud_control_status+0x3c>)
    1fba:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    1fbc:	2300      	movs	r3, #0
    1fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    1fc0:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    1fc2:	81a3      	strh	r3, [r4, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    1fc4:	2300      	movs	r3, #0
    1fc6:	56eb      	ldrsb	r3, [r5, r3]
    1fc8:	2b00      	cmp	r3, #0
    1fca:	db06      	blt.n	1fda <tud_control_status+0x32>
    1fcc:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    1fce:	2300      	movs	r3, #0
    1fd0:	2200      	movs	r2, #0
    1fd2:	0030      	movs	r0, r6
    1fd4:	4c04      	ldr	r4, [pc, #16]	; (1fe8 <tud_control_status+0x40>)
    1fd6:	47a0      	blx	r4
}
    1fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    1fda:	2100      	movs	r1, #0
    1fdc:	e7f7      	b.n	1fce <tud_control_status+0x26>
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	20000820 	.word	0x20000820
    1fe4:	000031dd 	.word	0x000031dd
    1fe8:	000018b5 	.word	0x000018b5

00001fec <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
    1fec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fee:	b083      	sub	sp, #12
    1ff0:	9001      	str	r0, [sp, #4]
    1ff2:	000e      	movs	r6, r1
    1ff4:	0017      	movs	r7, r2
    1ff6:	9300      	str	r3, [sp, #0]
  _ctrl_xfer.request       = (*request);
    1ff8:	4c19      	ldr	r4, [pc, #100]	; (2060 <STACK_SIZE+0x60>)
    1ffa:	0025      	movs	r5, r4
    1ffc:	3540      	adds	r5, #64	; 0x40
    1ffe:	2208      	movs	r2, #8
    2000:	0028      	movs	r0, r5
    2002:	4b18      	ldr	r3, [pc, #96]	; (2064 <STACK_SIZE+0x64>)
    2004:	4798      	blx	r3
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
    2006:	64a7      	str	r7, [r4, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0U;
    2008:	2300      	movs	r3, #0
    200a:	81eb      	strh	r3, [r5, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
    200c:	79b2      	ldrb	r2, [r6, #6]
    200e:	79f3      	ldrb	r3, [r6, #7]
    2010:	021b      	lsls	r3, r3, #8
    2012:	4313      	orrs	r3, r2
    2014:	1c1a      	adds	r2, r3, #0
    2016:	9800      	ldr	r0, [sp, #0]
    2018:	4283      	cmp	r3, r0
    201a:	d900      	bls.n	201e <STACK_SIZE+0x1e>
    201c:	1c02      	adds	r2, r0, #0
    201e:	b291      	uxth	r1, r2
    2020:	4b0f      	ldr	r3, [pc, #60]	; (2060 <STACK_SIZE+0x60>)
    2022:	3340      	adds	r3, #64	; 0x40
    2024:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
    2026:	79b2      	ldrb	r2, [r6, #6]
    2028:	79f3      	ldrb	r3, [r6, #7]
    202a:	021b      	lsls	r3, r3, #8
    202c:	4313      	orrs	r3, r2
    202e:	d007      	beq.n	2040 <STACK_SIZE+0x40>
  {
    if(_ctrl_xfer.data_len > 0U)
    2030:	2900      	cmp	r1, #0
    2032:	d001      	beq.n	2038 <STACK_SIZE+0x38>
    {
      TU_ASSERT(buffer);
    2034:	2f00      	cmp	r7, #0
    2036:	d011      	beq.n	205c <STACK_SIZE+0x5c>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
    2038:	9801      	ldr	r0, [sp, #4]
    203a:	4b0b      	ldr	r3, [pc, #44]	; (2068 <STACK_SIZE+0x68>)
    203c:	4798      	blx	r3
    203e:	e009      	b.n	2054 <STACK_SIZE+0x54>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2040:	2300      	movs	r3, #0
    2042:	56f3      	ldrsb	r3, [r6, r3]
    2044:	2b00      	cmp	r3, #0
    2046:	db07      	blt.n	2058 <STACK_SIZE+0x58>
    2048:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    204a:	2300      	movs	r3, #0
    204c:	2200      	movs	r2, #0
    204e:	9801      	ldr	r0, [sp, #4]
    2050:	4c06      	ldr	r4, [pc, #24]	; (206c <STACK_SIZE+0x6c>)
    2052:	47a0      	blx	r4
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
    2054:	b003      	add	sp, #12
    2056:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2058:	2100      	movs	r1, #0
    205a:	e7f6      	b.n	204a <STACK_SIZE+0x4a>
      TU_ASSERT(buffer);
    205c:	2000      	movs	r0, #0
    205e:	e7f9      	b.n	2054 <STACK_SIZE+0x54>
    2060:	20000820 	.word	0x20000820
    2064:	000031dd 	.word	0x000031dd
    2068:	00001f4d 	.word	0x00001f4d
    206c:	000018b5 	.word	0x000018b5

00002070 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
    2070:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
    2072:	2214      	movs	r2, #20
    2074:	2100      	movs	r1, #0
    2076:	4802      	ldr	r0, [pc, #8]	; (2080 <usbd_control_reset+0x10>)
    2078:	3040      	adds	r0, #64	; 0x40
    207a:	4b02      	ldr	r3, [pc, #8]	; (2084 <usbd_control_reset+0x14>)
    207c:	4798      	blx	r3
}
    207e:	bd10      	pop	{r4, pc}
    2080:	20000820 	.word	0x20000820
    2084:	00003261 	.word	0x00003261

00002088 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
    2088:	4b01      	ldr	r3, [pc, #4]	; (2090 <usbd_control_set_complete_callback+0x8>)
    208a:	6518      	str	r0, [r3, #80]	; 0x50
}
    208c:	4770      	bx	lr
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	20000820 	.word	0x20000820

00002094 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
    2094:	b570      	push	{r4, r5, r6, lr}
    2096:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
    2098:	4d05      	ldr	r5, [pc, #20]	; (20b0 <usbd_control_set_request+0x1c>)
    209a:	002c      	movs	r4, r5
    209c:	3440      	adds	r4, #64	; 0x40
    209e:	2208      	movs	r2, #8
    20a0:	0020      	movs	r0, r4
    20a2:	4b04      	ldr	r3, [pc, #16]	; (20b4 <usbd_control_set_request+0x20>)
    20a4:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    20a6:	2300      	movs	r3, #0
    20a8:	64ab      	str	r3, [r5, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    20aa:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    20ac:	81a3      	strh	r3, [r4, #12]
}
    20ae:	bd70      	pop	{r4, r5, r6, pc}
    20b0:	20000820 	.word	0x20000820
    20b4:	000031dd 	.word	0x000031dd

000020b8 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
    20b8:	b570      	push	{r4, r5, r6, lr}
    20ba:	0004      	movs	r4, r0
    20bc:	001d      	movs	r5, r3
    20be:	09c9      	lsrs	r1, r1, #7
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
    20c0:	2340      	movs	r3, #64	; 0x40
    20c2:	4a31      	ldr	r2, [pc, #196]	; (2188 <usbd_control_xfer_cb+0xd0>)
    20c4:	5cd3      	ldrb	r3, [r2, r3]
    20c6:	09db      	lsrs	r3, r3, #7
    20c8:	428b      	cmp	r3, r1
    20ca:	d012      	beq.n	20f2 <usbd_control_xfer_cb+0x3a>
  {
    TU_ASSERT(0 == xferred_bytes);
    20cc:	2d00      	cmp	r5, #0
    20ce:	d155      	bne.n	217c <usbd_control_xfer_cb+0xc4>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
    20d0:	4b2e      	ldr	r3, [pc, #184]	; (218c <usbd_control_xfer_cb+0xd4>)
    20d2:	2b00      	cmp	r3, #0
    20d4:	d002      	beq.n	20dc <usbd_control_xfer_cb+0x24>
    20d6:	0011      	movs	r1, r2
    20d8:	3140      	adds	r1, #64	; 0x40
    20da:	4798      	blx	r3

    if (_ctrl_xfer.complete_cb)
    20dc:	4b2a      	ldr	r3, [pc, #168]	; (2188 <usbd_control_xfer_cb+0xd0>)
    20de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    20e0:	2b00      	cmp	r3, #0
    20e2:	d04d      	beq.n	2180 <usbd_control_xfer_cb+0xc8>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
    20e4:	4a28      	ldr	r2, [pc, #160]	; (2188 <usbd_control_xfer_cb+0xd0>)
    20e6:	3240      	adds	r2, #64	; 0x40
    20e8:	2103      	movs	r1, #3
    20ea:	0020      	movs	r0, r4
    20ec:	4798      	blx	r3
    }

    return true;
    20ee:	2001      	movs	r0, #1
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
    20f0:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
    20f2:	2340      	movs	r3, #64	; 0x40
    20f4:	4a24      	ldr	r2, [pc, #144]	; (2188 <usbd_control_xfer_cb+0xd0>)
    20f6:	56d3      	ldrsb	r3, [r2, r3]
    20f8:	2b00      	cmp	r3, #0
    20fa:	db07      	blt.n	210c <usbd_control_xfer_cb+0x54>
    TU_VERIFY(_ctrl_xfer.buffer);
    20fc:	0013      	movs	r3, r2
    20fe:	6c90      	ldr	r0, [r2, #72]	; 0x48
    2100:	2800      	cmp	r0, #0
    2102:	d03f      	beq.n	2184 <usbd_control_xfer_cb+0xcc>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
    2104:	002a      	movs	r2, r5
    2106:	0019      	movs	r1, r3
    2108:	4b21      	ldr	r3, [pc, #132]	; (2190 <usbd_control_xfer_cb+0xd8>)
    210a:	4798      	blx	r3
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
    210c:	b2aa      	uxth	r2, r5
    210e:	481e      	ldr	r0, [pc, #120]	; (2188 <usbd_control_xfer_cb+0xd0>)
    2110:	0001      	movs	r1, r0
    2112:	3140      	adds	r1, #64	; 0x40
    2114:	89cb      	ldrh	r3, [r1, #14]
    2116:	18d3      	adds	r3, r2, r3
    2118:	b29b      	uxth	r3, r3
    211a:	81cb      	strh	r3, [r1, #14]
  _ctrl_xfer.buffer += xferred_bytes;
    211c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    211e:	1952      	adds	r2, r2, r5
    2120:	6482      	str	r2, [r0, #72]	; 0x48
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
    2122:	88ca      	ldrh	r2, [r1, #6]
    2124:	4293      	cmp	r3, r2
    2126:	d001      	beq.n	212c <usbd_control_xfer_cb+0x74>
    2128:	2d3f      	cmp	r5, #63	; 0x3f
    212a:	d823      	bhi.n	2174 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
    212c:	4b16      	ldr	r3, [pc, #88]	; (2188 <usbd_control_xfer_cb+0xd0>)
    212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2130:	2b00      	cmp	r3, #0
    2132:	d012      	beq.n	215a <usbd_control_xfer_cb+0xa2>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
    2134:	4a14      	ldr	r2, [pc, #80]	; (2188 <usbd_control_xfer_cb+0xd0>)
    2136:	3240      	adds	r2, #64	; 0x40
    2138:	2102      	movs	r1, #2
    213a:	0020      	movs	r0, r4
    213c:	4798      	blx	r3
    if ( is_ok )
    213e:	2800      	cmp	r0, #0
    2140:	d00f      	beq.n	2162 <usbd_control_xfer_cb+0xaa>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2142:	2340      	movs	r3, #64	; 0x40
    2144:	4a10      	ldr	r2, [pc, #64]	; (2188 <usbd_control_xfer_cb+0xd0>)
    2146:	56d3      	ldrsb	r3, [r2, r3]
    2148:	2b00      	cmp	r3, #0
    214a:	db08      	blt.n	215e <usbd_control_xfer_cb+0xa6>
    214c:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    214e:	2300      	movs	r3, #0
    2150:	2200      	movs	r2, #0
    2152:	0020      	movs	r0, r4
    2154:	4c0f      	ldr	r4, [pc, #60]	; (2194 <usbd_control_xfer_cb+0xdc>)
    2156:	47a0      	blx	r4
    2158:	e7ca      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    bool is_ok = true;
    215a:	2001      	movs	r0, #1
    215c:	e7ef      	b.n	213e <usbd_control_xfer_cb+0x86>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    215e:	2100      	movs	r1, #0
    2160:	e7f5      	b.n	214e <usbd_control_xfer_cb+0x96>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
    2162:	2100      	movs	r1, #0
    2164:	0020      	movs	r0, r4
    2166:	4d0c      	ldr	r5, [pc, #48]	; (2198 <usbd_control_xfer_cb+0xe0>)
    2168:	47a8      	blx	r5
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
    216a:	2180      	movs	r1, #128	; 0x80
    216c:	0020      	movs	r0, r4
    216e:	47a8      	blx	r5
  return true;
    2170:	2001      	movs	r0, #1
    2172:	e7bd      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    TU_ASSERT( _data_stage_xact(rhport) );
    2174:	0020      	movs	r0, r4
    2176:	4b09      	ldr	r3, [pc, #36]	; (219c <usbd_control_xfer_cb+0xe4>)
    2178:	4798      	blx	r3
    217a:	e7b9      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    TU_ASSERT(0 == xferred_bytes);
    217c:	2000      	movs	r0, #0
    217e:	e7b7      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    return true;
    2180:	2001      	movs	r0, #1
    2182:	e7b5      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    TU_VERIFY(_ctrl_xfer.buffer);
    2184:	2000      	movs	r0, #0
    2186:	e7b3      	b.n	20f0 <usbd_control_xfer_cb+0x38>
    2188:	20000820 	.word	0x20000820
    218c:	000022d9 	.word	0x000022d9
    2190:	000031dd 	.word	0x000031dd
    2194:	000018b5 	.word	0x000018b5
    2198:	000024d1 	.word	0x000024d1
    219c:	00001f4d 	.word	0x00001f4d

000021a0 <bus_reset>:
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
}

// Setup the control endpoint 0.
static void bus_reset(void)
{
    21a0:	b510      	push	{r4, lr}
  // Max size of packets is 64 bytes.
  UsbDeviceDescBank* bank_out = &sram_registers[0][TUSB_DIR_OUT];
  bank_out->PCKSIZE.bit.SIZE = 0x3;
    21a2:	4b10      	ldr	r3, [pc, #64]	; (21e4 <bus_reset+0x44>)
    21a4:	6858      	ldr	r0, [r3, #4]
    21a6:	4c10      	ldr	r4, [pc, #64]	; (21e8 <bus_reset+0x48>)
    21a8:	4020      	ands	r0, r4
    21aa:	22c0      	movs	r2, #192	; 0xc0
    21ac:	0592      	lsls	r2, r2, #22
    21ae:	0001      	movs	r1, r0
    21b0:	4311      	orrs	r1, r2
    21b2:	6059      	str	r1, [r3, #4]
  UsbDeviceDescBank* bank_in = &sram_registers[0][TUSB_DIR_IN];
  bank_in->PCKSIZE.bit.SIZE = 0x3;
    21b4:	6959      	ldr	r1, [r3, #20]
    21b6:	4021      	ands	r1, r4
    21b8:	430a      	orrs	r2, r1
    21ba:	615a      	str	r2, [r3, #20]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[0];
  ep->EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0x1) | USB_DEVICE_EPCFG_EPTYPE1(0x1);
    21bc:	4a0b      	ldr	r2, [pc, #44]	; (21ec <bus_reset+0x4c>)
    21be:	2111      	movs	r1, #17
    21c0:	7011      	strb	r1, [r2, #0]
  ep->EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1 | USB_DEVICE_EPINTENSET_RXSTP;
    21c2:	3102      	adds	r1, #2
    21c4:	7251      	strb	r1, [r2, #9]
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    21c6:	4a0a      	ldr	r2, [pc, #40]	; (21f0 <bus_reset+0x50>)
    21c8:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    21ca:	6859      	ldr	r1, [r3, #4]
    21cc:	4a09      	ldr	r2, [pc, #36]	; (21f4 <bus_reset+0x54>)
    21ce:	4011      	ands	r1, r2
    21d0:	2280      	movs	r2, #128	; 0x80
    21d2:	0292      	lsls	r2, r2, #10
    21d4:	430a      	orrs	r2, r1
    21d6:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    21d8:	685a      	ldr	r2, [r3, #4]
    21da:	0b92      	lsrs	r2, r2, #14
    21dc:	0391      	lsls	r1, r2, #14
    21de:	6059      	str	r1, [r3, #4]

  // Prepare for setup packet
  prepare_setup();
}
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000874 	.word	0x20000874
    21e8:	8fffffff 	.word	0x8fffffff
    21ec:	41005100 	.word	0x41005100
    21f0:	20000974 	.word	0x20000974
    21f4:	f0003fff 	.word	0xf0003fff

000021f8 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
    21f8:	b530      	push	{r4, r5, lr}
  (void) rhport;

  // Reset to get in a clean state.
  USB->DEVICE.CTRLA.bit.SWRST = true;
    21fa:	4a21      	ldr	r2, [pc, #132]	; (2280 <dcd_init+0x88>)
    21fc:	7813      	ldrb	r3, [r2, #0]
    21fe:	2101      	movs	r1, #1
    2200:	430b      	orrs	r3, r1
    2202:	7013      	strb	r3, [r2, #0]
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 0) {}
    2204:	4b1e      	ldr	r3, [pc, #120]	; (2280 <dcd_init+0x88>)
    2206:	789b      	ldrb	r3, [r3, #2]
    2208:	07db      	lsls	r3, r3, #31
    220a:	d5fb      	bpl.n	2204 <dcd_init+0xc>
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 1) {}
    220c:	4b1c      	ldr	r3, [pc, #112]	; (2280 <dcd_init+0x88>)
    220e:	789b      	ldrb	r3, [r3, #2]
    2210:	07db      	lsls	r3, r3, #31
    2212:	d4fb      	bmi.n	220c <dcd_init+0x14>

  USB->DEVICE.PADCAL.bit.TRANSP = (*((uint32_t*) USB_FUSES_TRANSP_ADDR) & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2214:	4b1b      	ldr	r3, [pc, #108]	; (2284 <dcd_init+0x8c>)
    2216:	6819      	ldr	r1, [r3, #0]
    2218:	0c88      	lsrs	r0, r1, #18
    221a:	221f      	movs	r2, #31
    221c:	4010      	ands	r0, r2
    221e:	4b18      	ldr	r3, [pc, #96]	; (2280 <dcd_init+0x88>)
    2220:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    2222:	251f      	movs	r5, #31
    2224:	43ac      	bics	r4, r5
    2226:	4320      	orrs	r0, r4
    2228:	8518      	strh	r0, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRANSN = (*((uint32_t*) USB_FUSES_TRANSN_ADDR) & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    222a:	0b4c      	lsrs	r4, r1, #13
    222c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    222e:	4022      	ands	r2, r4
    2230:	0192      	lsls	r2, r2, #6
    2232:	4c15      	ldr	r4, [pc, #84]	; (2288 <dcd_init+0x90>)
    2234:	4020      	ands	r0, r4
    2236:	4302      	orrs	r2, r0
    2238:	851a      	strh	r2, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRIM   = (*((uint32_t*) USB_FUSES_TRIM_ADDR) & USB_FUSES_TRIM_Msk) >> USB_FUSES_TRIM_Pos;
    223a:	0dc8      	lsrs	r0, r1, #23
    223c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    223e:	2107      	movs	r1, #7
    2240:	4001      	ands	r1, r0
    2242:	0309      	lsls	r1, r1, #12
    2244:	4811      	ldr	r0, [pc, #68]	; (228c <dcd_init+0x94>)
    2246:	4002      	ands	r2, r0
    2248:	430a      	orrs	r2, r1
    224a:	851a      	strh	r2, [r3, #40]	; 0x28

  USB->DEVICE.QOSCTRL.bit.CQOS = 3; // High Quality
    224c:	78da      	ldrb	r2, [r3, #3]
    224e:	2103      	movs	r1, #3
    2250:	430a      	orrs	r2, r1
    2252:	70da      	strb	r2, [r3, #3]
  USB->DEVICE.QOSCTRL.bit.DQOS = 3; // High Quality
    2254:	78da      	ldrb	r2, [r3, #3]
    2256:	210c      	movs	r1, #12
    2258:	430a      	orrs	r2, r1
    225a:	70da      	strb	r2, [r3, #3]

  // Configure registers
  USB->DEVICE.DESCADD.reg = (uint32_t) &sram_registers;
    225c:	4a0c      	ldr	r2, [pc, #48]	; (2290 <dcd_init+0x98>)
    225e:	625a      	str	r2, [r3, #36]	; 0x24
  USB->DEVICE.CTRLB.reg = USB_DEVICE_CTRLB_SPDCONF_FS;
    2260:	2200      	movs	r2, #0
    2262:	811a      	strh	r2, [r3, #8]
  USB->DEVICE.CTRLA.reg = USB_CTRLA_MODE_DEVICE | USB_CTRLA_ENABLE | USB_CTRLA_RUNSTDBY;
    2264:	3206      	adds	r2, #6
    2266:	701a      	strb	r2, [r3, #0]
  while (USB->DEVICE.SYNCBUSY.bit.ENABLE == 1) {}
    2268:	4b05      	ldr	r3, [pc, #20]	; (2280 <dcd_init+0x88>)
    226a:	789b      	ldrb	r3, [r3, #2]
    226c:	079b      	lsls	r3, r3, #30
    226e:	d4fb      	bmi.n	2268 <dcd_init+0x70>

  USB->DEVICE.INTFLAG.reg |= USB->DEVICE.INTFLAG.reg; // clear pending
    2270:	4b03      	ldr	r3, [pc, #12]	; (2280 <dcd_init+0x88>)
    2272:	8b99      	ldrh	r1, [r3, #28]
    2274:	8b9a      	ldrh	r2, [r3, #28]
    2276:	430a      	orrs	r2, r1
    2278:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = /* USB_DEVICE_INTENSET_SOF | */ USB_DEVICE_INTENSET_EORST;
    227a:	2208      	movs	r2, #8
    227c:	831a      	strh	r2, [r3, #24]
}
    227e:	bd30      	pop	{r4, r5, pc}
    2280:	41005000 	.word	0x41005000
    2284:	00806024 	.word	0x00806024
    2288:	fffff83f 	.word	0xfffff83f
    228c:	ffff8fff 	.word	0xffff8fff
    2290:	20000874 	.word	0x20000874

00002294 <dcd_int_enable>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2294:	2280      	movs	r2, #128	; 0x80
    2296:	4b01      	ldr	r3, [pc, #4]	; (229c <dcd_int_enable+0x8>)
    2298:	601a      	str	r2, [r3, #0]

void dcd_int_enable(uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(USB_IRQn);
}
    229a:	4770      	bx	lr
    229c:	e000e100 	.word	0xe000e100

000022a0 <dcd_int_disable>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22a0:	2380      	movs	r3, #128	; 0x80
    22a2:	4a03      	ldr	r2, [pc, #12]	; (22b0 <dcd_int_disable+0x10>)
    22a4:	50d3      	str	r3, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    22a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22aa:	f3bf 8f6f 	isb	sy

void dcd_int_disable(uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(USB_IRQn);
}
    22ae:	4770      	bx	lr
    22b0:	e000e100 	.word	0xe000e100

000022b4 <dcd_disconnect>:

// disconnect by disabling internal pull-up resistor on D+/D-
void dcd_disconnect(uint8_t rhport)
{
  (void) rhport;
  USB->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    22b4:	4a03      	ldr	r2, [pc, #12]	; (22c4 <dcd_disconnect+0x10>)
    22b6:	8913      	ldrh	r3, [r2, #8]
    22b8:	2101      	movs	r1, #1
    22ba:	430b      	orrs	r3, r1
    22bc:	b29b      	uxth	r3, r3
    22be:	8113      	strh	r3, [r2, #8]
}
    22c0:	4770      	bx	lr
    22c2:	46c0      	nop			; (mov r8, r8)
    22c4:	41005000 	.word	0x41005000

000022c8 <dcd_connect>:

// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
  (void) rhport;
   USB->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    22c8:	4a02      	ldr	r2, [pc, #8]	; (22d4 <dcd_connect+0xc>)
    22ca:	8913      	ldrh	r3, [r2, #8]
    22cc:	2101      	movs	r1, #1
    22ce:	438b      	bics	r3, r1
    22d0:	8113      	strh	r3, [r2, #8]
}
    22d2:	4770      	bx	lr
    22d4:	41005000 	.word	0x41005000

000022d8 <dcd_edpt0_status_complete>:
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
    22d8:	780b      	ldrb	r3, [r1, #0]
    22da:	065b      	lsls	r3, r3, #25
    22dc:	d102      	bne.n	22e4 <dcd_edpt0_status_complete+0xc>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
      request->bRequest == TUSB_REQ_SET_ADDRESS )
    22de:	784b      	ldrb	r3, [r1, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
    22e0:	2b05      	cmp	r3, #5
    22e2:	d00e      	beq.n	2302 <dcd_edpt0_status_complete+0x2a>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    22e4:	4b0a      	ldr	r3, [pc, #40]	; (2310 <dcd_edpt0_status_complete+0x38>)
    22e6:	4a0b      	ldr	r2, [pc, #44]	; (2314 <dcd_edpt0_status_complete+0x3c>)
    22e8:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    22ea:	6859      	ldr	r1, [r3, #4]
    22ec:	4a0a      	ldr	r2, [pc, #40]	; (2318 <dcd_edpt0_status_complete+0x40>)
    22ee:	4011      	ands	r1, r2
    22f0:	2280      	movs	r2, #128	; 0x80
    22f2:	0292      	lsls	r2, r2, #10
    22f4:	430a      	orrs	r2, r1
    22f6:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    22f8:	685a      	ldr	r2, [r3, #4]
    22fa:	0b92      	lsrs	r2, r2, #14
    22fc:	0391      	lsls	r1, r2, #14
    22fe:	6059      	str	r1, [r3, #4]

  // Just finished status stage, prepare for next setup packet
  // Note: we may already prepare setup when queueing the control status.
  // but it has no harm to do it again here
  prepare_setup();
}
    2300:	4770      	bx	lr
    uint8_t const dev_addr = (uint8_t) request->wValue;
    2302:	788a      	ldrb	r2, [r1, #2]
    USB->DEVICE.DADD.reg = USB_DEVICE_DADD_DADD(dev_addr) | USB_DEVICE_DADD_ADDEN;
    2304:	3b85      	subs	r3, #133	; 0x85
    2306:	4313      	orrs	r3, r2
    2308:	b2db      	uxtb	r3, r3
    230a:	4a04      	ldr	r2, [pc, #16]	; (231c <dcd_edpt0_status_complete+0x44>)
    230c:	7293      	strb	r3, [r2, #10]
    230e:	e7e9      	b.n	22e4 <dcd_edpt0_status_complete+0xc>
    2310:	20000874 	.word	0x20000874
    2314:	20000974 	.word	0x20000974
    2318:	f0003fff 	.word	0xf0003fff
    231c:	41005000 	.word	0x41005000

00002320 <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
    2320:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
    2322:	788e      	ldrb	r6, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2324:	247f      	movs	r4, #127	; 0x7f
    2326:	4034      	ands	r4, r6
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2328:	b276      	sxtb	r6, r6
    232a:	0ff7      	lsrs	r7, r6, #31
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  uint32_t size_value = 0;
    232c:	2200      	movs	r2, #0
  while (size_value < 7) {
    232e:	2a06      	cmp	r2, #6
    2330:	d80c      	bhi.n	234c <dcd_edpt_open+0x2c>
    if (1 << (size_value + 3) == tu_edpt_packet_size(desc_edpt)) {
    2332:	1cd3      	adds	r3, r2, #3
    2334:	2001      	movs	r0, #1
    2336:	4098      	lsls	r0, r3
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    2338:	790d      	ldrb	r5, [r1, #4]
    233a:	794b      	ldrb	r3, [r1, #5]
    233c:	021b      	lsls	r3, r3, #8
    233e:	432b      	orrs	r3, r5
    2340:	055b      	lsls	r3, r3, #21
    2342:	0d5b      	lsrs	r3, r3, #21
    2344:	4298      	cmp	r0, r3
    2346:	d001      	beq.n	234c <dcd_edpt_open+0x2c>
      break;
    }
    size_value++;
    2348:	3201      	adds	r2, #1
    234a:	e7f0      	b.n	232e <dcd_edpt_open+0xe>
  }

  // unsupported endpoint size
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) != 1023 ) return false;
    234c:	2a07      	cmp	r2, #7
    234e:	d026      	beq.n	239e <dcd_edpt_open+0x7e>

  bank->PCKSIZE.bit.SIZE = size_value;
    2350:	0063      	lsls	r3, r4, #1
    2352:	19df      	adds	r7, r3, r7
    2354:	013f      	lsls	r7, r7, #4
    2356:	4b22      	ldr	r3, [pc, #136]	; (23e0 <dcd_edpt_open+0xc0>)
    2358:	19df      	adds	r7, r3, r7
    235a:	6878      	ldr	r0, [r7, #4]
    235c:	2307      	movs	r3, #7
    235e:	401a      	ands	r2, r3
    2360:	0712      	lsls	r2, r2, #28
    2362:	4b20      	ldr	r3, [pc, #128]	; (23e4 <dcd_edpt_open+0xc4>)
    2364:	4018      	ands	r0, r3
    2366:	4302      	orrs	r2, r0
    2368:	607a      	str	r2, [r7, #4]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    236a:	0164      	lsls	r4, r4, #5
    236c:	4b1e      	ldr	r3, [pc, #120]	; (23e8 <dcd_edpt_open+0xc8>)
    236e:	469c      	mov	ip, r3
    2370:	4464      	add	r4, ip

  if ( dir == TUSB_DIR_OUT )
    2372:	2e00      	cmp	r6, #0
    2374:	db1e      	blt.n	23b4 <dcd_edpt_open+0x94>
  {
    ep->EPCFG.bit.EPTYPE0 = desc_edpt->bmAttributes.xfer + 1;
    2376:	78cb      	ldrb	r3, [r1, #3]
    2378:	079b      	lsls	r3, r3, #30
    237a:	0f9b      	lsrs	r3, r3, #30
    237c:	3301      	adds	r3, #1
    237e:	7822      	ldrb	r2, [r4, #0]
    2380:	2107      	movs	r1, #7
    2382:	4019      	ands	r1, r3
    2384:	2307      	movs	r3, #7
    2386:	439a      	bics	r2, r3
    2388:	0013      	movs	r3, r2
    238a:	430b      	orrs	r3, r1
    238c:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT; // clear stall & dtoggle
    238e:	2311      	movs	r3, #17
    2390:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT0 = true;
    2392:	7a63      	ldrb	r3, [r4, #9]
    2394:	2201      	movs	r2, #1
    2396:	4313      	orrs	r3, r2
    2398:	7263      	strb	r3, [r4, #9]
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    ep->EPINTENSET.bit.TRCPT1 = true;
  }

  return true;
    239a:	2001      	movs	r0, #1
}
    239c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    239e:	7908      	ldrb	r0, [r1, #4]
    23a0:	794b      	ldrb	r3, [r1, #5]
    23a2:	021b      	lsls	r3, r3, #8
    23a4:	4303      	orrs	r3, r0
    23a6:	055b      	lsls	r3, r3, #21
    23a8:	0d5b      	lsrs	r3, r3, #21
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) != 1023 ) return false;
    23aa:	4810      	ldr	r0, [pc, #64]	; (23ec <dcd_edpt_open+0xcc>)
    23ac:	4283      	cmp	r3, r0
    23ae:	d0cf      	beq.n	2350 <dcd_edpt_open+0x30>
    23b0:	2000      	movs	r0, #0
    23b2:	e7f3      	b.n	239c <dcd_edpt_open+0x7c>
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    23b4:	78cb      	ldrb	r3, [r1, #3]
    23b6:	079b      	lsls	r3, r3, #30
    23b8:	0f9b      	lsrs	r3, r3, #30
    23ba:	3301      	adds	r3, #1
    23bc:	7822      	ldrb	r2, [r4, #0]
    23be:	2107      	movs	r1, #7
    23c0:	4019      	ands	r1, r3
    23c2:	0109      	lsls	r1, r1, #4
    23c4:	2370      	movs	r3, #112	; 0x70
    23c6:	439a      	bics	r2, r3
    23c8:	0013      	movs	r3, r2
    23ca:	430b      	orrs	r3, r1
    23cc:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    23ce:	2322      	movs	r3, #34	; 0x22
    23d0:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT1 = true;
    23d2:	7a63      	ldrb	r3, [r4, #9]
    23d4:	2202      	movs	r2, #2
    23d6:	4313      	orrs	r3, r2
    23d8:	7263      	strb	r3, [r4, #9]
  return true;
    23da:	2001      	movs	r0, #1
    23dc:	e7de      	b.n	239c <dcd_edpt_open+0x7c>
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	20000874 	.word	0x20000874
    23e4:	8fffffff 	.word	0x8fffffff
    23e8:	41005100 	.word	0x41005100
    23ec:	000003ff 	.word	0x000003ff

000023f0 <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
    23f0:	4770      	bx	lr
	...

000023f4 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    23f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    23f6:	207f      	movs	r0, #127	; 0x7f
    23f8:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    23fa:	b249      	sxtb	r1, r1
    23fc:	0fcf      	lsrs	r7, r1, #31

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    23fe:	0145      	lsls	r5, r0, #5
    2400:	4c27      	ldr	r4, [pc, #156]	; (24a0 <dcd_edpt_xfer+0xac>)
    2402:	46a4      	mov	ip, r4
    2404:	4465      	add	r5, ip

  bank->ADDR.reg = (uint32_t) buffer;
    2406:	0044      	lsls	r4, r0, #1
    2408:	19e4      	adds	r4, r4, r7
    240a:	0124      	lsls	r4, r4, #4
    240c:	4e25      	ldr	r6, [pc, #148]	; (24a4 <dcd_edpt_xfer+0xb0>)
    240e:	51a2      	str	r2, [r4, r6]

  // A SETUP token can occur immediately after an ZLP Status.
  // So make sure we have a valid buffer for setup packet.
  //   Status = ZLP EP0 with direction opposite to one in the dir bit of current setup
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2410:	2800      	cmp	r0, #0
    2412:	d101      	bne.n	2418 <dcd_edpt_xfer+0x24>
    2414:	2a00      	cmp	r2, #0
    2416:	d017      	beq.n	2448 <dcd_edpt_xfer+0x54>
    prepare_setup();
  }

  if ( dir == TUSB_DIR_OUT )
    2418:	2900      	cmp	r1, #0
    241a:	db2b      	blt.n	2474 <dcd_edpt_xfer+0x80>
  {
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = total_bytes;
    241c:	0040      	lsls	r0, r0, #1
    241e:	19c0      	adds	r0, r0, r7
    2420:	0102      	lsls	r2, r0, #4
    2422:	4820      	ldr	r0, [pc, #128]	; (24a4 <dcd_edpt_xfer+0xb0>)
    2424:	1880      	adds	r0, r0, r2
    2426:	6842      	ldr	r2, [r0, #4]
    2428:	049b      	lsls	r3, r3, #18
    242a:	091b      	lsrs	r3, r3, #4
    242c:	491e      	ldr	r1, [pc, #120]	; (24a8 <dcd_edpt_xfer+0xb4>)
    242e:	400a      	ands	r2, r1
    2430:	4313      	orrs	r3, r2
    2432:	6043      	str	r3, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = 0;
    2434:	6843      	ldr	r3, [r0, #4]
    2436:	0b9b      	lsrs	r3, r3, #14
    2438:	039a      	lsls	r2, r3, #14
    243a:	6042      	str	r2, [r0, #4]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    243c:	2340      	movs	r3, #64	; 0x40
    243e:	712b      	strb	r3, [r5, #4]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2440:	3b3c      	subs	r3, #60	; 0x3c
    2442:	71eb      	strb	r3, [r5, #7]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
  }

  return true;
}
    2444:	2001      	movs	r0, #1
    2446:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2448:	2b00      	cmp	r3, #0
    244a:	d1e5      	bne.n	2418 <dcd_edpt_xfer+0x24>
    244c:	4a17      	ldr	r2, [pc, #92]	; (24ac <dcd_edpt_xfer+0xb8>)
    244e:	7812      	ldrb	r2, [r2, #0]
    2450:	09d2      	lsrs	r2, r2, #7
    2452:	4297      	cmp	r7, r2
    2454:	d0e0      	beq.n	2418 <dcd_edpt_xfer+0x24>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2456:	0032      	movs	r2, r6
    2458:	4c14      	ldr	r4, [pc, #80]	; (24ac <dcd_edpt_xfer+0xb8>)
    245a:	6034      	str	r4, [r6, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    245c:	6876      	ldr	r6, [r6, #4]
    245e:	4c12      	ldr	r4, [pc, #72]	; (24a8 <dcd_edpt_xfer+0xb4>)
    2460:	4026      	ands	r6, r4
    2462:	2480      	movs	r4, #128	; 0x80
    2464:	02a4      	lsls	r4, r4, #10
    2466:	4334      	orrs	r4, r6
    2468:	6054      	str	r4, [r2, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    246a:	6854      	ldr	r4, [r2, #4]
    246c:	0ba4      	lsrs	r4, r4, #14
    246e:	03a6      	lsls	r6, r4, #14
    2470:	6056      	str	r6, [r2, #4]
    2472:	e7d1      	b.n	2418 <dcd_edpt_xfer+0x24>
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2474:	0040      	lsls	r0, r0, #1
    2476:	19c0      	adds	r0, r0, r7
    2478:	0100      	lsls	r0, r0, #4
    247a:	4a0a      	ldr	r2, [pc, #40]	; (24a4 <dcd_edpt_xfer+0xb0>)
    247c:	1810      	adds	r0, r2, r0
    247e:	6841      	ldr	r1, [r0, #4]
    2480:	4a09      	ldr	r2, [pc, #36]	; (24a8 <dcd_edpt_xfer+0xb4>)
    2482:	400a      	ands	r2, r1
    2484:	6042      	str	r2, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = total_bytes;
    2486:	6842      	ldr	r2, [r0, #4]
    2488:	049b      	lsls	r3, r3, #18
    248a:	0c9b      	lsrs	r3, r3, #18
    248c:	0b92      	lsrs	r2, r2, #14
    248e:	0392      	lsls	r2, r2, #14
    2490:	4313      	orrs	r3, r2
    2492:	6043      	str	r3, [r0, #4]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2494:	2380      	movs	r3, #128	; 0x80
    2496:	716b      	strb	r3, [r5, #5]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2498:	3b78      	subs	r3, #120	; 0x78
    249a:	71eb      	strb	r3, [r5, #7]
    249c:	e7d2      	b.n	2444 <dcd_edpt_xfer+0x50>
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	41005100 	.word	0x41005100
    24a4:	20000874 	.word	0x20000874
    24a8:	f0003fff 	.word	0xf0003fff
    24ac:	20000974 	.word	0x20000974

000024b0 <dcd_set_address>:
{
    24b0:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, 0x80, NULL, 0);
    24b2:	2300      	movs	r3, #0
    24b4:	2200      	movs	r2, #0
    24b6:	2180      	movs	r1, #128	; 0x80
    24b8:	4c03      	ldr	r4, [pc, #12]	; (24c8 <dcd_set_address+0x18>)
    24ba:	47a0      	blx	r4
  USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTENCLR_SUSPEND; // clear pending
    24bc:	4b03      	ldr	r3, [pc, #12]	; (24cc <dcd_set_address+0x1c>)
    24be:	2201      	movs	r2, #1
    24c0:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_SUSPEND;
    24c2:	831a      	strh	r2, [r3, #24]
}
    24c4:	bd10      	pop	{r4, pc}
    24c6:	46c0      	nop			; (mov r8, r8)
    24c8:	000023f5 	.word	0x000023f5
    24cc:	41005000 	.word	0x41005000

000024d0 <dcd_edpt_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    24d0:	237f      	movs	r3, #127	; 0x7f
    24d2:	400b      	ands	r3, r1
void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    24d4:	015b      	lsls	r3, r3, #5
    24d6:	4a06      	ldr	r2, [pc, #24]	; (24f0 <dcd_edpt_stall+0x20>)
    24d8:	4694      	mov	ip, r2
    24da:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    24dc:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    24de:	2900      	cmp	r1, #0
    24e0:	db02      	blt.n	24e8 <dcd_edpt_stall+0x18>
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
  } else {
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    24e2:	2210      	movs	r2, #16
    24e4:	715a      	strb	r2, [r3, #5]
  }
}
    24e6:	4770      	bx	lr
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    24e8:	2220      	movs	r2, #32
    24ea:	715a      	strb	r2, [r3, #5]
    24ec:	e7fb      	b.n	24e6 <dcd_edpt_stall+0x16>
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	41005100 	.word	0x41005100

000024f4 <dcd_edpt_clear_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    24f4:	237f      	movs	r3, #127	; 0x7f
    24f6:	400b      	ands	r3, r1
void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    24f8:	015b      	lsls	r3, r3, #5
    24fa:	4a06      	ldr	r2, [pc, #24]	; (2514 <dcd_edpt_clear_stall+0x20>)
    24fc:	4694      	mov	ip, r2
    24fe:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2500:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    2502:	2900      	cmp	r1, #0
    2504:	db02      	blt.n	250c <dcd_edpt_clear_stall+0x18>
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
  } else {
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT;
    2506:	2211      	movs	r2, #17
    2508:	711a      	strb	r2, [r3, #4]
  }
}
    250a:	4770      	bx	lr
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
    250c:	2222      	movs	r2, #34	; 0x22
    250e:	711a      	strb	r2, [r3, #4]
    2510:	e7fb      	b.n	250a <dcd_edpt_clear_stall+0x16>
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	41005100 	.word	0x41005100

00002518 <maybe_transfer_complete>:

//--------------------------------------------------------------------+
// Interrupt Handler
//--------------------------------------------------------------------+
void maybe_transfer_complete(void) {
    2518:	b5f0      	push	{r4, r5, r6, r7, lr}
    251a:	46de      	mov	lr, fp
    251c:	4657      	mov	r7, sl
    251e:	464e      	mov	r6, r9
    2520:	4645      	mov	r5, r8
    2522:	b5e0      	push	{r5, r6, r7, lr}
    2524:	b085      	sub	sp, #20
  uint32_t epints = USB->DEVICE.EPINTSMRY.reg;
    2526:	4b2d      	ldr	r3, [pc, #180]	; (25dc <maybe_transfer_complete+0xc4>)
    2528:	8c1b      	ldrh	r3, [r3, #32]
    252a:	b29b      	uxth	r3, r3
    252c:	4698      	mov	r8, r3

  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    252e:	2400      	movs	r4, #0
    2530:	e022      	b.n	2578 <maybe_transfer_complete+0x60>
    uint32_t epintflag = ep->EPINTFLAG.reg;

    // Handle IN completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_IN];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    2532:	0162      	lsls	r2, r4, #5
    2534:	4b2a      	ldr	r3, [pc, #168]	; (25e0 <maybe_transfer_complete+0xc8>)
    2536:	189b      	adds	r3, r3, r2
    2538:	3310      	adds	r3, #16
    253a:	685b      	ldr	r3, [r3, #4]
    253c:	049b      	lsls	r3, r3, #18
    253e:	0c9b      	lsrs	r3, r3, #18
    2540:	469a      	mov	sl, r3

      dcd_event_xfer_complete(0, epnum | TUSB_DIR_IN_MASK, total_transfer_size, XFER_RESULT_SUCCESS, true);
    2542:	2380      	movs	r3, #128	; 0x80
    2544:	425b      	negs	r3, r3
    2546:	4323      	orrs	r3, r4
    2548:	b2db      	uxtb	r3, r3
    254a:	469b      	mov	fp, r3
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    254c:	af01      	add	r7, sp, #4
    254e:	220c      	movs	r2, #12
    2550:	2100      	movs	r1, #0
    2552:	0038      	movs	r0, r7
    2554:	4b23      	ldr	r3, [pc, #140]	; (25e4 <maybe_transfer_complete+0xcc>)
    2556:	4798      	blx	r3
    2558:	2307      	movs	r3, #7
    255a:	707b      	strb	r3, [r7, #1]

  event.xfer_complete.ep_addr = ep_addr;
    255c:	465b      	mov	r3, fp
    255e:	713b      	strb	r3, [r7, #4]
  event.xfer_complete.len     = xferred_bytes;
    2560:	4653      	mov	r3, sl
    2562:	60bb      	str	r3, [r7, #8]
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
    2564:	2101      	movs	r1, #1
    2566:	0038      	movs	r0, r7
    2568:	4b1f      	ldr	r3, [pc, #124]	; (25e8 <maybe_transfer_complete+0xd0>)
    256a:	4798      	blx	r3

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    256c:	2302      	movs	r3, #2
    256e:	464a      	mov	r2, r9
    2570:	71d3      	strb	r3, [r2, #7]
    2572:	e012      	b.n	259a <maybe_transfer_complete+0x82>
  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    2574:	3401      	adds	r4, #1
    2576:	b2e4      	uxtb	r4, r4
    2578:	2c07      	cmp	r4, #7
    257a:	d828      	bhi.n	25ce <maybe_transfer_complete+0xb6>
    if ((epints & (1 << epnum)) == 0) {
    257c:	0025      	movs	r5, r4
    257e:	2301      	movs	r3, #1
    2580:	40a3      	lsls	r3, r4
    2582:	4642      	mov	r2, r8
    2584:	4213      	tst	r3, r2
    2586:	d0f5      	beq.n	2574 <maybe_transfer_complete+0x5c>
    UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2588:	0163      	lsls	r3, r4, #5
    258a:	4a18      	ldr	r2, [pc, #96]	; (25ec <maybe_transfer_complete+0xd4>)
    258c:	4691      	mov	r9, r2
    258e:	4499      	add	r9, r3
    uint32_t epintflag = ep->EPINTFLAG.reg;
    2590:	464b      	mov	r3, r9
    2592:	79de      	ldrb	r6, [r3, #7]
    2594:	b2f6      	uxtb	r6, r6
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
    2596:	07b3      	lsls	r3, r6, #30
    2598:	d4cb      	bmi.n	2532 <maybe_transfer_complete+0x1a>
    }

    // Handle OUT completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT0) != 0) {
    259a:	07f3      	lsls	r3, r6, #31
    259c:	d5ea      	bpl.n	2574 <maybe_transfer_complete+0x5c>
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_OUT];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    259e:	016d      	lsls	r5, r5, #5
    25a0:	4b0f      	ldr	r3, [pc, #60]	; (25e0 <maybe_transfer_complete+0xc8>)
    25a2:	195d      	adds	r5, r3, r5
    25a4:	686e      	ldr	r6, [r5, #4]
    25a6:	04b6      	lsls	r6, r6, #18
    25a8:	0cb6      	lsrs	r6, r6, #18
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    25aa:	ad01      	add	r5, sp, #4
    25ac:	220c      	movs	r2, #12
    25ae:	2100      	movs	r1, #0
    25b0:	0028      	movs	r0, r5
    25b2:	4b0c      	ldr	r3, [pc, #48]	; (25e4 <maybe_transfer_complete+0xcc>)
    25b4:	4798      	blx	r3
    25b6:	2307      	movs	r3, #7
    25b8:	706b      	strb	r3, [r5, #1]
  event.xfer_complete.ep_addr = ep_addr;
    25ba:	712c      	strb	r4, [r5, #4]
  event.xfer_complete.len     = xferred_bytes;
    25bc:	60ae      	str	r6, [r5, #8]
  dcd_event_handler(&event, in_isr);
    25be:	2101      	movs	r1, #1
    25c0:	0028      	movs	r0, r5
    25c2:	4b09      	ldr	r3, [pc, #36]	; (25e8 <maybe_transfer_complete+0xd0>)
    25c4:	4798      	blx	r3

      dcd_event_xfer_complete(0, epnum, total_transfer_size, XFER_RESULT_SUCCESS, true);

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    25c6:	2301      	movs	r3, #1
    25c8:	464a      	mov	r2, r9
    25ca:	71d3      	strb	r3, [r2, #7]
    25cc:	e7d2      	b.n	2574 <maybe_transfer_complete+0x5c>
    }
  }
}
    25ce:	b005      	add	sp, #20
    25d0:	bc3c      	pop	{r2, r3, r4, r5}
    25d2:	4690      	mov	r8, r2
    25d4:	4699      	mov	r9, r3
    25d6:	46a2      	mov	sl, r4
    25d8:	46ab      	mov	fp, r5
    25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25dc:	41005000 	.word	0x41005000
    25e0:	20000874 	.word	0x20000874
    25e4:	00003261 	.word	0x00003261
    25e8:	00001615 	.word	0x00001615
    25ec:	41005100 	.word	0x41005100

000025f0 <dcd_int_handler>:


void dcd_int_handler (uint8_t rhport)
{
    25f0:	b530      	push	{r4, r5, lr}
    25f2:	b085      	sub	sp, #20
  (void) rhport;

  uint32_t int_status = USB->DEVICE.INTFLAG.reg & USB->DEVICE.INTENSET.reg;
    25f4:	4b39      	ldr	r3, [pc, #228]	; (26dc <dcd_int_handler+0xec>)
    25f6:	8b9a      	ldrh	r2, [r3, #28]
    25f8:	8b1c      	ldrh	r4, [r3, #24]
    25fa:	4014      	ands	r4, r2

  // Start of Frame
  if ( int_status & USB_DEVICE_INTFLAG_SOF )
    25fc:	0763      	lsls	r3, r4, #29
    25fe:	d40f      	bmi.n	2620 <dcd_int_handler+0x30>

  // SAMD doesn't distinguish between Suspend and Disconnect state.
  // Both condition will cause SUSPEND interrupt triggered.
  // To prevent being triggered when D+/D- are not stable, SUSPEND interrupt is only
  // enabled when we received SET_ADDRESS request and cleared on Bus Reset
  if ( int_status & USB_DEVICE_INTFLAG_SUSPEND )
    2600:	07e3      	lsls	r3, r4, #31
    2602:	d41d      	bmi.n	2640 <dcd_int_handler+0x50>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  // Wakeup interrupt is only enabled when we got suspended.
  // Wakeup interrupt will disable itself
  if ( int_status & USB_DEVICE_INTFLAG_WAKEUP )
    2604:	06e3      	lsls	r3, r4, #27
    2606:	d42e      	bmi.n	2666 <dcd_int_handler+0x76>
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  // Enable of Reset
  if ( int_status & USB_DEVICE_INTFLAG_EORST )
    2608:	0723      	lsls	r3, r4, #28
    260a:	d43d      	bmi.n	2688 <dcd_int_handler+0x98>
    bus_reset();
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
  }

  // Handle SETUP packet
  if (USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.bit.RXSTP)
    260c:	2308      	movs	r3, #8
    260e:	33ff      	adds	r3, #255	; 0xff
    2610:	4a32      	ldr	r2, [pc, #200]	; (26dc <dcd_int_handler+0xec>)
    2612:	5cd3      	ldrb	r3, [r2, r3]
    2614:	06db      	lsls	r3, r3, #27
    2616:	d44b      	bmi.n	26b0 <dcd_int_handler+0xc0>
    // Since control status complete event is optional, we can just clear TRCPT0 and skip the status event
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
  }

  // Handle complete transfer
  maybe_transfer_complete();
    2618:	4b31      	ldr	r3, [pc, #196]	; (26e0 <dcd_int_handler+0xf0>)
    261a:	4798      	blx	r3
}
    261c:	b005      	add	sp, #20
    261e:	bd30      	pop	{r4, r5, pc}
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF;
    2620:	2204      	movs	r2, #4
    2622:	4b2e      	ldr	r3, [pc, #184]	; (26dc <dcd_int_handler+0xec>)
    2624:	839a      	strh	r2, [r3, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    2626:	ad01      	add	r5, sp, #4
    2628:	3208      	adds	r2, #8
    262a:	2100      	movs	r1, #0
    262c:	0028      	movs	r0, r5
    262e:	4b2d      	ldr	r3, [pc, #180]	; (26e4 <dcd_int_handler+0xf4>)
    2630:	4798      	blx	r3
    2632:	2303      	movs	r3, #3
    2634:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    2636:	2101      	movs	r1, #1
    2638:	0028      	movs	r0, r5
    263a:	4b2b      	ldr	r3, [pc, #172]	; (26e8 <dcd_int_handler+0xf8>)
    263c:	4798      	blx	r3
    263e:	e7df      	b.n	2600 <dcd_int_handler+0x10>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SUSPEND;
    2640:	4b26      	ldr	r3, [pc, #152]	; (26dc <dcd_int_handler+0xec>)
    2642:	2201      	movs	r2, #1
    2644:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP; // clear pending
    2646:	320f      	adds	r2, #15
    2648:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENSET.reg = USB_DEVICE_INTFLAG_WAKEUP;
    264a:	831a      	strh	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    264c:	ad01      	add	r5, sp, #4
    264e:	3a04      	subs	r2, #4
    2650:	2100      	movs	r1, #0
    2652:	0028      	movs	r0, r5
    2654:	4b23      	ldr	r3, [pc, #140]	; (26e4 <dcd_int_handler+0xf4>)
    2656:	4798      	blx	r3
    2658:	2304      	movs	r3, #4
    265a:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    265c:	2101      	movs	r1, #1
    265e:	0028      	movs	r0, r5
    2660:	4b21      	ldr	r3, [pc, #132]	; (26e8 <dcd_int_handler+0xf8>)
    2662:	4798      	blx	r3
    2664:	e7ce      	b.n	2604 <dcd_int_handler+0x14>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP;
    2666:	4b1d      	ldr	r3, [pc, #116]	; (26dc <dcd_int_handler+0xec>)
    2668:	2210      	movs	r2, #16
    266a:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    266c:	829a      	strh	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    266e:	ad01      	add	r5, sp, #4
    2670:	3a04      	subs	r2, #4
    2672:	2100      	movs	r1, #0
    2674:	0028      	movs	r0, r5
    2676:	4b1b      	ldr	r3, [pc, #108]	; (26e4 <dcd_int_handler+0xf4>)
    2678:	4798      	blx	r3
    267a:	2305      	movs	r3, #5
    267c:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    267e:	2101      	movs	r1, #1
    2680:	0028      	movs	r0, r5
    2682:	4b19      	ldr	r3, [pc, #100]	; (26e8 <dcd_int_handler+0xf8>)
    2684:	4798      	blx	r3
    2686:	e7bf      	b.n	2608 <dcd_int_handler+0x18>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    2688:	4b14      	ldr	r3, [pc, #80]	; (26dc <dcd_int_handler+0xec>)
    268a:	2208      	movs	r2, #8
    268c:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP | USB_DEVICE_INTFLAG_SUSPEND;
    268e:	3209      	adds	r2, #9
    2690:	829a      	strh	r2, [r3, #20]
    bus_reset();
    2692:	4b16      	ldr	r3, [pc, #88]	; (26ec <dcd_int_handler+0xfc>)
    2694:	4798      	blx	r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
    2696:	ac01      	add	r4, sp, #4
    2698:	220c      	movs	r2, #12
    269a:	2100      	movs	r1, #0
    269c:	0020      	movs	r0, r4
    269e:	4b11      	ldr	r3, [pc, #68]	; (26e4 <dcd_int_handler+0xf4>)
    26a0:	4798      	blx	r3
    26a2:	2301      	movs	r3, #1
    26a4:	7063      	strb	r3, [r4, #1]
  dcd_event_handler(&event, in_isr);
    26a6:	2101      	movs	r1, #1
    26a8:	0020      	movs	r0, r4
    26aa:	4b0f      	ldr	r3, [pc, #60]	; (26e8 <dcd_int_handler+0xf8>)
    26ac:	4798      	blx	r3
    26ae:	e7ad      	b.n	260c <dcd_int_handler+0x1c>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
    26b0:	ac01      	add	r4, sp, #4
    26b2:	220c      	movs	r2, #12
    26b4:	2100      	movs	r1, #0
    26b6:	0020      	movs	r0, r4
    26b8:	4b0a      	ldr	r3, [pc, #40]	; (26e4 <dcd_int_handler+0xf4>)
    26ba:	4798      	blx	r3
    26bc:	2306      	movs	r3, #6
    26be:	7063      	strb	r3, [r4, #1]
  memcpy(&event.setup_received, setup, 8);
    26c0:	4a0b      	ldr	r2, [pc, #44]	; (26f0 <dcd_int_handler+0x100>)
    26c2:	ab02      	add	r3, sp, #8
    26c4:	ca03      	ldmia	r2!, {r0, r1}
    26c6:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
    26c8:	2101      	movs	r1, #1
    26ca:	0020      	movs	r0, r4
    26cc:	4b06      	ldr	r3, [pc, #24]	; (26e8 <dcd_int_handler+0xf8>)
    26ce:	4798      	blx	r3
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
    26d0:	2111      	movs	r1, #17
    26d2:	2308      	movs	r3, #8
    26d4:	33ff      	adds	r3, #255	; 0xff
    26d6:	4a01      	ldr	r2, [pc, #4]	; (26dc <dcd_int_handler+0xec>)
    26d8:	54d1      	strb	r1, [r2, r3]
    26da:	e79d      	b.n	2618 <dcd_int_handler+0x28>
    26dc:	41005000 	.word	0x41005000
    26e0:	00002519 	.word	0x00002519
    26e4:	00003261 	.word	0x00003261
    26e8:	00001615 	.word	0x00001615
    26ec:	000021a1 	.word	0x000021a1
    26f0:	20000974 	.word	0x20000974

000026f4 <_ZN6Serial11NoIntEnableEhb>:
//Definition of blank interrupt enable
void Serial::NoIntEnable(SERCOMHAL::SercomID peripheral_id, bool enable)
{
	(void) peripheral_id;
	(void) enable;
}
    26f4:	4770      	bx	lr
	...

000026f8 <_ZN6Serial9Int2ASCIIEmPA10_c>:
//Definition of Integer to ASCII converter
uint32_t Serial::Int2ASCII(uint32_t num, char (*result)[10])
{
    26f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    26fa:	46c6      	mov	lr, r8
    26fc:	b500      	push	{lr}
    26fe:	b082      	sub	sp, #8
    2700:	4688      	mov	r8, r1
	volatile uint32_t temp = num;
    2702:	9001      	str	r0, [sp, #4]
	uint32_t multiplier = 1u;
	uint8_t numel = 1u;
    2704:	2601      	movs	r6, #1
	uint32_t multiplier = 1u;
    2706:	2401      	movs	r4, #1
	//find number of digits
	while(temp / multiplier > 9u)
    2708:	9801      	ldr	r0, [sp, #4]
    270a:	0021      	movs	r1, r4
    270c:	4b12      	ldr	r3, [pc, #72]	; (2758 <_ZN6Serial9Int2ASCIIEmPA10_c+0x60>)
    270e:	4798      	blx	r3
    2710:	2809      	cmp	r0, #9
    2712:	d906      	bls.n	2722 <_ZN6Serial9Int2ASCIIEmPA10_c+0x2a>
	{
		multiplier *= 10u;
    2714:	00a3      	lsls	r3, r4, #2
    2716:	191c      	adds	r4, r3, r4
    2718:	0063      	lsls	r3, r4, #1
    271a:	001c      	movs	r4, r3
		numel++;
    271c:	3601      	adds	r6, #1
    271e:	b2f6      	uxtb	r6, r6
	while(temp / multiplier > 9u)
    2720:	e7f2      	b.n	2708 <_ZN6Serial9Int2ASCIIEmPA10_c+0x10>
    2722:	2500      	movs	r5, #0
	}
	//convert each digit to ASCII and add to buffer
	uint8_t i = 0u;
	while(i < numel)
    2724:	42b5      	cmp	r5, r6
    2726:	da12      	bge.n	274e <_ZN6Serial9Int2ASCIIEmPA10_c+0x56>
	{
		(*result)[i] = temp / multiplier + 48u;
    2728:	9801      	ldr	r0, [sp, #4]
    272a:	4f0b      	ldr	r7, [pc, #44]	; (2758 <_ZN6Serial9Int2ASCIIEmPA10_c+0x60>)
    272c:	0021      	movs	r1, r4
    272e:	47b8      	blx	r7
    2730:	3030      	adds	r0, #48	; 0x30
    2732:	4643      	mov	r3, r8
    2734:	5558      	strb	r0, [r3, r5]
		temp %= multiplier;
    2736:	9801      	ldr	r0, [sp, #4]
    2738:	0021      	movs	r1, r4
    273a:	4b08      	ldr	r3, [pc, #32]	; (275c <_ZN6Serial9Int2ASCIIEmPA10_c+0x64>)
    273c:	4798      	blx	r3
    273e:	9101      	str	r1, [sp, #4]
		multiplier /= 10u;
    2740:	210a      	movs	r1, #10
    2742:	0020      	movs	r0, r4
    2744:	47b8      	blx	r7
    2746:	0004      	movs	r4, r0
		i++;
    2748:	3501      	adds	r5, #1
    274a:	b2ed      	uxtb	r5, r5
	while(i < numel)
    274c:	e7ea      	b.n	2724 <_ZN6Serial9Int2ASCIIEmPA10_c+0x2c>
	}
	return numel;
}
    274e:	0030      	movs	r0, r6
    2750:	b002      	add	sp, #8
    2752:	bc04      	pop	{r2}
    2754:	4690      	mov	r8, r2
    2756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2758:	0000306d 	.word	0x0000306d
    275c:	00003179 	.word	0x00003179

00002760 <_ZN6Serial12SerialBuffer5ResetEPcm>:
		 * \note You must call this before use if constructed without parameters.
		 * \sa GENERIC_BUFFER(), Clear()
		 */
		void ResetBuffer(T* arr, uint32_t arr_size)
		{
			fifo_buffer = arr;
    2760:	6041      	str	r1, [r0, #4]
			buffer_size = arr_size;
    2762:	6082      	str	r2, [r0, #8]
			buffer_avail = 0;
    2764:	2300      	movs	r3, #0
    2766:	60c3      	str	r3, [r0, #12]
			rd_index = 0;
    2768:	6103      	str	r3, [r0, #16]
			wr_index = 0;
    276a:	6143      	str	r3, [r0, #20]
}

void Serial::SerialBuffer::Reset(char * buf, uint32_t buf_size)
{
	buffer.ResetBuffer(buf, buf_size);
	index_shift = 1u;
    276c:	3301      	adds	r3, #1
    276e:	6183      	str	r3, [r0, #24]
}
    2770:	4770      	bx	lr
	...

00002774 <_ZN6Serial12SerialBufferC1EhPcm>:
Serial::SerialBuffer::SerialBuffer(SERCOMHAL::SercomID peripheral_id, char * buf, uint32_t buf_size)
    2774:	b570      	push	{r4, r5, r6, lr}
    2776:	0004      	movs	r4, r0
    2778:	0015      	movs	r5, r2
			fifo_buffer = arr;
    277a:	2000      	movs	r0, #0
    277c:	6060      	str	r0, [r4, #4]
			buffer_size = arr_size;
    277e:	60a0      	str	r0, [r4, #8]
			buffer_avail = 0;
    2780:	60e0      	str	r0, [r4, #12]
			rd_index = 0;
    2782:	6120      	str	r0, [r4, #16]
			wr_index = 0;
    2784:	6160      	str	r0, [r4, #20]
	sercom_id = peripheral_id;
    2786:	7021      	strb	r1, [r4, #0]
	Reset(buf, buf_size);
    2788:	001a      	movs	r2, r3
    278a:	0029      	movs	r1, r5
    278c:	0020      	movs	r0, r4
    278e:	4b02      	ldr	r3, [pc, #8]	; (2798 <_ZN6Serial12SerialBufferC1EhPcm+0x24>)
    2790:	4798      	blx	r3
}
    2792:	0020      	movs	r0, r4
    2794:	bd70      	pop	{r4, r5, r6, pc}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	00002761 	.word	0x00002761

0000279c <_ZN6Serial12SerialBuffer5ClearEv>:
			buffer_avail = 0;
    279c:	2300      	movs	r3, #0
    279e:	60c3      	str	r3, [r0, #12]
			rd_index = 0;
    27a0:	6103      	str	r3, [r0, #16]
			wr_index = 0;
    27a2:	6143      	str	r3, [r0, #20]

void Serial::SerialBuffer::Clear(void)
{
	buffer.Clear();
}
    27a4:	4770      	bx	lr
	...

000027a8 <_ZN6Serial12SerialBufferD1Ev>:
Serial::SerialBuffer::~SerialBuffer(void)
    27a8:	b510      	push	{r4, lr}
    27aa:	0004      	movs	r4, r0
	Clear();
    27ac:	4b01      	ldr	r3, [pc, #4]	; (27b4 <_ZN6Serial12SerialBufferD1Ev+0xc>)
    27ae:	4798      	blx	r3
}
    27b0:	0020      	movs	r0, r4
    27b2:	bd10      	pop	{r4, pc}
    27b4:	0000279d 	.word	0x0000279d

000027b8 <_ZN6Serial12SerialBuffer3PutEcPFvhbE>:

bool Serial::SerialBuffer::Put(char input, void (* int_func)(uint8_t, bool))
{
    27b8:	b570      	push	{r4, r5, r6, lr}
    27ba:	0004      	movs	r4, r0
    27bc:	000e      	movs	r6, r1
    27be:	0015      	movs	r5, r2
	int_func(sercom_id, false);
    27c0:	7800      	ldrb	r0, [r0, #0]
    27c2:	2100      	movs	r1, #0
    27c4:	4790      	blx	r2
		 * \sa Get()
		 */
		bool Put(T element)
		{
			bool success = false;
			if(buffer_avail < buffer_size)
    27c6:	68e3      	ldr	r3, [r4, #12]
    27c8:	68a2      	ldr	r2, [r4, #8]
    27ca:	4293      	cmp	r3, r2
    27cc:	d211      	bcs.n	27f2 <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x3a>
			{
				fifo_buffer[wr_index] = element;
    27ce:	6863      	ldr	r3, [r4, #4]
    27d0:	6962      	ldr	r2, [r4, #20]
    27d2:	549e      	strb	r6, [r3, r2]
				buffer_avail++;
    27d4:	68e3      	ldr	r3, [r4, #12]
    27d6:	3301      	adds	r3, #1
    27d8:	60e3      	str	r3, [r4, #12]
				wr_index = (wr_index+1) % buffer_size;
    27da:	6963      	ldr	r3, [r4, #20]
    27dc:	1c58      	adds	r0, r3, #1
    27de:	68a1      	ldr	r1, [r4, #8]
    27e0:	4b05      	ldr	r3, [pc, #20]	; (27f8 <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x40>)
    27e2:	4798      	blx	r3
    27e4:	6161      	str	r1, [r4, #20]
				success = true;
    27e6:	2601      	movs	r6, #1
	bool success = buffer.Put(input);
	int_func(sercom_id, true);
    27e8:	7820      	ldrb	r0, [r4, #0]
    27ea:	2101      	movs	r1, #1
    27ec:	47a8      	blx	r5
	return success;
}
    27ee:	0030      	movs	r0, r6
    27f0:	bd70      	pop	{r4, r5, r6, pc}
			bool success = false;
    27f2:	2600      	movs	r6, #0
    27f4:	e7f8      	b.n	27e8 <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x30>
    27f6:	46c0      	nop			; (mov r8, r8)
    27f8:	00003179 	.word	0x00003179

000027fc <_ZN6Serial12SerialBuffer3GetEPFvhbEPc>:

bool Serial::SerialBuffer::Get(void (* int_func)(uint8_t, bool), char * output)
{
    27fc:	b570      	push	{r4, r5, r6, lr}
    27fe:	0004      	movs	r4, r0
    2800:	000e      	movs	r6, r1
    2802:	0015      	movs	r5, r2
	int_func(sercom_id, false);
    2804:	7800      	ldrb	r0, [r0, #0]
    2806:	2100      	movs	r1, #0
    2808:	47b0      	blx	r6
		 * \sa Put(), Peek()
		 */
		bool Get(T * output = nullptr)
		{
			bool result = false;
			if(buffer_avail)
    280a:	68e3      	ldr	r3, [r4, #12]
    280c:	2b00      	cmp	r3, #0
    280e:	d01b      	beq.n	2848 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x4c>
			{
				result = true;
				if(output != nullptr) *output = fifo_buffer[rd_index];
    2810:	2d00      	cmp	r5, #0
    2812:	d003      	beq.n	281c <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x20>
    2814:	6863      	ldr	r3, [r4, #4]
    2816:	6922      	ldr	r2, [r4, #16]
    2818:	5c9b      	ldrb	r3, [r3, r2]
    281a:	702b      	strb	r3, [r5, #0]
				rd_index = (rd_index+1) % buffer_size;
    281c:	6923      	ldr	r3, [r4, #16]
    281e:	1c58      	adds	r0, r3, #1
    2820:	68a1      	ldr	r1, [r4, #8]
    2822:	4b0a      	ldr	r3, [pc, #40]	; (284c <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x50>)
    2824:	4798      	blx	r3
    2826:	6121      	str	r1, [r4, #16]
				buffer_avail--;
    2828:	68e3      	ldr	r3, [r4, #12]
    282a:	3b01      	subs	r3, #1
    282c:	60e3      	str	r3, [r4, #12]
				result = true;
    282e:	2501      	movs	r5, #1
	bool result = buffer.Get(output);
	if(result && index_shift) index_shift--;
    2830:	2d00      	cmp	r5, #0
    2832:	d004      	beq.n	283e <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x42>
    2834:	69a3      	ldr	r3, [r4, #24]
    2836:	2b00      	cmp	r3, #0
    2838:	d001      	beq.n	283e <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x42>
    283a:	3b01      	subs	r3, #1
    283c:	61a3      	str	r3, [r4, #24]
	int_func(sercom_id, true);
    283e:	7820      	ldrb	r0, [r4, #0]
    2840:	2101      	movs	r1, #1
    2842:	47b0      	blx	r6
	return result;
}
    2844:	0028      	movs	r0, r5
    2846:	bd70      	pop	{r4, r5, r6, pc}
			bool result = false;
    2848:	2500      	movs	r5, #0
    284a:	e7f1      	b.n	2830 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x34>
    284c:	00003179 	.word	0x00003179

00002850 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE>:

bool Serial::SerialBuffer::GetString(const char *input, uint32_t shift, bool move_pointer, void (* int_func)(uint8_t, bool))
{
    2850:	b5f0      	push	{r4, r5, r6, r7, lr}
    2852:	46ce      	mov	lr, r9
    2854:	4647      	mov	r7, r8
    2856:	b580      	push	{r7, lr}
    2858:	b085      	sub	sp, #20
    285a:	0006      	movs	r6, r0
    285c:	000f      	movs	r7, r1
    285e:	4690      	mov	r8, r2
    2860:	9301      	str	r3, [sp, #4]
	bool has_string = false;
	//prevents checking after initialization or a previous string has been found until new character is received
	while(Get(int_func));
    2862:	2200      	movs	r2, #0
    2864:	990c      	ldr	r1, [sp, #48]	; 0x30
    2866:	0030      	movs	r0, r6
    2868:	4b2e      	ldr	r3, [pc, #184]	; (2924 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0xd4>)
    286a:	4798      	blx	r3
    286c:	1e04      	subs	r4, r0, #0
    286e:	d1f8      	bne.n	2862 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x12>
	if(!index_shift)
    2870:	69b3      	ldr	r3, [r6, #24]
    2872:	2b00      	cmp	r3, #0
    2874:	d12f      	bne.n	28d6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
	{
		has_string = true;
		uint32_t numel = 0;
		//finds size of input string by detecting null character
		while(input[numel] != '\0') numel++;
    2876:	5cfa      	ldrb	r2, [r7, r3]
    2878:	2a00      	cmp	r2, #0
    287a:	d001      	beq.n	2880 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x30>
    287c:	3301      	adds	r3, #1
    287e:	e7fa      	b.n	2876 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x26>
		{
			volatile T output = 0;
			if(buffer_avail) output = fifo_buffer[rd_index];
			return output;
		}
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    2880:	68b2      	ldr	r2, [r6, #8]
    2882:	4694      	mov	ip, r2
			if(read_index != nullptr) *read_index = rd_index;
    2884:	6932      	ldr	r2, [r6, #16]
			return &(fifo_buffer[0]);
    2886:	6870      	ldr	r0, [r6, #4]
		uint32_t i = 0;
		uint32_t rd_index;
		uint32_t bsize = buffer.GetSize();
		char * arr_ref = buffer.GetRawElements(&rd_index);
		uint32_t reader = rd_index + ((shift > rd_index) * bsize) - shift;
    2888:	4542      	cmp	r2, r8
    288a:	4189      	sbcs	r1, r1
    288c:	4249      	negs	r1, r1
    288e:	4664      	mov	r4, ip
    2890:	4361      	muls	r1, r4
    2892:	1851      	adds	r1, r2, r1
    2894:	4642      	mov	r2, r8
    2896:	1a89      	subs	r1, r1, r2
		uint32_t i = 0;
    2898:	2200      	movs	r2, #0
		has_string = true;
    289a:	2401      	movs	r4, #1
    289c:	e008      	b.n	28b0 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x60>
		while(has_string && i < numel)
		{
			//iterates backwards in buffer and input string and checks if each element is equal to each other
			if(reader == 0u) reader = bsize - 1;
			else reader--;
    289e:	3901      	subs	r1, #1
			i++;
    28a0:	3201      	adds	r2, #1
			has_string = (input[numel - i] == arr_ref[reader]);
    28a2:	1a9c      	subs	r4, r3, r2
    28a4:	5d3c      	ldrb	r4, [r7, r4]
    28a6:	5c45      	ldrb	r5, [r0, r1]
    28a8:	1b64      	subs	r4, r4, r5
    28aa:	4265      	negs	r5, r4
    28ac:	4165      	adcs	r5, r4
    28ae:	b2ec      	uxtb	r4, r5
		while(has_string && i < numel)
    28b0:	2c00      	cmp	r4, #0
    28b2:	d006      	beq.n	28c2 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x72>
    28b4:	4293      	cmp	r3, r2
    28b6:	d904      	bls.n	28c2 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x72>
			if(reader == 0u) reader = bsize - 1;
    28b8:	2900      	cmp	r1, #0
    28ba:	d1f0      	bne.n	289e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x4e>
    28bc:	4661      	mov	r1, ip
    28be:	3901      	subs	r1, #1
    28c0:	e7ee      	b.n	28a0 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x50>
		}
		if(has_string)
    28c2:	2c00      	cmp	r4, #0
    28c4:	d007      	beq.n	28d6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
		{
			index_shift = 1u;
    28c6:	2301      	movs	r3, #1
    28c8:	61b3      	str	r3, [r6, #24]
			if(move_pointer && shift > 0u)
    28ca:	9b01      	ldr	r3, [sp, #4]
    28cc:	2b00      	cmp	r3, #0
    28ce:	d002      	beq.n	28d6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
    28d0:	4643      	mov	r3, r8
    28d2:	2b00      	cmp	r3, #0
    28d4:	d105      	bne.n	28e2 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x92>
				int_func(sercom_id, true);
			}
		}
	}
	return has_string;
}
    28d6:	0020      	movs	r0, r4
    28d8:	b005      	add	sp, #20
    28da:	bc0c      	pop	{r2, r3}
    28dc:	4690      	mov	r8, r2
    28de:	4699      	mov	r9, r3
    28e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int_func(sercom_id, false);
    28e2:	7830      	ldrb	r0, [r6, #0]
    28e4:	2100      	movs	r1, #0
    28e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    28e8:	4798      	blx	r3
			volatile uint32_t true_shift = shift_size;
    28ea:	4643      	mov	r3, r8
    28ec:	9303      	str	r3, [sp, #12]
			else if(!increase && (shift_size > buffer_size))
    28ee:	68b0      	ldr	r0, [r6, #8]
    28f0:	4580      	cmp	r8, r0
    28f2:	d900      	bls.n	28f6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0xa6>
				true_shift = buffer_size;
    28f4:	9003      	str	r0, [sp, #12]
				rd_index = rd_index + ((true_shift > rd_index) * buffer_size) - true_shift;	
    28f6:	6931      	ldr	r1, [r6, #16]
    28f8:	9a03      	ldr	r2, [sp, #12]
    28fa:	4291      	cmp	r1, r2
    28fc:	4192      	sbcs	r2, r2
    28fe:	4253      	negs	r3, r2
    2900:	4343      	muls	r3, r0
    2902:	18cb      	adds	r3, r1, r3
    2904:	9903      	ldr	r1, [sp, #12]
    2906:	1a5b      	subs	r3, r3, r1
    2908:	6133      	str	r3, [r6, #16]
				buffer_avail += true_shift;
    290a:	9b03      	ldr	r3, [sp, #12]
    290c:	68f2      	ldr	r2, [r6, #12]
    290e:	4694      	mov	ip, r2
    2910:	4463      	add	r3, ip
    2912:	60f3      	str	r3, [r6, #12]
				index_shift += shift;
    2914:	69b3      	ldr	r3, [r6, #24]
    2916:	4443      	add	r3, r8
    2918:	61b3      	str	r3, [r6, #24]
				int_func(sercom_id, true);
    291a:	7830      	ldrb	r0, [r6, #0]
    291c:	2101      	movs	r1, #1
    291e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2920:	4798      	blx	r3
    2922:	e7d8      	b.n	28d6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
    2924:	000027fd 	.word	0x000027fd

00002928 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE>:

bool Serial::SerialBuffer::GetASCIIAsInt(uint32_t * output, void (* int_func)(uint8_t, bool))
{
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	b083      	sub	sp, #12
    292c:	0006      	movs	r6, r0
    292e:	000f      	movs	r7, r1
    2930:	0014      	movs	r4, r2
	bool result = false;
	*output = 0u;
    2932:	2300      	movs	r3, #0
    2934:	600b      	str	r3, [r1, #0]
			volatile T output = 0;
    2936:	466a      	mov	r2, sp
    2938:	7193      	strb	r3, [r2, #6]
			if(buffer_avail) output = fifo_buffer[rd_index];
    293a:	68c3      	ldr	r3, [r0, #12]
    293c:	2b00      	cmp	r3, #0
    293e:	d004      	beq.n	294a <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x22>
    2940:	6843      	ldr	r3, [r0, #4]
    2942:	6902      	ldr	r2, [r0, #16]
    2944:	5c9a      	ldrb	r2, [r3, r2]
    2946:	466b      	mov	r3, sp
    2948:	719a      	strb	r2, [r3, #6]
			return output;
    294a:	466b      	mov	r3, sp
    294c:	799d      	ldrb	r5, [r3, #6]
    294e:	b2ed      	uxtb	r5, r5
	bool result = false;
    2950:	2000      	movs	r0, #0
    2952:	e002      	b.n	295a <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x32>
    2954:	466b      	mov	r3, sp
    2956:	79dd      	ldrb	r5, [r3, #7]
	unsigned char received = buffer.Peek();
	while(received > 47u && received < 58u)
	{
		result = true;
    2958:	2001      	movs	r0, #1
	while(received > 47u && received < 58u)
    295a:	002b      	movs	r3, r5
    295c:	3b30      	subs	r3, #48	; 0x30
    295e:	b2db      	uxtb	r3, r3
    2960:	2b09      	cmp	r3, #9
    2962:	d817      	bhi.n	2994 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x6c>
		Get(int_func);
    2964:	2200      	movs	r2, #0
    2966:	0021      	movs	r1, r4
    2968:	0030      	movs	r0, r6
    296a:	4b0b      	ldr	r3, [pc, #44]	; (2998 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x70>)
    296c:	4798      	blx	r3
		*output *= 10u;
    296e:	683b      	ldr	r3, [r7, #0]
    2970:	009a      	lsls	r2, r3, #2
    2972:	18d2      	adds	r2, r2, r3
    2974:	0053      	lsls	r3, r2, #1
		*output += received - 48u;
    2976:	18eb      	adds	r3, r5, r3
    2978:	3b30      	subs	r3, #48	; 0x30
    297a:	603b      	str	r3, [r7, #0]
			volatile T output = 0;
    297c:	2200      	movs	r2, #0
    297e:	466b      	mov	r3, sp
    2980:	71da      	strb	r2, [r3, #7]
			if(buffer_avail) output = fifo_buffer[rd_index];
    2982:	68f3      	ldr	r3, [r6, #12]
    2984:	2b00      	cmp	r3, #0
    2986:	d0e5      	beq.n	2954 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x2c>
    2988:	6873      	ldr	r3, [r6, #4]
    298a:	6932      	ldr	r2, [r6, #16]
    298c:	5c9a      	ldrb	r2, [r3, r2]
    298e:	466b      	mov	r3, sp
    2990:	71da      	strb	r2, [r3, #7]
    2992:	e7df      	b.n	2954 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x2c>
		received = buffer.Peek();
	}
	return result;
}
    2994:	b003      	add	sp, #12
    2996:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2998:	000027fd 	.word	0x000027fd

0000299c <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE>:

bool Serial::SerialBuffer::GetIntParam(uint32_t * output, const char *input, char delimiter, uint8_t max_digits, void (* int_func)(uint8_t, bool))
{
    299c:	b5f0      	push	{r4, r5, r6, r7, lr}
    299e:	46de      	mov	lr, fp
    29a0:	b500      	push	{lr}
    29a2:	b088      	sub	sp, #32
    29a4:	9002      	str	r0, [sp, #8]
    29a6:	9104      	str	r1, [sp, #16]
    29a8:	9203      	str	r2, [sp, #12]
    29aa:	9305      	str	r3, [sp, #20]
    29ac:	ab0e      	add	r3, sp, #56	; 0x38
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	469b      	mov	fp, r3
    29b2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	bool result = false;
	uint8_t i = 1u;
    29b4:	2501      	movs	r5, #1
    29b6:	e004      	b.n	29c2 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x26>
	while(!GetString(input, i, true, int_func) && i < max_digits+1u) i++;
    29b8:	2700      	movs	r7, #0
    29ba:	2f00      	cmp	r7, #0
    29bc:	d013      	beq.n	29e6 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x4a>
    29be:	3501      	adds	r5, #1
    29c0:	b2ed      	uxtb	r5, r5
    29c2:	002c      	movs	r4, r5
    29c4:	9600      	str	r6, [sp, #0]
    29c6:	2301      	movs	r3, #1
    29c8:	002a      	movs	r2, r5
    29ca:	9903      	ldr	r1, [sp, #12]
    29cc:	9802      	ldr	r0, [sp, #8]
    29ce:	4f26      	ldr	r7, [pc, #152]	; (2a68 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xcc>)
    29d0:	47b8      	blx	r7
    29d2:	2800      	cmp	r0, #0
    29d4:	d1f0      	bne.n	29b8 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1c>
    29d6:	465b      	mov	r3, fp
    29d8:	3301      	adds	r3, #1
    29da:	429d      	cmp	r5, r3
    29dc:	d301      	bcc.n	29e2 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x46>
    29de:	2700      	movs	r7, #0
    29e0:	e7eb      	b.n	29ba <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1e>
    29e2:	2701      	movs	r7, #1
    29e4:	e7e9      	b.n	29ba <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1e>
	if(i<max_digits+1u)
    29e6:	465b      	mov	r3, fp
    29e8:	3301      	adds	r3, #1
    29ea:	429c      	cmp	r4, r3
    29ec:	d236      	bcs.n	2a5c <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    29ee:	9902      	ldr	r1, [sp, #8]
    29f0:	688a      	ldr	r2, [r1, #8]
			if(read_index != nullptr) *read_index = rd_index;
    29f2:	690b      	ldr	r3, [r1, #16]
			return &(fifo_buffer[0]);
    29f4:	684c      	ldr	r4, [r1, #4]
	{
		volatile uint32_t temp_index;
		uint32_t rd_index;
		uint32_t bsize = buffer.GetSize();
		char * arr_ref = buffer.GetRawElements(&rd_index);
		if(rd_index == 0u) temp_index = bsize - 1;
    29f6:	2b00      	cmp	r3, #0
    29f8:	d113      	bne.n	2a22 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x86>
    29fa:	3a01      	subs	r2, #1
    29fc:	9207      	str	r2, [sp, #28]
		else temp_index = rd_index - 1u;
		if(GetASCIIAsInt(output, int_func))
    29fe:	0032      	movs	r2, r6
    2a00:	9904      	ldr	r1, [sp, #16]
    2a02:	9802      	ldr	r0, [sp, #8]
    2a04:	4b19      	ldr	r3, [pc, #100]	; (2a6c <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xd0>)
    2a06:	4798      	blx	r3
    2a08:	1e03      	subs	r3, r0, #0
    2a0a:	d026      	beq.n	2a5a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xbe>
		{
			char read_delimiter;
			if(!delimiter || (delimiter && Get(int_func, &read_delimiter) && read_delimiter == delimiter))
    2a0c:	9a05      	ldr	r2, [sp, #20]
    2a0e:	2a00      	cmp	r2, #0
    2a10:	d10a      	bne.n	2a28 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x8c>
    2a12:	2b00      	cmp	r3, #0
    2a14:	d01c      	beq.n	2a50 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xb4>
			{
				result = true;
				arr_ref[temp_index] = '\0';
    2a16:	9a07      	ldr	r2, [sp, #28]
    2a18:	18a4      	adds	r4, r4, r2
    2a1a:	2200      	movs	r2, #0
    2a1c:	7022      	strb	r2, [r4, #0]
				result = true;
    2a1e:	001f      	movs	r7, r3
    2a20:	e01c      	b.n	2a5c <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
		else temp_index = rd_index - 1u;
    2a22:	3b01      	subs	r3, #1
    2a24:	9307      	str	r3, [sp, #28]
    2a26:	e7ea      	b.n	29fe <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x62>
			if(!delimiter || (delimiter && Get(int_func, &read_delimiter) && read_delimiter == delimiter))
    2a28:	220b      	movs	r2, #11
    2a2a:	ab04      	add	r3, sp, #16
    2a2c:	469c      	mov	ip, r3
    2a2e:	4462      	add	r2, ip
    2a30:	0031      	movs	r1, r6
    2a32:	9802      	ldr	r0, [sp, #8]
    2a34:	4b0e      	ldr	r3, [pc, #56]	; (2a70 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xd4>)
    2a36:	4798      	blx	r3
    2a38:	1e03      	subs	r3, r0, #0
    2a3a:	d0ea      	beq.n	2a12 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
    2a3c:	220b      	movs	r2, #11
    2a3e:	a904      	add	r1, sp, #16
    2a40:	468c      	mov	ip, r1
    2a42:	4462      	add	r2, ip
    2a44:	7812      	ldrb	r2, [r2, #0]
    2a46:	9905      	ldr	r1, [sp, #20]
    2a48:	4291      	cmp	r1, r2
    2a4a:	d0e2      	beq.n	2a12 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
    2a4c:	003b      	movs	r3, r7
    2a4e:	e7e0      	b.n	2a12 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
			} else {
				*output = '\0';
    2a50:	2200      	movs	r2, #0
    2a52:	9904      	ldr	r1, [sp, #16]
    2a54:	600a      	str	r2, [r1, #0]
	bool result = false;
    2a56:	001f      	movs	r7, r3
    2a58:	e000      	b.n	2a5c <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
    2a5a:	0007      	movs	r7, r0
			}
		}
	}
	return result;
}
    2a5c:	0038      	movs	r0, r7
    2a5e:	b008      	add	sp, #32
    2a60:	bc04      	pop	{r2}
    2a62:	4693      	mov	fp, r2
    2a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	00002851 	.word	0x00002851
    2a6c:	00002929 	.word	0x00002929
    2a70:	000027fd 	.word	0x000027fd

00002a74 <_ZNK6Serial12SerialBuffer14GetBufferEmptyEv>:
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    2a74:	6883      	ldr	r3, [r0, #8]
		uint32_t GetBufferAvailable(void) const { return buffer_avail; }	//!< Getter for length/number of elements available in buffer.
    2a76:	68c0      	ldr	r0, [r0, #12]
	return buffer.GetBufferAvailable();
}

uint32_t Serial::SerialBuffer::GetBufferEmpty(void) const
{
	return buffer.GetSize() - buffer.GetBufferAvailable();
    2a78:	1a18      	subs	r0, r3, r0
}
    2a7a:	4770      	bx	lr

00002a7c <_ZNK6Serial12SerialBuffer14GetBufferStateEv>:
			
		BufferState GetBufferState(void) const								//!< Getter for buffer state (Empty, Full, NotEmptyNotFull)
		{
			if(!buffer_avail)
    2a7c:	68c3      	ldr	r3, [r0, #12]
    2a7e:	2b00      	cmp	r3, #0
    2a80:	d006      	beq.n	2a90 <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0x14>
				return BufferState::Empty;
			if(buffer_avail == buffer_size)
    2a82:	6882      	ldr	r2, [r0, #8]
    2a84:	4293      	cmp	r3, r2
    2a86:	d001      	beq.n	2a8c <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0x10>
				return BufferState::Full;
			return BufferState::NotEmptyNotFull;
    2a88:	2002      	movs	r0, #2

GenericBuffer::BufferState Serial::SerialBuffer::GetBufferState(void) const
{
	return buffer.GetBufferState();
}
    2a8a:	4770      	bx	lr
				return BufferState::Full;
    2a8c:	2001      	movs	r0, #1
    2a8e:	e7fc      	b.n	2a8a <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0xe>
				return BufferState::Empty;
    2a90:	2000      	movs	r0, #0
    2a92:	e7fa      	b.n	2a8a <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0xe>

00002a94 <_ZN9SerialUSB15USBFeedIOClocksEv>:
#include "sam.h"

void SerialUSB::USBFeedIOClocks(void)
{
	//preset: 8MHz osc set and enabled, fed into clock generator 0
	NVMCTRL->CTRLB.bit.RWS = 1;
    2a94:	4931      	ldr	r1, [pc, #196]	; (2b5c <_ZN9SerialUSB15USBFeedIOClocksEv+0xc8>)
    2a96:	684a      	ldr	r2, [r1, #4]
    2a98:	231e      	movs	r3, #30
    2a9a:	439a      	bics	r2, r3
    2a9c:	3b1c      	subs	r3, #28
    2a9e:	4313      	orrs	r3, r2
    2aa0:	604b      	str	r3, [r1, #4]
	
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2aa2:	4b2f      	ldr	r3, [pc, #188]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2aa4:	68db      	ldr	r3, [r3, #12]
    2aa6:	06db      	lsls	r3, r3, #27
    2aa8:	d5fb      	bpl.n	2aa2 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe>
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2aaa:	2202      	movs	r2, #2
    2aac:	4b2c      	ldr	r3, [pc, #176]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2aae:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2ab0:	4b2b      	ldr	r3, [pc, #172]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2ab2:	68db      	ldr	r3, [r3, #12]
    2ab4:	06db      	lsls	r3, r3, #27
    2ab6:	d5fb      	bpl.n	2ab0 <_ZN9SerialUSB15USBFeedIOClocksEv+0x1c>
	
	uint32_t coarse =
		((*(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR) & FUSES_DFLL48M_COARSE_CAL_Msk) >> FUSES_DFLL48M_COARSE_CAL_Pos;
    2ab8:	4b2a      	ldr	r3, [pc, #168]	; (2b64 <_ZN9SerialUSB15USBFeedIOClocksEv+0xd0>)
    2aba:	681a      	ldr	r2, [r3, #0]
    2abc:	0e92      	lsrs	r2, r2, #26
	uint32_t fine =
		((*(uint32_t*)FUSES_DFLL48M_FINE_CAL_ADDR) & FUSES_DFLL48M_FINE_CAL_Msk) >> FUSES_DFLL48M_FINE_CAL_Pos;
    2abe:	4b2a      	ldr	r3, [pc, #168]	; (2b68 <_ZN9SerialUSB15USBFeedIOClocksEv+0xd4>)
    2ac0:	681b      	ldr	r3, [r3, #0]
    2ac2:	059b      	lsls	r3, r3, #22
    2ac4:	0d9b      	lsrs	r3, r3, #22
	SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    2ac6:	0292      	lsls	r2, r2, #10
    2ac8:	4313      	orrs	r3, r2
    2aca:	4a25      	ldr	r2, [pc, #148]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2acc:	6293      	str	r3, [r2, #40]	; 0x28
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2ace:	4b24      	ldr	r3, [pc, #144]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2ad0:	68db      	ldr	r3, [r3, #12]
    2ad2:	06db      	lsls	r3, r3, #27
    2ad4:	d5fb      	bpl.n	2ace <_ZN9SerialUSB15USBFeedIOClocksEv+0x3a>
	
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_USBCRM | SYSCTRL_DFLLCTRL_CCDIS;
    2ad6:	4b22      	ldr	r3, [pc, #136]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2ad8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    2ada:	2190      	movs	r1, #144	; 0x90
    2adc:	0049      	lsls	r1, r1, #1
    2ade:	430a      	orrs	r2, r1
    2ae0:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL->DFLLMUL.reg =  SYSCTRL_DFLLMUL_MUL(48000) | SYSCTRL_DFLLMUL_FSTEP(1) | SYSCTRL_DFLLMUL_CSTEP(1);
    2ae2:	4a22      	ldr	r2, [pc, #136]	; (2b6c <_ZN9SerialUSB15USBFeedIOClocksEv+0xd8>)
    2ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	
	/* Closed loop mode */
	SYSCTRL->DFLLCTRL.bit.MODE = 1;
    2ae6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    2ae8:	2104      	movs	r1, #4
    2aea:	430a      	orrs	r2, r1
    2aec:	849a      	strh	r2, [r3, #36]	; 0x24
	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    2aee:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    2af0:	2102      	movs	r1, #2
    2af2:	430a      	orrs	r2, r1
    2af4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    2af6:	4b1a      	ldr	r3, [pc, #104]	; (2b60 <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    2af8:	68db      	ldr	r3, [r3, #12]
    2afa:	06db      	lsls	r3, r3, #27
    2afc:	d5fb      	bpl.n	2af6 <_ZN9SerialUSB15USBFeedIOClocksEv+0x62>
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC(GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
    2afe:	4a1c      	ldr	r2, [pc, #112]	; (2b70 <_ZN9SerialUSB15USBFeedIOClocksEv+0xdc>)
    2b00:	4b1c      	ldr	r3, [pc, #112]	; (2b74 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    2b02:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);
    2b04:	4b1b      	ldr	r3, [pc, #108]	; (2b74 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    2b06:	785b      	ldrb	r3, [r3, #1]
    2b08:	09db      	lsrs	r3, r3, #7
    2b0a:	d1fb      	bne.n	2b04 <_ZN9SerialUSB15USBFeedIOClocksEv+0x70>

	PM->APBBMASK.bit.USB_ = 0x1u;
    2b0c:	4b1a      	ldr	r3, [pc, #104]	; (2b78 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe4>)
    2b0e:	69d9      	ldr	r1, [r3, #28]
    2b10:	2220      	movs	r2, #32
    2b12:	430a      	orrs	r2, r1
    2b14:	61da      	str	r2, [r3, #28]
	PM->AHBMASK.bit.USB_ = 0x1u;
    2b16:	6959      	ldr	r1, [r3, #20]
    2b18:	2240      	movs	r2, #64	; 0x40
    2b1a:	430a      	orrs	r2, r1
    2b1c:	615a      	str	r2, [r3, #20]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_USB;
    2b1e:	4a17      	ldr	r2, [pc, #92]	; (2b7c <_ZN9SerialUSB15USBFeedIOClocksEv+0xe8>)
    2b20:	4b14      	ldr	r3, [pc, #80]	; (2b74 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    2b22:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY);
    2b24:	4b13      	ldr	r3, [pc, #76]	; (2b74 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    2b26:	785b      	ldrb	r3, [r3, #1]
    2b28:	09db      	lsrs	r3, r3, #7
    2b2a:	d1fb      	bne.n	2b24 <_ZN9SerialUSB15USBFeedIOClocksEv+0x90>
	PORT->Group[0].DIRSET.reg = 0x1u << 23u;
    2b2c:	4b14      	ldr	r3, [pc, #80]	; (2b80 <_ZN9SerialUSB15USBFeedIOClocksEv+0xec>)
    2b2e:	2280      	movs	r2, #128	; 0x80
    2b30:	0412      	lsls	r2, r2, #16
    2b32:	609a      	str	r2, [r3, #8]
	PORT->Group[0].DIRSET.reg = 0x1u << 24u;
    2b34:	2280      	movs	r2, #128	; 0x80
    2b36:	0452      	lsls	r2, r2, #17
    2b38:	609a      	str	r2, [r3, #8]
	PORT->Group[0].DIRSET.reg = 0x1u << 25u;
    2b3a:	2280      	movs	r2, #128	; 0x80
    2b3c:	0492      	lsls	r2, r2, #18
    2b3e:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXO(6u);
    2b40:	2160      	movs	r1, #96	; 0x60
    2b42:	223b      	movs	r2, #59	; 0x3b
    2b44:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[23].reg = PORT_PINCFG_PMUXEN;
    2b46:	3a3a      	subs	r2, #58	; 0x3a
    2b48:	3909      	subs	r1, #9
    2b4a:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[12].reg = PORT_PMUX_PMUXO(6u) | PORT_PMUX_PMUXE(6u);
    2b4c:	2066      	movs	r0, #102	; 0x66
    2b4e:	391b      	subs	r1, #27
    2b50:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[24].reg = PORT_PINCFG_PMUXEN;
    2b52:	311c      	adds	r1, #28
    2b54:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[25].reg = PORT_PINCFG_PMUXEN;
    2b56:	3101      	adds	r1, #1
    2b58:	545a      	strb	r2, [r3, r1]
}
    2b5a:	4770      	bx	lr
    2b5c:	41004000 	.word	0x41004000
    2b60:	40000800 	.word	0x40000800
    2b64:	00806024 	.word	0x00806024
    2b68:	00806028 	.word	0x00806028
    2b6c:	0401bb80 	.word	0x0401bb80
    2b70:	00030700 	.word	0x00030700
    2b74:	40000c00 	.word	0x40000c00
    2b78:	40000400 	.word	0x40000400
    2b7c:	00004006 	.word	0x00004006
    2b80:	41004400 	.word	0x41004400

00002b84 <_ZN9SerialUSB13USBControllerC1Ev>:
void SerialUSB::USBFeedIOClocks(void) {}
void SerialUSB::ResetUSB(void) {}
#endif

//Definition of Controller Class
SerialUSB::USBController::USBController(void)
    2b84:	b570      	push	{r4, r5, r6, lr}
    2b86:	0004      	movs	r4, r0
    2b88:	2300      	movs	r3, #0
    2b8a:	2200      	movs	r2, #0
    2b8c:	2100      	movs	r1, #0
    2b8e:	4d04      	ldr	r5, [pc, #16]	; (2ba0 <_ZN9SerialUSB13USBControllerC1Ev+0x1c>)
    2b90:	47a8      	blx	r5
{
	usb_on = false;
    2b92:	2300      	movs	r3, #0
    2b94:	7723      	strb	r3, [r4, #28]
	detached = true;
    2b96:	3301      	adds	r3, #1
    2b98:	7763      	strb	r3, [r4, #29]
	//ResetUSB();
}
    2b9a:	0020      	movs	r0, r4
    2b9c:	bd70      	pop	{r4, r5, r6, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	00002775 	.word	0x00002775

00002ba4 <_ZN9SerialUSB13USBController11ResetBufferEPcm>:
		usb_on = false;
	}
}

void SerialUSB::USBController::ResetBuffer(char * buf, uint32_t buf_size)
{
    2ba4:	b510      	push	{r4, lr}
	usb_buffer.Reset(buf, buf_size);
    2ba6:	4b01      	ldr	r3, [pc, #4]	; (2bac <_ZN9SerialUSB13USBController11ResetBufferEPcm+0x8>)
    2ba8:	4798      	blx	r3
}
    2baa:	bd10      	pop	{r4, pc}
    2bac:	00002761 	.word	0x00002761

00002bb0 <_ZN9SerialUSB13USBController12ClearBuffersEbb>:

void SerialUSB::USBController::ClearBuffers(bool clear_tx, bool clear_rx)
{
    2bb0:	b570      	push	{r4, r5, r6, lr}
    2bb2:	0005      	movs	r5, r0
    2bb4:	0014      	movs	r4, r2
	if(clear_tx) tud_cdc_write_clear();
    2bb6:	2900      	cmp	r1, #0
    2bb8:	d102      	bne.n	2bc0 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x10>
	if(clear_rx) usb_buffer.Clear();
    2bba:	2c00      	cmp	r4, #0
    2bbc:	d104      	bne.n	2bc8 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x18>
}
    2bbe:	bd70      	pop	{r4, r5, r6, pc}
  return tud_cdc_n_write_available(0);
}

static inline bool tud_cdc_write_clear(void)
{
  return tud_cdc_n_write_clear(0);
    2bc0:	2000      	movs	r0, #0
    2bc2:	4b03      	ldr	r3, [pc, #12]	; (2bd0 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x20>)
    2bc4:	4798      	blx	r3
    2bc6:	e7f8      	b.n	2bba <_ZN9SerialUSB13USBController12ClearBuffersEbb+0xa>
	if(clear_rx) usb_buffer.Clear();
    2bc8:	0028      	movs	r0, r5
    2bca:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x24>)
    2bcc:	4798      	blx	r3
}
    2bce:	e7f6      	b.n	2bbe <_ZN9SerialUSB13USBController12ClearBuffersEbb+0xe>
    2bd0:	0000079d 	.word	0x0000079d
    2bd4:	0000279d 	.word	0x0000279d

00002bd8 <_ZN9SerialUSB13USBController3ISREv>:

void SerialUSB::USBController::ISR(void)
{
    2bd8:	b510      	push	{r4, lr}
	#if (CFG_TUSB_MCU != OPT_MCU_NONE)
	tud_int_handler(0);
    2bda:	2000      	movs	r0, #0
    2bdc:	4b01      	ldr	r3, [pc, #4]	; (2be4 <_ZN9SerialUSB13USBController3ISREv+0xc>)
    2bde:	4798      	blx	r3
	#endif
}
    2be0:	bd10      	pop	{r4, pc}
    2be2:	46c0      	nop			; (mov r8, r8)
    2be4:	000025f1 	.word	0x000025f1

00002be8 <_ZN9SerialUSB13USBController8TransmitEc>:
		tud_task();
	}
}

bool SerialUSB::USBController::Transmit(char input)
{
    2be8:	b500      	push	{lr}
    2bea:	b083      	sub	sp, #12
	bool success = false;
	if(usb_on) success = tud_cdc_write_char(input);
    2bec:	7f00      	ldrb	r0, [r0, #28]
    2bee:	2800      	cmp	r0, #0
    2bf0:	d101      	bne.n	2bf6 <_ZN9SerialUSB13USBController8TransmitEc+0xe>
	return success;
}
    2bf2:	b003      	add	sp, #12
    2bf4:	bd00      	pop	{pc}
    2bf6:	466b      	mov	r3, sp
    2bf8:	71d9      	strb	r1, [r3, #7]
    2bfa:	3307      	adds	r3, #7
  return tud_cdc_n_write(itf, &ch, 1);
    2bfc:	2201      	movs	r2, #1
    2bfe:	0019      	movs	r1, r3
    2c00:	2000      	movs	r0, #0
    2c02:	4b03      	ldr	r3, [pc, #12]	; (2c10 <_ZN9SerialUSB13USBController8TransmitEc+0x28>)
    2c04:	4798      	blx	r3
	if(usb_on) success = tud_cdc_write_char(input);
    2c06:	1e43      	subs	r3, r0, #1
    2c08:	4198      	sbcs	r0, r3
    2c0a:	b2c0      	uxtb	r0, r0
    2c0c:	e7f1      	b.n	2bf2 <_ZN9SerialUSB13USBController8TransmitEc+0xa>
    2c0e:	46c0      	nop			; (mov r8, r8)
    2c10:	00000759 	.word	0x00000759

00002c14 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm>:
	if(usb_on) received = usb_buffer.Get(&(Serial::NoIntEnable), output);
	return received;
}

bool SerialUSB::USBController::TransmitPacket(const char * input, uint32_t num_bytes)
{
    2c14:	b570      	push	{r4, r5, r6, lr}
    2c16:	0014      	movs	r4, r2
	bool success = false;
	if(usb_on)
    2c18:	7f00      	ldrb	r0, [r0, #28]
    2c1a:	2800      	cmp	r0, #0
    2c1c:	d100      	bne.n	2c20 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0xc>
		uint32_t count = tud_cdc_write(input, num_bytes);
		tud_cdc_write_flush();
		success = count == num_bytes;
	}
	return success;
}
    2c1e:	bd70      	pop	{r4, r5, r6, pc}
  return tud_cdc_n_write(0, buffer, bufsize);
    2c20:	2000      	movs	r0, #0
    2c22:	4b05      	ldr	r3, [pc, #20]	; (2c38 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0x24>)
    2c24:	4798      	blx	r3
    2c26:	0005      	movs	r5, r0
  return tud_cdc_n_write_flush(0);
    2c28:	2000      	movs	r0, #0
    2c2a:	4b04      	ldr	r3, [pc, #16]	; (2c3c <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0x28>)
    2c2c:	4798      	blx	r3
		success = count == num_bytes;
    2c2e:	1b64      	subs	r4, r4, r5
    2c30:	4260      	negs	r0, r4
    2c32:	4160      	adcs	r0, r4
    2c34:	b2c0      	uxtb	r0, r0
    2c36:	e7f2      	b.n	2c1e <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0xa>
    2c38:	00000759 	.word	0x00000759
    2c3c:	00000689 	.word	0x00000689

00002c40 <_ZN9SerialUSB13USBController14TransmitStringEPKc>:

uint32_t SerialUSB::USBController::TransmitString(const char *input)
{
    2c40:	b510      	push	{r4, lr}
    2c42:	000c      	movs	r4, r1
	uint32_t count = 0;
	if(usb_on)
    2c44:	7f03      	ldrb	r3, [r0, #28]
    2c46:	2b00      	cmp	r3, #0
    2c48:	d102      	bne.n	2c50 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x10>
	uint32_t count = 0;
    2c4a:	2400      	movs	r4, #0
	{
		count = tud_cdc_write_str(input);
		tud_cdc_write_flush();
	}
	return count;
}
    2c4c:	0020      	movs	r0, r4
    2c4e:	bd10      	pop	{r4, pc}
  return tud_cdc_n_write(itf, str, strlen(str));
    2c50:	0008      	movs	r0, r1
    2c52:	4b06      	ldr	r3, [pc, #24]	; (2c6c <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x2c>)
    2c54:	4798      	blx	r3
    2c56:	0002      	movs	r2, r0
    2c58:	0021      	movs	r1, r4
    2c5a:	2000      	movs	r0, #0
    2c5c:	4b04      	ldr	r3, [pc, #16]	; (2c70 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x30>)
    2c5e:	4798      	blx	r3
    2c60:	0004      	movs	r4, r0
  return tud_cdc_n_write_flush(0);
    2c62:	2000      	movs	r0, #0
    2c64:	4b03      	ldr	r3, [pc, #12]	; (2c74 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x34>)
    2c66:	4798      	blx	r3
    2c68:	e7f0      	b.n	2c4c <_ZN9SerialUSB13USBController14TransmitStringEPKc+0xc>
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	000032f5 	.word	0x000032f5
    2c70:	00000759 	.word	0x00000759
    2c74:	00000689 	.word	0x00000689

00002c78 <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb>:

bool SerialUSB::USBController::ReceiveString(const char *input, uint32_t shift, bool move_pointer)
{
    2c78:	b510      	push	{r4, lr}
    2c7a:	b082      	sub	sp, #8
	return usb_buffer.GetString(input, shift, move_pointer, &(Serial::NoIntEnable));
    2c7c:	4c02      	ldr	r4, [pc, #8]	; (2c88 <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb+0x10>)
    2c7e:	9400      	str	r4, [sp, #0]
    2c80:	4c02      	ldr	r4, [pc, #8]	; (2c8c <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb+0x14>)
    2c82:	47a0      	blx	r4
}
    2c84:	b002      	add	sp, #8
    2c86:	bd10      	pop	{r4, pc}
    2c88:	000026f5 	.word	0x000026f5
    2c8c:	00002851 	.word	0x00002851

00002c90 <_ZN9SerialUSB13USBController11TransmitIntEm>:

bool SerialUSB::USBController::TransmitInt(uint32_t input)
{
    2c90:	b510      	push	{r4, lr}
    2c92:	b084      	sub	sp, #16
    2c94:	0004      	movs	r4, r0
    2c96:	0008      	movs	r0, r1
	char packet[10];
	uint32_t numel = Serial::Int2ASCII(input, &(packet));
    2c98:	a901      	add	r1, sp, #4
    2c9a:	4b04      	ldr	r3, [pc, #16]	; (2cac <_ZN9SerialUSB13USBController11TransmitIntEm+0x1c>)
    2c9c:	4798      	blx	r3
    2c9e:	0002      	movs	r2, r0
	return TransmitPacket(packet, numel);
    2ca0:	a901      	add	r1, sp, #4
    2ca2:	0020      	movs	r0, r4
    2ca4:	4b02      	ldr	r3, [pc, #8]	; (2cb0 <_ZN9SerialUSB13USBController11TransmitIntEm+0x20>)
    2ca6:	4798      	blx	r3
}
    2ca8:	b004      	add	sp, #16
    2caa:	bd10      	pop	{r4, pc}
    2cac:	000026f9 	.word	0x000026f9
    2cb0:	00002c15 	.word	0x00002c15

00002cb4 <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch>:
{
	return usb_buffer.GetASCIIAsInt(output, &(Serial::NoIntEnable));
}

bool SerialUSB::USBController::ReceiveParam(uint32_t * output, const char *input, char delimiter, uint8_t max_digits)
{
    2cb4:	b530      	push	{r4, r5, lr}
    2cb6:	b083      	sub	sp, #12
    2cb8:	ac06      	add	r4, sp, #24
    2cba:	7824      	ldrb	r4, [r4, #0]
	return usb_buffer.GetIntParam(output, input, delimiter, max_digits, &(Serial::NoIntEnable));
    2cbc:	4d03      	ldr	r5, [pc, #12]	; (2ccc <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch+0x18>)
    2cbe:	9501      	str	r5, [sp, #4]
    2cc0:	9400      	str	r4, [sp, #0]
    2cc2:	4c03      	ldr	r4, [pc, #12]	; (2cd0 <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch+0x1c>)
    2cc4:	47a0      	blx	r4
}
    2cc6:	b003      	add	sp, #12
    2cc8:	bd30      	pop	{r4, r5, pc}
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	000026f5 	.word	0x000026f5
    2cd0:	0000299d 	.word	0x0000299d

00002cd4 <_ZN9SerialUSB13USBController9PutBufferEc>:

//private helper function
void SerialUSB::USBController::PutBuffer(char input)
{
    2cd4:	b510      	push	{r4, lr}
	usb_buffer.Put(input, &(Serial::NoIntEnable));
    2cd6:	4a02      	ldr	r2, [pc, #8]	; (2ce0 <_ZN9SerialUSB13USBController9PutBufferEc+0xc>)
    2cd8:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <_ZN9SerialUSB13USBController9PutBufferEc+0x10>)
    2cda:	4798      	blx	r3
}
    2cdc:	bd10      	pop	{r4, pc}
    2cde:	46c0      	nop			; (mov r8, r8)
    2ce0:	000026f5 	.word	0x000026f5
    2ce4:	000027b9 	.word	0x000027b9

00002ce8 <_ZN9SerialUSB13USBController4TaskEb>:
{
    2ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cea:	46d6      	mov	lr, sl
    2cec:	4647      	mov	r7, r8
    2cee:	b580      	push	{r7, lr}
    2cf0:	b083      	sub	sp, #12
    2cf2:	af00      	add	r7, sp, #0
    2cf4:	0005      	movs	r5, r0
    2cf6:	6079      	str	r1, [r7, #4]
	if(usb_on)
    2cf8:	7f04      	ldrb	r4, [r0, #28]
    2cfa:	2c00      	cmp	r4, #0
    2cfc:	d105      	bne.n	2d0a <_ZN9SerialUSB13USBController4TaskEb+0x22>
}
    2cfe:	46bd      	mov	sp, r7
    2d00:	b003      	add	sp, #12
    2d02:	bc0c      	pop	{r2, r3}
    2d04:	4690      	mov	r8, r2
    2d06:	469a      	mov	sl, r3
    2d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return tud_cdc_n_available(0);
    2d0a:	2000      	movs	r0, #0
    2d0c:	4b1e      	ldr	r3, [pc, #120]	; (2d88 <_ZN9SerialUSB13USBController4TaskEb+0xa0>)
    2d0e:	4798      	blx	r3
		if(tud_cdc_available() && usb_buffer.GetBufferState() != GenericBuffer::BufferState::Full)
    2d10:	2800      	cmp	r0, #0
    2d12:	d108      	bne.n	2d26 <_ZN9SerialUSB13USBController4TaskEb+0x3e>
    2d14:	2400      	movs	r4, #0
    2d16:	2c00      	cmp	r4, #0
    2d18:	d10c      	bne.n	2d34 <_ZN9SerialUSB13USBController4TaskEb+0x4c>
  tud_task_ext(UINT32_MAX, false);
    2d1a:	2100      	movs	r1, #0
    2d1c:	2001      	movs	r0, #1
    2d1e:	4240      	negs	r0, r0
    2d20:	4b1a      	ldr	r3, [pc, #104]	; (2d8c <_ZN9SerialUSB13USBController4TaskEb+0xa4>)
    2d22:	4798      	blx	r3
}
    2d24:	e7eb      	b.n	2cfe <_ZN9SerialUSB13USBController4TaskEb+0x16>
		if(tud_cdc_available() && usb_buffer.GetBufferState() != GenericBuffer::BufferState::Full)
    2d26:	0028      	movs	r0, r5
    2d28:	4b19      	ldr	r3, [pc, #100]	; (2d90 <_ZN9SerialUSB13USBController4TaskEb+0xa8>)
    2d2a:	4798      	blx	r3
    2d2c:	2801      	cmp	r0, #1
    2d2e:	d1f2      	bne.n	2d16 <_ZN9SerialUSB13USBController4TaskEb+0x2e>
    2d30:	2400      	movs	r4, #0
    2d32:	e7f0      	b.n	2d16 <_ZN9SerialUSB13USBController4TaskEb+0x2e>
			}
    2d34:	46ea      	mov	sl, sp
			char packet[usb_buffer.GetBufferEmpty()];
    2d36:	0028      	movs	r0, r5
    2d38:	4c16      	ldr	r4, [pc, #88]	; (2d94 <_ZN9SerialUSB13USBController4TaskEb+0xac>)
    2d3a:	47a0      	blx	r4
    2d3c:	3007      	adds	r0, #7
    2d3e:	08c0      	lsrs	r0, r0, #3
    2d40:	00c0      	lsls	r0, r0, #3
    2d42:	466b      	mov	r3, sp
    2d44:	1a1b      	subs	r3, r3, r0
    2d46:	469d      	mov	sp, r3
    2d48:	466e      	mov	r6, sp
			uint32_t count = tud_cdc_read(packet, usb_buffer.GetBufferEmpty());
    2d4a:	0028      	movs	r0, r5
    2d4c:	47a0      	blx	r4
    2d4e:	0002      	movs	r2, r0
  return tud_cdc_n_read(0, buffer, bufsize);
    2d50:	4669      	mov	r1, sp
    2d52:	2000      	movs	r0, #0
    2d54:	4b10      	ldr	r3, [pc, #64]	; (2d98 <_ZN9SerialUSB13USBController4TaskEb+0xb0>)
    2d56:	4798      	blx	r3
    2d58:	4680      	mov	r8, r0
			if(echo)
    2d5a:	687b      	ldr	r3, [r7, #4]
    2d5c:	2b00      	cmp	r3, #0
    2d5e:	d108      	bne.n	2d72 <_ZN9SerialUSB13USBController4TaskEb+0x8a>
    2d60:	2400      	movs	r4, #0
				for(uint32_t i = 0; i < count; i++) PutBuffer(packet[i]);
    2d62:	4544      	cmp	r4, r8
    2d64:	d20d      	bcs.n	2d82 <_ZN9SerialUSB13USBController4TaskEb+0x9a>
    2d66:	5d31      	ldrb	r1, [r6, r4]
    2d68:	0028      	movs	r0, r5
    2d6a:	4b0c      	ldr	r3, [pc, #48]	; (2d9c <_ZN9SerialUSB13USBController4TaskEb+0xb4>)
    2d6c:	4798      	blx	r3
    2d6e:	3401      	adds	r4, #1
    2d70:	e7f7      	b.n	2d62 <_ZN9SerialUSB13USBController4TaskEb+0x7a>
  return tud_cdc_n_write(0, buffer, bufsize);
    2d72:	0002      	movs	r2, r0
    2d74:	4669      	mov	r1, sp
    2d76:	2000      	movs	r0, #0
    2d78:	4b09      	ldr	r3, [pc, #36]	; (2da0 <_ZN9SerialUSB13USBController4TaskEb+0xb8>)
    2d7a:	4798      	blx	r3
  return tud_cdc_n_write_flush(0);
    2d7c:	2000      	movs	r0, #0
    2d7e:	4b09      	ldr	r3, [pc, #36]	; (2da4 <_ZN9SerialUSB13USBController4TaskEb+0xbc>)
    2d80:	4798      	blx	r3
    2d82:	46d5      	mov	sp, sl
    2d84:	e7c9      	b.n	2d1a <_ZN9SerialUSB13USBController4TaskEb+0x32>
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	00000639 	.word	0x00000639
    2d8c:	00001da5 	.word	0x00001da5
    2d90:	00002a7d 	.word	0x00002a7d
    2d94:	00002a75 	.word	0x00002a75
    2d98:	00000659 	.word	0x00000659
    2d9c:	00002cd5 	.word	0x00002cd5
    2da0:	00000759 	.word	0x00000759
    2da4:	00000689 	.word	0x00000689

00002da8 <_ZNK9SerialUSB13USBController11IsConnectedEv>:
{
	return usb_buffer.GetBufferAvailable();
}

bool SerialUSB::USBController::IsConnected(void) const
{
    2da8:	b510      	push	{r4, lr}
	return usb_on && tud_mounted();
    2daa:	7f00      	ldrb	r0, [r0, #28]
    2dac:	2800      	cmp	r0, #0
    2dae:	d100      	bne.n	2db2 <_ZNK9SerialUSB13USBController11IsConnectedEv+0xa>
}
    2db0:	bd10      	pop	{r4, pc}
	return usb_on && tud_mounted();
    2db2:	4b01      	ldr	r3, [pc, #4]	; (2db8 <_ZNK9SerialUSB13USBController11IsConnectedEv+0x10>)
    2db4:	4798      	blx	r3
    2db6:	e7fb      	b.n	2db0 <_ZNK9SerialUSB13USBController11IsConnectedEv+0x8>
    2db8:	000014e5 	.word	0x000014e5

00002dbc <_ZN9SerialUSB13USBController6DetachEv>:

void SerialUSB::USBController::Detach(void)
{
    2dbc:	b510      	push	{r4, lr}
    2dbe:	0004      	movs	r4, r0
	if(usb_on && !detached)
    2dc0:	7f03      	ldrb	r3, [r0, #28]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d002      	beq.n	2dcc <_ZN9SerialUSB13USBController6DetachEv+0x10>
    2dc6:	7f43      	ldrb	r3, [r0, #29]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d000      	beq.n	2dce <_ZN9SerialUSB13USBController6DetachEv+0x12>
	{
		tud_disconnect();
		detached = true;
	}
}
    2dcc:	bd10      	pop	{r4, pc}
		tud_disconnect();
    2dce:	4b02      	ldr	r3, [pc, #8]	; (2dd8 <_ZN9SerialUSB13USBController6DetachEv+0x1c>)
    2dd0:	4798      	blx	r3
		detached = true;
    2dd2:	2301      	movs	r3, #1
    2dd4:	7763      	strb	r3, [r4, #29]
}
    2dd6:	e7f9      	b.n	2dcc <_ZN9SerialUSB13USBController6DetachEv+0x10>
    2dd8:	00001505 	.word	0x00001505

00002ddc <_ZN9SerialUSB13USBController6DeinitEv>:
{
    2ddc:	b510      	push	{r4, lr}
    2dde:	0004      	movs	r4, r0
	if(usb_on)
    2de0:	7f03      	ldrb	r3, [r0, #28]
    2de2:	2b00      	cmp	r3, #0
    2de4:	d100      	bne.n	2de8 <_ZN9SerialUSB13USBController6DeinitEv+0xc>
}
    2de6:	bd10      	pop	{r4, pc}
		ClearBuffers();
    2de8:	2201      	movs	r2, #1
    2dea:	2101      	movs	r1, #1
    2dec:	4b03      	ldr	r3, [pc, #12]	; (2dfc <_ZN9SerialUSB13USBController6DeinitEv+0x20>)
    2dee:	4798      	blx	r3
		Detach();
    2df0:	0020      	movs	r0, r4
    2df2:	4b03      	ldr	r3, [pc, #12]	; (2e00 <_ZN9SerialUSB13USBController6DeinitEv+0x24>)
    2df4:	4798      	blx	r3
		usb_on = false;
    2df6:	2300      	movs	r3, #0
    2df8:	7723      	strb	r3, [r4, #28]
}
    2dfa:	e7f4      	b.n	2de6 <_ZN9SerialUSB13USBController6DeinitEv+0xa>
    2dfc:	00002bb1 	.word	0x00002bb1
    2e00:	00002dbd 	.word	0x00002dbd

00002e04 <_ZN9SerialUSB13USBControllerD1Ev>:
SerialUSB::USBController::~USBController(void)
    2e04:	b510      	push	{r4, lr}
    2e06:	0004      	movs	r4, r0
	Deinit();
    2e08:	4b03      	ldr	r3, [pc, #12]	; (2e18 <_ZN9SerialUSB13USBControllerD1Ev+0x14>)
    2e0a:	4798      	blx	r3
SerialUSB::USBController::~USBController(void)
    2e0c:	0020      	movs	r0, r4
    2e0e:	4b03      	ldr	r3, [pc, #12]	; (2e1c <_ZN9SerialUSB13USBControllerD1Ev+0x18>)
    2e10:	4798      	blx	r3
}
    2e12:	0020      	movs	r0, r4
    2e14:	bd10      	pop	{r4, pc}
    2e16:	46c0      	nop			; (mov r8, r8)
    2e18:	00002ddd 	.word	0x00002ddd
    2e1c:	000027a9 	.word	0x000027a9

00002e20 <_ZN9SerialUSB13USBController8ReattachEv>:

void SerialUSB::USBController::Reattach(void)
{
    2e20:	b510      	push	{r4, lr}
    2e22:	0004      	movs	r4, r0
	if(usb_on && detached)
    2e24:	7f03      	ldrb	r3, [r0, #28]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d002      	beq.n	2e30 <_ZN9SerialUSB13USBController8ReattachEv+0x10>
    2e2a:	7f43      	ldrb	r3, [r0, #29]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d100      	bne.n	2e32 <_ZN9SerialUSB13USBController8ReattachEv+0x12>
	{
		tud_connect();
		detached = false;
	}
}
    2e30:	bd10      	pop	{r4, pc}
		tud_connect();
    2e32:	4b02      	ldr	r3, [pc, #8]	; (2e3c <_ZN9SerialUSB13USBController8ReattachEv+0x1c>)
    2e34:	4798      	blx	r3
		detached = false;
    2e36:	2300      	movs	r3, #0
    2e38:	7763      	strb	r3, [r4, #29]
}
    2e3a:	e7f9      	b.n	2e30 <_ZN9SerialUSB13USBController8ReattachEv+0x10>
    2e3c:	00001525 	.word	0x00001525

00002e40 <_ZN9SerialUSB13USBController4InitEPcm>:
{
    2e40:	b510      	push	{r4, lr}
    2e42:	0004      	movs	r4, r0
	if(!usb_on)
    2e44:	7f03      	ldrb	r3, [r0, #28]
    2e46:	2b00      	cmp	r3, #0
    2e48:	d000      	beq.n	2e4c <_ZN9SerialUSB13USBController4InitEPcm+0xc>
}
    2e4a:	bd10      	pop	{r4, pc}
		ResetBuffer(buf, buf_size);
    2e4c:	4b08      	ldr	r3, [pc, #32]	; (2e70 <_ZN9SerialUSB13USBController4InitEPcm+0x30>)
    2e4e:	4798      	blx	r3
		USBFeedIOClocks();
    2e50:	4b08      	ldr	r3, [pc, #32]	; (2e74 <_ZN9SerialUSB13USBController4InitEPcm+0x34>)
    2e52:	4798      	blx	r3
		usb_on = true;
    2e54:	2301      	movs	r3, #1
    2e56:	7723      	strb	r3, [r4, #28]
		if(tud_inited())
    2e58:	4b07      	ldr	r3, [pc, #28]	; (2e78 <_ZN9SerialUSB13USBController4InitEPcm+0x38>)
    2e5a:	4798      	blx	r3
    2e5c:	2800      	cmp	r0, #0
    2e5e:	d102      	bne.n	2e66 <_ZN9SerialUSB13USBController4InitEPcm+0x26>
			tusb_init();	//tiny usb init (tusb_config.h must be configured to device mode, 1 CDC port and using the correct hardware environment)
    2e60:	4b06      	ldr	r3, [pc, #24]	; (2e7c <_ZN9SerialUSB13USBController4InitEPcm+0x3c>)
    2e62:	4798      	blx	r3
}
    2e64:	e7f1      	b.n	2e4a <_ZN9SerialUSB13USBController4InitEPcm+0xa>
			Reattach();
    2e66:	0020      	movs	r0, r4
    2e68:	4b05      	ldr	r3, [pc, #20]	; (2e80 <_ZN9SerialUSB13USBController4InitEPcm+0x40>)
    2e6a:	4798      	blx	r3
    2e6c:	e7ed      	b.n	2e4a <_ZN9SerialUSB13USBController4InitEPcm+0xa>
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	00002ba5 	.word	0x00002ba5
    2e74:	00002a95 	.word	0x00002a95
    2e78:	00001545 	.word	0x00001545
    2e7c:	00002e85 	.word	0x00002e85
    2e80:	00002e21 	.word	0x00002e21

00002e84 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
    2e84:	b510      	push	{r4, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
    2e86:	2000      	movs	r0, #0
    2e88:	4b01      	ldr	r3, [pc, #4]	; (2e90 <tusb_init+0xc>)
    2e8a:	4798      	blx	r3
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
    2e8c:	bd10      	pop	{r4, pc}
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	00001559 	.word	0x00001559

00002e94 <tusb_inited>:

bool tusb_inited(void)
{
    2e94:	b510      	push	{r4, lr}
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
    2e96:	4b03      	ldr	r3, [pc, #12]	; (2ea4 <tusb_inited+0x10>)
    2e98:	4798      	blx	r3
    2e9a:	2800      	cmp	r0, #0
    2e9c:	d000      	beq.n	2ea0 <tusb_inited+0xc>
    2e9e:	2001      	movs	r0, #1
#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
}
    2ea0:	bd10      	pop	{r4, pc}
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	00001545 	.word	0x00001545

00002ea8 <tu_edpt_claim>:
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
    2ea8:	7803      	ldrb	r3, [r0, #0]
    2eaa:	07db      	lsls	r3, r3, #31
    2eac:	d404      	bmi.n	2eb8 <tu_edpt_claim+0x10>
    2eae:	7803      	ldrb	r3, [r0, #0]
    2eb0:	075b      	lsls	r3, r3, #29
    2eb2:	d50a      	bpl.n	2eca <tu_edpt_claim+0x22>
    2eb4:	2300      	movs	r3, #0
    2eb6:	e000      	b.n	2eba <tu_edpt_claim+0x12>
    2eb8:	2300      	movs	r3, #0
  if (available)
    2eba:	2b00      	cmp	r3, #0
    2ebc:	d003      	beq.n	2ec6 <tu_edpt_claim+0x1e>
  {
    ep_state->claimed = 1;
    2ebe:	7802      	ldrb	r2, [r0, #0]
    2ec0:	2104      	movs	r1, #4
    2ec2:	430a      	orrs	r2, r1
    2ec4:	7002      	strb	r2, [r0, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
}
    2ec6:	0018      	movs	r0, r3
    2ec8:	4770      	bx	lr
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
    2eca:	2301      	movs	r3, #1
    2ecc:	e7f5      	b.n	2eba <tu_edpt_claim+0x12>

00002ece <tu_edpt_release>:
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
    2ece:	7803      	ldrb	r3, [r0, #0]
    2ed0:	075b      	lsls	r3, r3, #29
    2ed2:	d408      	bmi.n	2ee6 <tu_edpt_release+0x18>
    2ed4:	2300      	movs	r3, #0
  if (ret)
    2ed6:	2b00      	cmp	r3, #0
    2ed8:	d003      	beq.n	2ee2 <tu_edpt_release+0x14>
  {
    ep_state->claimed = 0;
    2eda:	7802      	ldrb	r2, [r0, #0]
    2edc:	2104      	movs	r1, #4
    2ede:	438a      	bics	r2, r1
    2ee0:	7002      	strb	r2, [r0, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
}
    2ee2:	0018      	movs	r0, r3
    2ee4:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
    2ee6:	7803      	ldrb	r3, [r0, #0]
    2ee8:	07db      	lsls	r3, r3, #31
    2eea:	d501      	bpl.n	2ef0 <tu_edpt_release+0x22>
    2eec:	2300      	movs	r3, #0
    2eee:	e7f2      	b.n	2ed6 <tu_edpt_release+0x8>
    2ef0:	2301      	movs	r3, #1
    2ef2:	e7f0      	b.n	2ed6 <tu_edpt_release+0x8>

00002ef4 <tu_edpt_validate>:
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    2ef4:	7902      	ldrb	r2, [r0, #4]
    2ef6:	7943      	ldrb	r3, [r0, #5]
    2ef8:	021b      	lsls	r3, r3, #8
    2efa:	4313      	orrs	r3, r2
    2efc:	055b      	lsls	r3, r3, #21
    2efe:	0d5b      	lsrs	r3, r3, #21
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
    2f00:	78c2      	ldrb	r2, [r0, #3]
    2f02:	0792      	lsls	r2, r2, #30
    2f04:	0f92      	lsrs	r2, r2, #30
    2f06:	2a02      	cmp	r2, #2
    2f08:	d00c      	beq.n	2f24 <tu_edpt_validate+0x30>
    2f0a:	d819      	bhi.n	2f40 <tu_edpt_validate+0x4c>
    2f0c:	2a01      	cmp	r2, #1
    2f0e:	d121      	bne.n	2f54 <tu_edpt_validate+0x60>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    2f10:	2902      	cmp	r1, #2
    2f12:	d004      	beq.n	2f1e <tu_edpt_validate+0x2a>
    2f14:	4a13      	ldr	r2, [pc, #76]	; (2f64 <tu_edpt_validate+0x70>)
      TU_ASSERT(max_packet_size <= spec_size);
    2f16:	429a      	cmp	r2, r3
    2f18:	d31e      	bcc.n	2f58 <tu_edpt_validate+0x64>
    break;

    default: return false;
  }

  return true;
    2f1a:	2001      	movs	r0, #1
    2f1c:	e01b      	b.n	2f56 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    2f1e:	2280      	movs	r2, #128	; 0x80
    2f20:	00d2      	lsls	r2, r2, #3
    2f22:	e7f8      	b.n	2f16 <tu_edpt_validate+0x22>
      if (speed == TUSB_SPEED_HIGH)
    2f24:	2902      	cmp	r1, #2
    2f26:	d003      	beq.n	2f30 <tu_edpt_validate+0x3c>
        TU_ASSERT(max_packet_size <= 64);
    2f28:	2b40      	cmp	r3, #64	; 0x40
    2f2a:	d817      	bhi.n	2f5c <tu_edpt_validate+0x68>
  return true;
    2f2c:	2001      	movs	r0, #1
    2f2e:	e012      	b.n	2f56 <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size == 512);
    2f30:	2280      	movs	r2, #128	; 0x80
    2f32:	0092      	lsls	r2, r2, #2
    2f34:	4293      	cmp	r3, r2
    2f36:	d001      	beq.n	2f3c <tu_edpt_validate+0x48>
    2f38:	2000      	movs	r0, #0
    2f3a:	e00c      	b.n	2f56 <tu_edpt_validate+0x62>
  return true;
    2f3c:	2001      	movs	r0, #1
    2f3e:	e00a      	b.n	2f56 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    2f40:	2902      	cmp	r1, #2
    2f42:	d004      	beq.n	2f4e <tu_edpt_validate+0x5a>
    2f44:	2240      	movs	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
    2f46:	429a      	cmp	r2, r3
    2f48:	d30a      	bcc.n	2f60 <tu_edpt_validate+0x6c>
  return true;
    2f4a:	2001      	movs	r0, #1
    2f4c:	e003      	b.n	2f56 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    2f4e:	2280      	movs	r2, #128	; 0x80
    2f50:	00d2      	lsls	r2, r2, #3
    2f52:	e7f8      	b.n	2f46 <tu_edpt_validate+0x52>
    default: return false;
    2f54:	2000      	movs	r0, #0
}
    2f56:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    2f58:	2000      	movs	r0, #0
    2f5a:	e7fc      	b.n	2f56 <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size <= 64);
    2f5c:	2000      	movs	r0, #0
    2f5e:	e7fa      	b.n	2f56 <tu_edpt_validate+0x62>
      TU_ASSERT(max_packet_size <= spec_size);
    2f60:	2000      	movs	r0, #0
    2f62:	e7f8      	b.n	2f56 <tu_edpt_validate+0x62>
    2f64:	000003ff 	.word	0x000003ff

00002f68 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
    2f68:	b530      	push	{r4, r5, lr}
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
    2f6a:	188a      	adds	r2, r1, r2

  while( p_desc < desc_end )
    2f6c:	e001      	b.n	2f72 <tu_edpt_bind_driver+0xa>
  return desc8 + desc8[DESC_OFFSET_LEN];
    2f6e:	780c      	ldrb	r4, [r1, #0]
    2f70:	1909      	adds	r1, r1, r4
    2f72:	4291      	cmp	r1, r2
    2f74:	d20a      	bcs.n	2f8c <tu_edpt_bind_driver+0x24>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    2f76:	784c      	ldrb	r4, [r1, #1]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
    2f78:	2c05      	cmp	r4, #5
    2f7a:	d1f8      	bne.n	2f6e <tu_edpt_bind_driver+0x6>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
    2f7c:	788d      	ldrb	r5, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2f7e:	347a      	adds	r4, #122	; 0x7a
    2f80:	402c      	ands	r4, r5

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    2f82:	0064      	lsls	r4, r4, #1
    2f84:	1904      	adds	r4, r0, r4
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2f86:	09ed      	lsrs	r5, r5, #7
    2f88:	5563      	strb	r3, [r4, r5]
    2f8a:	e7f0      	b.n	2f6e <tu_edpt_bind_driver+0x6>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
    2f8c:	bd30      	pop	{r4, r5, pc}
	...

00002f90 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
    2f90:	4800      	ldr	r0, [pc, #0]	; (2f94 <tud_descriptor_device_cb+0x4>)
    2f92:	4770      	bx	lr
    2f94:	00003698 	.word	0x00003698

00002f98 <tud_descriptor_configuration_cb>:

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
    2f98:	4801      	ldr	r0, [pc, #4]	; (2fa0 <tud_descriptor_configuration_cb+0x8>)
#endif
}
    2f9a:	3014      	adds	r0, #20
    2f9c:	4770      	bx	lr
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	00003698 	.word	0x00003698

00002fa4 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
    2fa4:	b570      	push	{r4, r5, r6, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d00d      	beq.n	2fc6 <tud_descriptor_string_cb+0x22>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
    2faa:	2804      	cmp	r0, #4
    2fac:	d824      	bhi.n	2ff8 <tud_descriptor_string_cb+0x54>

    const char* str = string_desc_arr[index];
    2fae:	0080      	lsls	r0, r0, #2
    2fb0:	4b12      	ldr	r3, [pc, #72]	; (2ffc <tud_descriptor_string_cb+0x58>)
    2fb2:	58c5      	ldr	r5, [r0, r3]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
    2fb4:	0028      	movs	r0, r5
    2fb6:	4b12      	ldr	r3, [pc, #72]	; (3000 <tud_descriptor_string_cb+0x5c>)
    2fb8:	4798      	blx	r3
    2fba:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
    2fbc:	281f      	cmp	r0, #31
    2fbe:	d900      	bls.n	2fc2 <tud_descriptor_string_cb+0x1e>
    2fc0:	201f      	movs	r0, #31

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
    2fc2:	2300      	movs	r3, #0
    2fc4:	e00e      	b.n	2fe4 <tud_descriptor_string_cb+0x40>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
    2fc6:	4b0d      	ldr	r3, [pc, #52]	; (2ffc <tud_descriptor_string_cb+0x58>)
    2fc8:	6819      	ldr	r1, [r3, #0]
    2fca:	2202      	movs	r2, #2
    2fcc:	480d      	ldr	r0, [pc, #52]	; (3004 <tud_descriptor_string_cb+0x60>)
    2fce:	3002      	adds	r0, #2
    2fd0:	4b0d      	ldr	r3, [pc, #52]	; (3008 <tud_descriptor_string_cb+0x64>)
    2fd2:	4798      	blx	r3
    chr_count = 1;
    2fd4:	2001      	movs	r0, #1
    2fd6:	e007      	b.n	2fe8 <tud_descriptor_string_cb+0x44>
    {
      _desc_str[1+i] = str[i];
    2fd8:	1c5a      	adds	r2, r3, #1
    2fda:	5cec      	ldrb	r4, [r5, r3]
    2fdc:	0051      	lsls	r1, r2, #1
    2fde:	4b09      	ldr	r3, [pc, #36]	; (3004 <tud_descriptor_string_cb+0x60>)
    2fe0:	52cc      	strh	r4, [r1, r3]
    for(uint8_t i=0; i<chr_count; i++)
    2fe2:	b2d3      	uxtb	r3, r2
    2fe4:	4298      	cmp	r0, r3
    2fe6:	d8f7      	bhi.n	2fd8 <tud_descriptor_string_cb+0x34>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
    2fe8:	3001      	adds	r0, #1
    2fea:	0040      	lsls	r0, r0, #1
    2fec:	23c0      	movs	r3, #192	; 0xc0
    2fee:	009b      	lsls	r3, r3, #2
    2ff0:	4303      	orrs	r3, r0
    2ff2:	4804      	ldr	r0, [pc, #16]	; (3004 <tud_descriptor_string_cb+0x60>)
    2ff4:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
    2ff6:	bd70      	pop	{r4, r5, r6, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
    2ff8:	2000      	movs	r0, #0
    2ffa:	e7fc      	b.n	2ff6 <tud_descriptor_string_cb+0x52>
    2ffc:	20000020 	.word	0x20000020
    3000:	000032f5 	.word	0x000032f5
    3004:	20000980 	.word	0x20000980
    3008:	000031dd 	.word	0x000031dd

0000300c <_ZN12StateMachine13ExecuteActionEPNS_11STT_MACHINEE>:


#include "state_machine.h"

void StateMachine::ExecuteAction(StateMachine::STT_MACHINE * state_table)
{
    300c:	b510      	push	{r4, lr}
    300e:	0004      	movs	r4, r0
	state_table->current_state = state_table->state_actions[state_table->current_state]();
    3010:	7803      	ldrb	r3, [r0, #0]
    3012:	009b      	lsls	r3, r3, #2
    3014:	18c3      	adds	r3, r0, r3
    3016:	685b      	ldr	r3, [r3, #4]
    3018:	4798      	blx	r3
    301a:	7020      	strb	r0, [r4, #0]
}
    301c:	bd10      	pop	{r4, pc}

0000301e <_ZN12StateMachine17ProcessSuperStateEPhhPFhvE>:

void StateMachine::ProcessSuperState(StateMachine::STT_STATE * current_state, StateMachine::STT_STATE super_state, StateMachine::STT_ACTION super_function)
{
    301e:	b570      	push	{r4, r5, r6, lr}
    3020:	0005      	movs	r5, r0
    3022:	000c      	movs	r4, r1
	STT_STATE temp_state = super_function();
    3024:	4790      	blx	r2
	if(temp_state != super_state)
    3026:	42a0      	cmp	r0, r4
    3028:	d000      	beq.n	302c <_ZN12StateMachine17ProcessSuperStateEPhhPFhvE+0xe>
		*current_state = temp_state;
    302a:	7028      	strb	r0, [r5, #0]
}
    302c:	bd70      	pop	{r4, r5, r6, pc}
	...

00003030 <_ZN4Util20enterCriticalSectionEv>:

uint32_t Util::critical_section_count = 0;

void Util::enterCriticalSection()
{
    if(Util::critical_section_count == 0)
    3030:	4b04      	ldr	r3, [pc, #16]	; (3044 <_ZN4Util20enterCriticalSectionEv+0x14>)
    3032:	681b      	ldr	r3, [r3, #0]
    3034:	2b00      	cmp	r3, #0
    3036:	d100      	bne.n	303a <_ZN4Util20enterCriticalSectionEv+0xa>
  __ASM volatile ("cpsid i" : : : "memory");
    3038:	b672      	cpsid	i
    {
        __disable_irq();
    }
    Util::critical_section_count++;
    303a:	4a02      	ldr	r2, [pc, #8]	; (3044 <_ZN4Util20enterCriticalSectionEv+0x14>)
    303c:	6813      	ldr	r3, [r2, #0]
    303e:	3301      	adds	r3, #1
    3040:	6013      	str	r3, [r2, #0]
}
    3042:	4770      	bx	lr
    3044:	200009c0 	.word	0x200009c0

00003048 <_ZN4Util19exitCriticalSectionEv>:

void Util::exitCriticalSection()
{
    Util::critical_section_count--;
    3048:	4a03      	ldr	r2, [pc, #12]	; (3058 <_ZN4Util19exitCriticalSectionEv+0x10>)
    304a:	6813      	ldr	r3, [r2, #0]
    304c:	3b01      	subs	r3, #1
    304e:	6013      	str	r3, [r2, #0]

    if(Util::critical_section_count == 0)
    3050:	2b00      	cmp	r3, #0
    3052:	d100      	bne.n	3056 <_ZN4Util19exitCriticalSectionEv+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    3054:	b662      	cpsie	i
    {
        __enable_irq();
    }
}
    3056:	4770      	bx	lr
    3058:	200009c0 	.word	0x200009c0

0000305c <__aeabi_atexit>:
    305c:	000b      	movs	r3, r1
    305e:	b510      	push	{r4, lr}
    3060:	0001      	movs	r1, r0
    3062:	0018      	movs	r0, r3
    3064:	f000 f88e 	bl	3184 <__cxa_atexit>
    3068:	bd10      	pop	{r4, pc}
    306a:	46c0      	nop			; (mov r8, r8)

0000306c <__udivsi3>:
    306c:	2200      	movs	r2, #0
    306e:	0843      	lsrs	r3, r0, #1
    3070:	428b      	cmp	r3, r1
    3072:	d374      	bcc.n	315e <__udivsi3+0xf2>
    3074:	0903      	lsrs	r3, r0, #4
    3076:	428b      	cmp	r3, r1
    3078:	d35f      	bcc.n	313a <__udivsi3+0xce>
    307a:	0a03      	lsrs	r3, r0, #8
    307c:	428b      	cmp	r3, r1
    307e:	d344      	bcc.n	310a <__udivsi3+0x9e>
    3080:	0b03      	lsrs	r3, r0, #12
    3082:	428b      	cmp	r3, r1
    3084:	d328      	bcc.n	30d8 <__udivsi3+0x6c>
    3086:	0c03      	lsrs	r3, r0, #16
    3088:	428b      	cmp	r3, r1
    308a:	d30d      	bcc.n	30a8 <__udivsi3+0x3c>
    308c:	22ff      	movs	r2, #255	; 0xff
    308e:	0209      	lsls	r1, r1, #8
    3090:	ba12      	rev	r2, r2
    3092:	0c03      	lsrs	r3, r0, #16
    3094:	428b      	cmp	r3, r1
    3096:	d302      	bcc.n	309e <__udivsi3+0x32>
    3098:	1212      	asrs	r2, r2, #8
    309a:	0209      	lsls	r1, r1, #8
    309c:	d065      	beq.n	316a <__udivsi3+0xfe>
    309e:	0b03      	lsrs	r3, r0, #12
    30a0:	428b      	cmp	r3, r1
    30a2:	d319      	bcc.n	30d8 <__udivsi3+0x6c>
    30a4:	e000      	b.n	30a8 <__udivsi3+0x3c>
    30a6:	0a09      	lsrs	r1, r1, #8
    30a8:	0bc3      	lsrs	r3, r0, #15
    30aa:	428b      	cmp	r3, r1
    30ac:	d301      	bcc.n	30b2 <__udivsi3+0x46>
    30ae:	03cb      	lsls	r3, r1, #15
    30b0:	1ac0      	subs	r0, r0, r3
    30b2:	4152      	adcs	r2, r2
    30b4:	0b83      	lsrs	r3, r0, #14
    30b6:	428b      	cmp	r3, r1
    30b8:	d301      	bcc.n	30be <__udivsi3+0x52>
    30ba:	038b      	lsls	r3, r1, #14
    30bc:	1ac0      	subs	r0, r0, r3
    30be:	4152      	adcs	r2, r2
    30c0:	0b43      	lsrs	r3, r0, #13
    30c2:	428b      	cmp	r3, r1
    30c4:	d301      	bcc.n	30ca <__udivsi3+0x5e>
    30c6:	034b      	lsls	r3, r1, #13
    30c8:	1ac0      	subs	r0, r0, r3
    30ca:	4152      	adcs	r2, r2
    30cc:	0b03      	lsrs	r3, r0, #12
    30ce:	428b      	cmp	r3, r1
    30d0:	d301      	bcc.n	30d6 <__udivsi3+0x6a>
    30d2:	030b      	lsls	r3, r1, #12
    30d4:	1ac0      	subs	r0, r0, r3
    30d6:	4152      	adcs	r2, r2
    30d8:	0ac3      	lsrs	r3, r0, #11
    30da:	428b      	cmp	r3, r1
    30dc:	d301      	bcc.n	30e2 <__udivsi3+0x76>
    30de:	02cb      	lsls	r3, r1, #11
    30e0:	1ac0      	subs	r0, r0, r3
    30e2:	4152      	adcs	r2, r2
    30e4:	0a83      	lsrs	r3, r0, #10
    30e6:	428b      	cmp	r3, r1
    30e8:	d301      	bcc.n	30ee <__udivsi3+0x82>
    30ea:	028b      	lsls	r3, r1, #10
    30ec:	1ac0      	subs	r0, r0, r3
    30ee:	4152      	adcs	r2, r2
    30f0:	0a43      	lsrs	r3, r0, #9
    30f2:	428b      	cmp	r3, r1
    30f4:	d301      	bcc.n	30fa <__udivsi3+0x8e>
    30f6:	024b      	lsls	r3, r1, #9
    30f8:	1ac0      	subs	r0, r0, r3
    30fa:	4152      	adcs	r2, r2
    30fc:	0a03      	lsrs	r3, r0, #8
    30fe:	428b      	cmp	r3, r1
    3100:	d301      	bcc.n	3106 <__udivsi3+0x9a>
    3102:	020b      	lsls	r3, r1, #8
    3104:	1ac0      	subs	r0, r0, r3
    3106:	4152      	adcs	r2, r2
    3108:	d2cd      	bcs.n	30a6 <__udivsi3+0x3a>
    310a:	09c3      	lsrs	r3, r0, #7
    310c:	428b      	cmp	r3, r1
    310e:	d301      	bcc.n	3114 <__udivsi3+0xa8>
    3110:	01cb      	lsls	r3, r1, #7
    3112:	1ac0      	subs	r0, r0, r3
    3114:	4152      	adcs	r2, r2
    3116:	0983      	lsrs	r3, r0, #6
    3118:	428b      	cmp	r3, r1
    311a:	d301      	bcc.n	3120 <__udivsi3+0xb4>
    311c:	018b      	lsls	r3, r1, #6
    311e:	1ac0      	subs	r0, r0, r3
    3120:	4152      	adcs	r2, r2
    3122:	0943      	lsrs	r3, r0, #5
    3124:	428b      	cmp	r3, r1
    3126:	d301      	bcc.n	312c <__udivsi3+0xc0>
    3128:	014b      	lsls	r3, r1, #5
    312a:	1ac0      	subs	r0, r0, r3
    312c:	4152      	adcs	r2, r2
    312e:	0903      	lsrs	r3, r0, #4
    3130:	428b      	cmp	r3, r1
    3132:	d301      	bcc.n	3138 <__udivsi3+0xcc>
    3134:	010b      	lsls	r3, r1, #4
    3136:	1ac0      	subs	r0, r0, r3
    3138:	4152      	adcs	r2, r2
    313a:	08c3      	lsrs	r3, r0, #3
    313c:	428b      	cmp	r3, r1
    313e:	d301      	bcc.n	3144 <__udivsi3+0xd8>
    3140:	00cb      	lsls	r3, r1, #3
    3142:	1ac0      	subs	r0, r0, r3
    3144:	4152      	adcs	r2, r2
    3146:	0883      	lsrs	r3, r0, #2
    3148:	428b      	cmp	r3, r1
    314a:	d301      	bcc.n	3150 <__udivsi3+0xe4>
    314c:	008b      	lsls	r3, r1, #2
    314e:	1ac0      	subs	r0, r0, r3
    3150:	4152      	adcs	r2, r2
    3152:	0843      	lsrs	r3, r0, #1
    3154:	428b      	cmp	r3, r1
    3156:	d301      	bcc.n	315c <__udivsi3+0xf0>
    3158:	004b      	lsls	r3, r1, #1
    315a:	1ac0      	subs	r0, r0, r3
    315c:	4152      	adcs	r2, r2
    315e:	1a41      	subs	r1, r0, r1
    3160:	d200      	bcs.n	3164 <__udivsi3+0xf8>
    3162:	4601      	mov	r1, r0
    3164:	4152      	adcs	r2, r2
    3166:	4610      	mov	r0, r2
    3168:	4770      	bx	lr
    316a:	e7ff      	b.n	316c <__udivsi3+0x100>
    316c:	b501      	push	{r0, lr}
    316e:	2000      	movs	r0, #0
    3170:	f000 f806 	bl	3180 <__aeabi_idiv0>
    3174:	bd02      	pop	{r1, pc}
    3176:	46c0      	nop			; (mov r8, r8)

00003178 <__aeabi_uidivmod>:
    3178:	2900      	cmp	r1, #0
    317a:	d0f7      	beq.n	316c <__udivsi3+0x100>
    317c:	e776      	b.n	306c <__udivsi3>
    317e:	4770      	bx	lr

00003180 <__aeabi_idiv0>:
    3180:	4770      	bx	lr
    3182:	46c0      	nop			; (mov r8, r8)

00003184 <__cxa_atexit>:
    3184:	b510      	push	{r4, lr}
    3186:	0013      	movs	r3, r2
    3188:	000a      	movs	r2, r1
    318a:	0001      	movs	r1, r0
    318c:	2002      	movs	r0, #2
    318e:	f000 f8e3 	bl	3358 <__register_exitproc>
    3192:	bd10      	pop	{r4, pc}

00003194 <__libc_init_array>:
    3194:	b570      	push	{r4, r5, r6, lr}
    3196:	4e0d      	ldr	r6, [pc, #52]	; (31cc <__libc_init_array+0x38>)
    3198:	4d0d      	ldr	r5, [pc, #52]	; (31d0 <__libc_init_array+0x3c>)
    319a:	2400      	movs	r4, #0
    319c:	1bad      	subs	r5, r5, r6
    319e:	10ad      	asrs	r5, r5, #2
    31a0:	d005      	beq.n	31ae <__libc_init_array+0x1a>
    31a2:	00a3      	lsls	r3, r4, #2
    31a4:	58f3      	ldr	r3, [r6, r3]
    31a6:	3401      	adds	r4, #1
    31a8:	4798      	blx	r3
    31aa:	42a5      	cmp	r5, r4
    31ac:	d1f9      	bne.n	31a2 <__libc_init_array+0xe>
    31ae:	f000 fabd 	bl	372c <_init>
    31b2:	4e08      	ldr	r6, [pc, #32]	; (31d4 <__libc_init_array+0x40>)
    31b4:	4d08      	ldr	r5, [pc, #32]	; (31d8 <__libc_init_array+0x44>)
    31b6:	2400      	movs	r4, #0
    31b8:	1bad      	subs	r5, r5, r6
    31ba:	10ad      	asrs	r5, r5, #2
    31bc:	d005      	beq.n	31ca <__libc_init_array+0x36>
    31be:	00a3      	lsls	r3, r4, #2
    31c0:	58f3      	ldr	r3, [r6, r3]
    31c2:	3401      	adds	r4, #1
    31c4:	4798      	blx	r3
    31c6:	42a5      	cmp	r5, r4
    31c8:	d1f9      	bne.n	31be <__libc_init_array+0x2a>
    31ca:	bd70      	pop	{r4, r5, r6, pc}
    31cc:	00003738 	.word	0x00003738
    31d0:	00003738 	.word	0x00003738
    31d4:	00003738 	.word	0x00003738
    31d8:	00003744 	.word	0x00003744

000031dc <memcpy>:
    31dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    31de:	0005      	movs	r5, r0
    31e0:	2a0f      	cmp	r2, #15
    31e2:	d92f      	bls.n	3244 <memcpy+0x68>
    31e4:	000b      	movs	r3, r1
    31e6:	4303      	orrs	r3, r0
    31e8:	079b      	lsls	r3, r3, #30
    31ea:	d134      	bne.n	3256 <memcpy+0x7a>
    31ec:	0016      	movs	r6, r2
    31ee:	000c      	movs	r4, r1
    31f0:	0003      	movs	r3, r0
    31f2:	3e10      	subs	r6, #16
    31f4:	0935      	lsrs	r5, r6, #4
    31f6:	3501      	adds	r5, #1
    31f8:	012d      	lsls	r5, r5, #4
    31fa:	1945      	adds	r5, r0, r5
    31fc:	6827      	ldr	r7, [r4, #0]
    31fe:	601f      	str	r7, [r3, #0]
    3200:	6867      	ldr	r7, [r4, #4]
    3202:	605f      	str	r7, [r3, #4]
    3204:	68a7      	ldr	r7, [r4, #8]
    3206:	609f      	str	r7, [r3, #8]
    3208:	68e7      	ldr	r7, [r4, #12]
    320a:	3410      	adds	r4, #16
    320c:	60df      	str	r7, [r3, #12]
    320e:	3310      	adds	r3, #16
    3210:	429d      	cmp	r5, r3
    3212:	d1f3      	bne.n	31fc <memcpy+0x20>
    3214:	230f      	movs	r3, #15
    3216:	439e      	bics	r6, r3
    3218:	3610      	adds	r6, #16
    321a:	1985      	adds	r5, r0, r6
    321c:	1989      	adds	r1, r1, r6
    321e:	4013      	ands	r3, r2
    3220:	2b03      	cmp	r3, #3
    3222:	d91a      	bls.n	325a <memcpy+0x7e>
    3224:	1f1e      	subs	r6, r3, #4
    3226:	2300      	movs	r3, #0
    3228:	08b4      	lsrs	r4, r6, #2
    322a:	3401      	adds	r4, #1
    322c:	00a4      	lsls	r4, r4, #2
    322e:	58cf      	ldr	r7, [r1, r3]
    3230:	50ef      	str	r7, [r5, r3]
    3232:	3304      	adds	r3, #4
    3234:	42a3      	cmp	r3, r4
    3236:	d1fa      	bne.n	322e <memcpy+0x52>
    3238:	2403      	movs	r4, #3
    323a:	43a6      	bics	r6, r4
    323c:	1d33      	adds	r3, r6, #4
    323e:	4022      	ands	r2, r4
    3240:	18c9      	adds	r1, r1, r3
    3242:	18ed      	adds	r5, r5, r3
    3244:	2a00      	cmp	r2, #0
    3246:	d005      	beq.n	3254 <memcpy+0x78>
    3248:	2300      	movs	r3, #0
    324a:	5ccc      	ldrb	r4, [r1, r3]
    324c:	54ec      	strb	r4, [r5, r3]
    324e:	3301      	adds	r3, #1
    3250:	4293      	cmp	r3, r2
    3252:	d1fa      	bne.n	324a <memcpy+0x6e>
    3254:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3256:	0005      	movs	r5, r0
    3258:	e7f6      	b.n	3248 <memcpy+0x6c>
    325a:	001a      	movs	r2, r3
    325c:	e7f2      	b.n	3244 <memcpy+0x68>
    325e:	46c0      	nop			; (mov r8, r8)

00003260 <memset>:
    3260:	b5f0      	push	{r4, r5, r6, r7, lr}
    3262:	0783      	lsls	r3, r0, #30
    3264:	d043      	beq.n	32ee <memset+0x8e>
    3266:	1e54      	subs	r4, r2, #1
    3268:	2a00      	cmp	r2, #0
    326a:	d03f      	beq.n	32ec <memset+0x8c>
    326c:	b2ce      	uxtb	r6, r1
    326e:	0002      	movs	r2, r0
    3270:	2503      	movs	r5, #3
    3272:	e002      	b.n	327a <memset+0x1a>
    3274:	001a      	movs	r2, r3
    3276:	3c01      	subs	r4, #1
    3278:	d338      	bcc.n	32ec <memset+0x8c>
    327a:	1c53      	adds	r3, r2, #1
    327c:	7016      	strb	r6, [r2, #0]
    327e:	422b      	tst	r3, r5
    3280:	d1f8      	bne.n	3274 <memset+0x14>
    3282:	2c03      	cmp	r4, #3
    3284:	d92a      	bls.n	32dc <memset+0x7c>
    3286:	22ff      	movs	r2, #255	; 0xff
    3288:	400a      	ands	r2, r1
    328a:	0215      	lsls	r5, r2, #8
    328c:	4315      	orrs	r5, r2
    328e:	042a      	lsls	r2, r5, #16
    3290:	4315      	orrs	r5, r2
    3292:	2c0f      	cmp	r4, #15
    3294:	d914      	bls.n	32c0 <memset+0x60>
    3296:	0027      	movs	r7, r4
    3298:	001a      	movs	r2, r3
    329a:	3f10      	subs	r7, #16
    329c:	093e      	lsrs	r6, r7, #4
    329e:	3601      	adds	r6, #1
    32a0:	0136      	lsls	r6, r6, #4
    32a2:	199e      	adds	r6, r3, r6
    32a4:	6015      	str	r5, [r2, #0]
    32a6:	6055      	str	r5, [r2, #4]
    32a8:	6095      	str	r5, [r2, #8]
    32aa:	60d5      	str	r5, [r2, #12]
    32ac:	3210      	adds	r2, #16
    32ae:	4296      	cmp	r6, r2
    32b0:	d1f8      	bne.n	32a4 <memset+0x44>
    32b2:	220f      	movs	r2, #15
    32b4:	4397      	bics	r7, r2
    32b6:	3710      	adds	r7, #16
    32b8:	19db      	adds	r3, r3, r7
    32ba:	4014      	ands	r4, r2
    32bc:	2c03      	cmp	r4, #3
    32be:	d90d      	bls.n	32dc <memset+0x7c>
    32c0:	001a      	movs	r2, r3
    32c2:	1f27      	subs	r7, r4, #4
    32c4:	08be      	lsrs	r6, r7, #2
    32c6:	3601      	adds	r6, #1
    32c8:	00b6      	lsls	r6, r6, #2
    32ca:	199e      	adds	r6, r3, r6
    32cc:	c220      	stmia	r2!, {r5}
    32ce:	42b2      	cmp	r2, r6
    32d0:	d1fc      	bne.n	32cc <memset+0x6c>
    32d2:	2203      	movs	r2, #3
    32d4:	4397      	bics	r7, r2
    32d6:	3704      	adds	r7, #4
    32d8:	19db      	adds	r3, r3, r7
    32da:	4014      	ands	r4, r2
    32dc:	2c00      	cmp	r4, #0
    32de:	d005      	beq.n	32ec <memset+0x8c>
    32e0:	b2c9      	uxtb	r1, r1
    32e2:	191c      	adds	r4, r3, r4
    32e4:	7019      	strb	r1, [r3, #0]
    32e6:	3301      	adds	r3, #1
    32e8:	429c      	cmp	r4, r3
    32ea:	d1fb      	bne.n	32e4 <memset+0x84>
    32ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ee:	0014      	movs	r4, r2
    32f0:	0003      	movs	r3, r0
    32f2:	e7c6      	b.n	3282 <memset+0x22>

000032f4 <strlen>:
    32f4:	b510      	push	{r4, lr}
    32f6:	0783      	lsls	r3, r0, #30
    32f8:	d025      	beq.n	3346 <strlen+0x52>
    32fa:	7803      	ldrb	r3, [r0, #0]
    32fc:	2b00      	cmp	r3, #0
    32fe:	d024      	beq.n	334a <strlen+0x56>
    3300:	0003      	movs	r3, r0
    3302:	2103      	movs	r1, #3
    3304:	e002      	b.n	330c <strlen+0x18>
    3306:	781a      	ldrb	r2, [r3, #0]
    3308:	2a00      	cmp	r2, #0
    330a:	d01a      	beq.n	3342 <strlen+0x4e>
    330c:	3301      	adds	r3, #1
    330e:	420b      	tst	r3, r1
    3310:	d1f9      	bne.n	3306 <strlen+0x12>
    3312:	6819      	ldr	r1, [r3, #0]
    3314:	4a0e      	ldr	r2, [pc, #56]	; (3350 <strlen+0x5c>)
    3316:	4c0f      	ldr	r4, [pc, #60]	; (3354 <strlen+0x60>)
    3318:	188a      	adds	r2, r1, r2
    331a:	438a      	bics	r2, r1
    331c:	4222      	tst	r2, r4
    331e:	d106      	bne.n	332e <strlen+0x3a>
    3320:	3304      	adds	r3, #4
    3322:	6819      	ldr	r1, [r3, #0]
    3324:	4a0a      	ldr	r2, [pc, #40]	; (3350 <strlen+0x5c>)
    3326:	188a      	adds	r2, r1, r2
    3328:	438a      	bics	r2, r1
    332a:	4222      	tst	r2, r4
    332c:	d0f8      	beq.n	3320 <strlen+0x2c>
    332e:	001a      	movs	r2, r3
    3330:	781b      	ldrb	r3, [r3, #0]
    3332:	2b00      	cmp	r3, #0
    3334:	d003      	beq.n	333e <strlen+0x4a>
    3336:	3201      	adds	r2, #1
    3338:	7811      	ldrb	r1, [r2, #0]
    333a:	2900      	cmp	r1, #0
    333c:	d1fb      	bne.n	3336 <strlen+0x42>
    333e:	1a10      	subs	r0, r2, r0
    3340:	bd10      	pop	{r4, pc}
    3342:	1a18      	subs	r0, r3, r0
    3344:	e7fc      	b.n	3340 <strlen+0x4c>
    3346:	0003      	movs	r3, r0
    3348:	e7e3      	b.n	3312 <strlen+0x1e>
    334a:	2000      	movs	r0, #0
    334c:	e7f8      	b.n	3340 <strlen+0x4c>
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	fefefeff 	.word	0xfefefeff
    3354:	80808080 	.word	0x80808080

00003358 <__register_exitproc>:
    3358:	b5f0      	push	{r4, r5, r6, r7, lr}
    335a:	464e      	mov	r6, r9
    335c:	4645      	mov	r5, r8
    335e:	46de      	mov	lr, fp
    3360:	4657      	mov	r7, sl
    3362:	b5e0      	push	{r5, r6, r7, lr}
    3364:	4d36      	ldr	r5, [pc, #216]	; (3440 <__register_exitproc+0xe8>)
    3366:	b083      	sub	sp, #12
    3368:	0006      	movs	r6, r0
    336a:	6828      	ldr	r0, [r5, #0]
    336c:	4698      	mov	r8, r3
    336e:	000f      	movs	r7, r1
    3370:	4691      	mov	r9, r2
    3372:	f000 f899 	bl	34a8 <__retarget_lock_acquire_recursive>
    3376:	4b33      	ldr	r3, [pc, #204]	; (3444 <__register_exitproc+0xec>)
    3378:	681c      	ldr	r4, [r3, #0]
    337a:	23a4      	movs	r3, #164	; 0xa4
    337c:	005b      	lsls	r3, r3, #1
    337e:	58e0      	ldr	r0, [r4, r3]
    3380:	2800      	cmp	r0, #0
    3382:	d052      	beq.n	342a <__register_exitproc+0xd2>
    3384:	6843      	ldr	r3, [r0, #4]
    3386:	2b1f      	cmp	r3, #31
    3388:	dc13      	bgt.n	33b2 <__register_exitproc+0x5a>
    338a:	1c5a      	adds	r2, r3, #1
    338c:	9201      	str	r2, [sp, #4]
    338e:	2e00      	cmp	r6, #0
    3390:	d128      	bne.n	33e4 <__register_exitproc+0x8c>
    3392:	9a01      	ldr	r2, [sp, #4]
    3394:	3302      	adds	r3, #2
    3396:	009b      	lsls	r3, r3, #2
    3398:	6042      	str	r2, [r0, #4]
    339a:	501f      	str	r7, [r3, r0]
    339c:	6828      	ldr	r0, [r5, #0]
    339e:	f000 f885 	bl	34ac <__retarget_lock_release_recursive>
    33a2:	2000      	movs	r0, #0
    33a4:	b003      	add	sp, #12
    33a6:	bc3c      	pop	{r2, r3, r4, r5}
    33a8:	4690      	mov	r8, r2
    33aa:	4699      	mov	r9, r3
    33ac:	46a2      	mov	sl, r4
    33ae:	46ab      	mov	fp, r5
    33b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33b2:	4b25      	ldr	r3, [pc, #148]	; (3448 <__register_exitproc+0xf0>)
    33b4:	2b00      	cmp	r3, #0
    33b6:	d03d      	beq.n	3434 <__register_exitproc+0xdc>
    33b8:	20c8      	movs	r0, #200	; 0xc8
    33ba:	0040      	lsls	r0, r0, #1
    33bc:	e000      	b.n	33c0 <__register_exitproc+0x68>
    33be:	bf00      	nop
    33c0:	2800      	cmp	r0, #0
    33c2:	d037      	beq.n	3434 <__register_exitproc+0xdc>
    33c4:	22a4      	movs	r2, #164	; 0xa4
    33c6:	2300      	movs	r3, #0
    33c8:	0052      	lsls	r2, r2, #1
    33ca:	58a1      	ldr	r1, [r4, r2]
    33cc:	6043      	str	r3, [r0, #4]
    33ce:	6001      	str	r1, [r0, #0]
    33d0:	50a0      	str	r0, [r4, r2]
    33d2:	3240      	adds	r2, #64	; 0x40
    33d4:	5083      	str	r3, [r0, r2]
    33d6:	3204      	adds	r2, #4
    33d8:	5083      	str	r3, [r0, r2]
    33da:	3301      	adds	r3, #1
    33dc:	9301      	str	r3, [sp, #4]
    33de:	2300      	movs	r3, #0
    33e0:	2e00      	cmp	r6, #0
    33e2:	d0d6      	beq.n	3392 <__register_exitproc+0x3a>
    33e4:	009a      	lsls	r2, r3, #2
    33e6:	4692      	mov	sl, r2
    33e8:	4482      	add	sl, r0
    33ea:	464a      	mov	r2, r9
    33ec:	2188      	movs	r1, #136	; 0x88
    33ee:	4654      	mov	r4, sl
    33f0:	5062      	str	r2, [r4, r1]
    33f2:	22c4      	movs	r2, #196	; 0xc4
    33f4:	0052      	lsls	r2, r2, #1
    33f6:	4691      	mov	r9, r2
    33f8:	4481      	add	r9, r0
    33fa:	464a      	mov	r2, r9
    33fc:	3987      	subs	r1, #135	; 0x87
    33fe:	4099      	lsls	r1, r3
    3400:	6812      	ldr	r2, [r2, #0]
    3402:	468b      	mov	fp, r1
    3404:	430a      	orrs	r2, r1
    3406:	4694      	mov	ip, r2
    3408:	464a      	mov	r2, r9
    340a:	4661      	mov	r1, ip
    340c:	6011      	str	r1, [r2, #0]
    340e:	2284      	movs	r2, #132	; 0x84
    3410:	4641      	mov	r1, r8
    3412:	0052      	lsls	r2, r2, #1
    3414:	50a1      	str	r1, [r4, r2]
    3416:	2e02      	cmp	r6, #2
    3418:	d1bb      	bne.n	3392 <__register_exitproc+0x3a>
    341a:	0002      	movs	r2, r0
    341c:	465c      	mov	r4, fp
    341e:	328d      	adds	r2, #141	; 0x8d
    3420:	32ff      	adds	r2, #255	; 0xff
    3422:	6811      	ldr	r1, [r2, #0]
    3424:	430c      	orrs	r4, r1
    3426:	6014      	str	r4, [r2, #0]
    3428:	e7b3      	b.n	3392 <__register_exitproc+0x3a>
    342a:	0020      	movs	r0, r4
    342c:	304d      	adds	r0, #77	; 0x4d
    342e:	30ff      	adds	r0, #255	; 0xff
    3430:	50e0      	str	r0, [r4, r3]
    3432:	e7a7      	b.n	3384 <__register_exitproc+0x2c>
    3434:	6828      	ldr	r0, [r5, #0]
    3436:	f000 f839 	bl	34ac <__retarget_lock_release_recursive>
    343a:	2001      	movs	r0, #1
    343c:	4240      	negs	r0, r0
    343e:	e7b1      	b.n	33a4 <__register_exitproc+0x4c>
    3440:	20000460 	.word	0x20000460
    3444:	00003728 	.word	0x00003728
    3448:	00000000 	.word	0x00000000

0000344c <register_fini>:
    344c:	4b03      	ldr	r3, [pc, #12]	; (345c <register_fini+0x10>)
    344e:	b510      	push	{r4, lr}
    3450:	2b00      	cmp	r3, #0
    3452:	d002      	beq.n	345a <register_fini+0xe>
    3454:	4802      	ldr	r0, [pc, #8]	; (3460 <register_fini+0x14>)
    3456:	f000 f805 	bl	3464 <atexit>
    345a:	bd10      	pop	{r4, pc}
    345c:	00000000 	.word	0x00000000
    3460:	00003475 	.word	0x00003475

00003464 <atexit>:
    3464:	b510      	push	{r4, lr}
    3466:	0001      	movs	r1, r0
    3468:	2300      	movs	r3, #0
    346a:	2200      	movs	r2, #0
    346c:	2000      	movs	r0, #0
    346e:	f7ff ff73 	bl	3358 <__register_exitproc>
    3472:	bd10      	pop	{r4, pc}

00003474 <__libc_fini_array>:
    3474:	b570      	push	{r4, r5, r6, lr}
    3476:	4b09      	ldr	r3, [pc, #36]	; (349c <__libc_fini_array+0x28>)
    3478:	4c09      	ldr	r4, [pc, #36]	; (34a0 <__libc_fini_array+0x2c>)
    347a:	1ae4      	subs	r4, r4, r3
    347c:	10a4      	asrs	r4, r4, #2
    347e:	d009      	beq.n	3494 <__libc_fini_array+0x20>
    3480:	4a08      	ldr	r2, [pc, #32]	; (34a4 <__libc_fini_array+0x30>)
    3482:	18a5      	adds	r5, r4, r2
    3484:	00ad      	lsls	r5, r5, #2
    3486:	18ed      	adds	r5, r5, r3
    3488:	682b      	ldr	r3, [r5, #0]
    348a:	3c01      	subs	r4, #1
    348c:	4798      	blx	r3
    348e:	3d04      	subs	r5, #4
    3490:	2c00      	cmp	r4, #0
    3492:	d1f9      	bne.n	3488 <__libc_fini_array+0x14>
    3494:	f000 f956 	bl	3744 <_fini>
    3498:	bd70      	pop	{r4, r5, r6, pc}
    349a:	46c0      	nop			; (mov r8, r8)
    349c:	00003750 	.word	0x00003750
    34a0:	00003754 	.word	0x00003754
    34a4:	3fffffff 	.word	0x3fffffff

000034a8 <__retarget_lock_acquire_recursive>:
    34a8:	4770      	bx	lr
    34aa:	46c0      	nop			; (mov r8, r8)

000034ac <__retarget_lock_release_recursive>:
    34ac:	4770      	bx	lr
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	646e6553 	.word	0x646e6553
    34b4:	72747320 	.word	0x72747320
    34b8:	73676e69 	.word	0x73676e69
    34bc:	72687420 	.word	0x72687420
    34c0:	6867756f 	.word	0x6867756f
    34c4:	72657420 	.word	0x72657420
    34c8:	616e696d 	.word	0x616e696d
    34cc:	6f74206c 	.word	0x6f74206c
    34d0:	65657320 	.word	0x65657320
    34d4:	73657220 	.word	0x73657220
    34d8:	736e6f70 	.word	0x736e6f70
    34dc:	0a217365 	.word	0x0a217365
    34e0:	00000000 	.word	0x00000000
    34e4:	00006e6f 	.word	0x00006e6f
    34e8:	63206e4f 	.word	0x63206e4f
    34ec:	616d6d6f 	.word	0x616d6d6f
    34f0:	7220646e 	.word	0x7220646e
    34f4:	69656365 	.word	0x69656365
    34f8:	21646576 	.word	0x21646576
    34fc:	72755420 	.word	0x72755420
    3500:	676e696e 	.word	0x676e696e
    3504:	2e6e6f20 	.word	0x2e6e6f20
    3508:	000a2e2e 	.word	0x000a2e2e
    350c:	20425355 	.word	0x20425355
    3510:	67756c70 	.word	0x67756c70
    3514:	20646567 	.word	0x20646567
    3518:	0a216e69 	.word	0x0a216e69
    351c:	00000000 	.word	0x00000000
    3520:	0066666f 	.word	0x0066666f
    3524:	6c6c6568 	.word	0x6c6c6568
    3528:	6f77206f 	.word	0x6f77206f
    352c:	00646c72 	.word	0x00646c72
    3530:	6c726f57 	.word	0x6c726f57
    3534:	68203a64 	.word	0x68203a64
    3538:	6f6c6c65 	.word	0x6f6c6c65
    353c:	00000a21 	.word	0x00000a21
    3540:	6f686365 	.word	0x6f686365
    3544:	00000000 	.word	0x00000000
    3548:	65636552 	.word	0x65636552
    354c:	64657669 	.word	0x64657669
    3550:	74616420 	.word	0x74616420
    3554:	69772061 	.word	0x69772061
    3558:	6e206c6c 	.word	0x6e206c6c
    355c:	6220776f 	.word	0x6220776f
    3560:	63652065 	.word	0x63652065
    3564:	64656f68 	.word	0x64656f68
    3568:	00000a21 	.word	0x00000a21
    356c:	67655228 	.word	0x67655228
    3570:	72616c75 	.word	0x72616c75
    3574:	6e756620 	.word	0x6e756620
    3578:	6f697463 	.word	0x6f697463
    357c:	6977206e 	.word	0x6977206e
    3580:	63206c6c 	.word	0x63206c6c
    3584:	65736165 	.word	0x65736165
    3588:	746e7520 	.word	0x746e7520
    358c:	75206c69 	.word	0x75206c69
    3590:	756c706e 	.word	0x756c706e
    3594:	64656767 	.word	0x64656767
    3598:	00000a29 	.word	0x00000a29
    359c:	65746e69 	.word	0x65746e69
    35a0:	5f726567 	.word	0x5f726567
    35a4:	00000000 	.word	0x00000000
    35a8:	65746e49 	.word	0x65746e49
    35ac:	3a726567 	.word	0x3a726567
    35b0:	00000020 	.word	0x00000020
    35b4:	61757173 	.word	0x61757173
    35b8:	005f6572 	.word	0x005f6572
    35bc:	61757153 	.word	0x61757153
    35c0:	76206572 	.word	0x76206572
    35c4:	65756c61 	.word	0x65756c61
    35c8:	0000203a 	.word	0x0000203a
    35cc:	2066664f 	.word	0x2066664f
    35d0:	6d6d6f63 	.word	0x6d6d6f63
    35d4:	20646e61 	.word	0x20646e61
    35d8:	65636572 	.word	0x65636572
    35dc:	64657669 	.word	0x64657669
    35e0:	75542021 	.word	0x75542021
    35e4:	6e696e72 	.word	0x6e696e72
    35e8:	666f2067 	.word	0x666f2067
    35ec:	2e2e2e66 	.word	0x2e2e2e66
    35f0:	0000000a 	.word	0x0000000a
    35f4:	00001482 	.word	0x00001482
    35f8:	000013e6 	.word	0x000013e6
    35fc:	0000141c 	.word	0x0000141c
    3600:	0000144a 	.word	0x0000144a
    3604:	00001482 	.word	0x00001482
    3608:	00001482 	.word	0x00001482
    360c:	00001468 	.word	0x00001468
    3610:	0000141c 	.word	0x0000141c
    3614:	00001482 	.word	0x00001482
    3618:	00001482 	.word	0x00001482
    361c:	00001482 	.word	0x00001482
    3620:	00001482 	.word	0x00001482
    3624:	00001482 	.word	0x00001482
    3628:	00001482 	.word	0x00001482
    362c:	00001482 	.word	0x00001482
    3630:	000013f8 	.word	0x000013f8
    3634:	00001b84 	.word	0x00001b84
    3638:	00001b5e 	.word	0x00001b5e
    363c:	00001d86 	.word	0x00001d86
    3640:	00001b38 	.word	0x00001b38
    3644:	00001d86 	.word	0x00001d86
    3648:	00001aaa 	.word	0x00001aaa
    364c:	00001b2e 	.word	0x00001b2e
    3650:	00001d86 	.word	0x00001d86
    3654:	00001ac6 	.word	0x00001ac6
    3658:	00001ade 	.word	0x00001ade
    365c:	00001dc2 	.word	0x00001dc2
    3660:	00001db4 	.word	0x00001db4
    3664:	00001df2 	.word	0x00001df2
    3668:	00001dc2 	.word	0x00001dc2
    366c:	00001ed4 	.word	0x00001ed4
    3670:	00001ef4 	.word	0x00001ef4
    3674:	00001e04 	.word	0x00001e04
    3678:	00001e4e 	.word	0x00001e4e
    367c:	00001f0a 	.word	0x00001f0a

00003680 <_usbd_driver>:
    3680:	000007bd 0000083d 0000088d 0000096d     ....=.......m...
    3690:	00000a9d 00000000                       ........

00003698 <desc_device>:
    3698:	02000112 400102ef 4001cafe 02010100     .......@...@....
    36a8:	00000103                                ....

000036ac <desc_fs_configuration>:
    36ac:	004b0209 80000102 000b0832 00020202     ..K.....2.......
    36bc:	00040900 02020100 24050400 05012000     ...........$. ..
    36cc:	01000124 02022404 00062405 81050701     $....$...$......
    36dc:	10000803 00010409 00000a02 02050700     ................
    36ec:	00004002 02820507 00000040              .@......@...

000036f8 <__compound_literal.0>:
    36f8:	00000409 796e6954 00425355 796e6954     ....TinyUSB.Tiny
    3708:	20425355 69766544 00006563 34333231     USB Device..1234
    3718:	00003635 796e6954 20425355 00434443     56..TinyUSB CDC.

00003728 <_global_impure_ptr>:
    3728:	20000038                                8.. 

0000372c <_init>:
    372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    372e:	46c0      	nop			; (mov r8, r8)
    3730:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3732:	bc08      	pop	{r3}
    3734:	469e      	mov	lr, r3
    3736:	4770      	bx	lr

00003738 <__init_array_start>:
    3738:	0000344d 	.word	0x0000344d

0000373c <__frame_dummy_init_array_entry>:
    373c:	000000dd 000005b1                       ........

00003744 <_fini>:
    3744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3746:	46c0      	nop			; (mov r8, r8)
    3748:	bcf8      	pop	{r3, r4, r5, r6, r7}
    374a:	bc08      	pop	{r3}
    374c:	469e      	mov	lr, r3
    374e:	4770      	bx	lr

00003750 <__fini_array_start>:
    3750:	000000b5 	.word	0x000000b5
