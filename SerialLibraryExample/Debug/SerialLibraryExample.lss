
SerialLibraryExample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005090  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00005090  00005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000474  20000000  00005098  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000007b8  20000474  0000550c  00020474  2**2
                  ALLOC
  4 .stack        00002004  20000c2c  00005cc4  00020474  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
  7 .debug_info   000291ad  00000000  00000000  000204f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f36  00000000  00000000  000496a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000a9a7  00000000  00000000  0004d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009c0  00000000  00000000  00057f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e60  00000000  00000000  0005893f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000185ad  00000000  00000000  0005979f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000acbc  00000000  00000000  00071d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00084f5c  00000000  00000000  0007ca08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001d74  00000000  00000000  00101964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	30 2c 00 20 19 01 00 00 15 01 00 00 15 01 00 00     0,. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	fd 06 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 e9 06 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000474 	.word	0x20000474
      d4:	00000000 	.word	0x00000000
      d8:	00005098 	.word	0x00005098

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000478 	.word	0x20000478
     108:	00005098 	.word	0x00005098
     10c:	00005098 	.word	0x00005098
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a23      	ldr	r2, [pc, #140]	; (1a8 <Reset_Handler+0x90>)
     11c:	4b23      	ldr	r3, [pc, #140]	; (1ac <Reset_Handler+0x94>)
     11e:	429a      	cmp	r2, r3
     120:	d009      	beq.n	136 <Reset_Handler+0x1e>
     122:	4b22      	ldr	r3, [pc, #136]	; (1ac <Reset_Handler+0x94>)
     124:	4a20      	ldr	r2, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     128:	6811      	ldr	r1, [r2, #0]
     12a:	6019      	str	r1, [r3, #0]
     12c:	3304      	adds	r3, #4
     12e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     130:	491f      	ldr	r1, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	428b      	cmp	r3, r1
     134:	d3f8      	bcc.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	4b1f      	ldr	r3, [pc, #124]	; (1b4 <Reset_Handler+0x9c>)
     138:	e002      	b.n	140 <Reset_Handler+0x28>
                *pDest++ = 0;
     13a:	2200      	movs	r2, #0
     13c:	601a      	str	r2, [r3, #0]
     13e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     140:	4a1d      	ldr	r2, [pc, #116]	; (1b8 <Reset_Handler+0xa0>)
     142:	4293      	cmp	r3, r2
     144:	d3f9      	bcc.n	13a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	4a1d      	ldr	r2, [pc, #116]	; (1bc <Reset_Handler+0xa4>)
     148:	21ff      	movs	r1, #255	; 0xff
     14a:	4b1d      	ldr	r3, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
     14c:	438b      	bics	r3, r1
     14e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     150:	39fd      	subs	r1, #253	; 0xfd
     152:	2390      	movs	r3, #144	; 0x90
     154:	005b      	lsls	r3, r3, #1
     156:	4a1b      	ldr	r2, [pc, #108]	; (1c4 <Reset_Handler+0xac>)
     158:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4a1b      	ldr	r2, [pc, #108]	; (1c8 <Reset_Handler+0xb0>)
     15c:	78d3      	ldrb	r3, [r2, #3]
     15e:	2503      	movs	r5, #3
     160:	43ab      	bics	r3, r5
     162:	2402      	movs	r4, #2
     164:	4323      	orrs	r3, r4
     166:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	270c      	movs	r7, #12
     16c:	43bb      	bics	r3, r7
     16e:	2608      	movs	r6, #8
     170:	4333      	orrs	r3, r6
     172:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     174:	4b15      	ldr	r3, [pc, #84]	; (1cc <Reset_Handler+0xb4>)
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	2230      	movs	r2, #48	; 0x30
     17a:	4390      	bics	r0, r2
     17c:	2220      	movs	r2, #32
     17e:	4310      	orrs	r0, r2
     180:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     182:	7b99      	ldrb	r1, [r3, #14]
     184:	43b9      	bics	r1, r7
     186:	4331      	orrs	r1, r6
     188:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     18a:	7b9a      	ldrb	r2, [r3, #14]
     18c:	43aa      	bics	r2, r5
     18e:	4322      	orrs	r2, r4
     190:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     192:	4a0f      	ldr	r2, [pc, #60]	; (1d0 <Reset_Handler+0xb8>)
     194:	6851      	ldr	r1, [r2, #4]
     196:	2380      	movs	r3, #128	; 0x80
     198:	430b      	orrs	r3, r1
     19a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     19c:	4b0d      	ldr	r3, [pc, #52]	; (1d4 <Reset_Handler+0xbc>)
     19e:	4798      	blx	r3
        main();
     1a0:	4b0d      	ldr	r3, [pc, #52]	; (1d8 <Reset_Handler+0xc0>)
     1a2:	4798      	blx	r3
     1a4:	e7fe      	b.n	1a4 <Reset_Handler+0x8c>
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	00005098 	.word	0x00005098
     1ac:	20000000 	.word	0x20000000
     1b0:	20000474 	.word	0x20000474
     1b4:	20000474 	.word	0x20000474
     1b8:	20000c2c 	.word	0x20000c2c
     1bc:	e000ed00 	.word	0xe000ed00
     1c0:	00000000 	.word	0x00000000
     1c4:	41007000 	.word	0x41007000
     1c8:	41005000 	.word	0x41005000
     1cc:	41004800 	.word	0x41004800
     1d0:	41004000 	.word	0x41004000
     1d4:	00004919 	.word	0x00004919
     1d8:	00000f01 	.word	0x00000f01

000001dc <_ZN19ExampleStateMachine19DisabledStateActionEv>:
//state action functions
StateMachine::STT_STATE ExampleStateMachine::DisabledStateAction(void)
{
	//do nothing
	return STT_STATE::INITIALIZING;
}
     1dc:	2001      	movs	r0, #1
     1de:	4770      	bx	lr

000001e0 <_ZN19ExampleStateMachine23InitializingStateActionEv>:

StateMachine::STT_STATE ExampleStateMachine::InitializingStateAction(void)
{
     1e0:	b510      	push	{r4, lr}
     1e2:	b092      	sub	sp, #72	; 0x48
	//TODO: CHANGE CLOCK INITIALIZATION TO FIT HARDWARE
	// Switch CPU clock source to 32 kHz ultra low power oscillator
	Util::enterCriticalSection();
     1e4:	4b30      	ldr	r3, [pc, #192]	; (2a8 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xc8>)
     1e6:	4798      	blx	r3
	GCLK->GENCTRL.reg = GCLK_GENCTRL_SRC(GCLK_SOURCE_OSCULP32K) | GCLK_GENCTRL_GENEN;  // Change generator 0 source
     1e8:	4a30      	ldr	r2, [pc, #192]	; (2ac <_ZN19ExampleStateMachine23InitializingStateActionEv+0xcc>)
     1ea:	4b31      	ldr	r3, [pc, #196]	; (2b0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd0>)
     1ec:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);                                  // Wait for write to complete
     1ee:	4b30      	ldr	r3, [pc, #192]	; (2b0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd0>)
     1f0:	785b      	ldrb	r3, [r3, #1]
     1f2:	09db      	lsrs	r3, r3, #7
     1f4:	d1fb      	bne.n	1ee <_ZN19ExampleStateMachine23InitializingStateActionEv+0xe>

	// 8 MHz internal oscillator setup
	SYSCTRL->OSC8M.bit.ENABLE = 0x00u;                                 // Disable oscillator
     1f6:	4b2f      	ldr	r3, [pc, #188]	; (2b4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd4>)
     1f8:	6a19      	ldr	r1, [r3, #32]
     1fa:	2202      	movs	r2, #2
     1fc:	4391      	bics	r1, r2
     1fe:	6219      	str	r1, [r3, #32]
	while(SYSCTRL->OSC8M.bit.ENABLE);                                  // Wait for oscillator to stop
     200:	4b2c      	ldr	r3, [pc, #176]	; (2b4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd4>)
     202:	6a1b      	ldr	r3, [r3, #32]
     204:	079b      	lsls	r3, r3, #30
     206:	d4fb      	bmi.n	200 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x20>
	SYSCTRL->OSC8M.bit.PRESC = 0x00u;                                  // Set options
     208:	4b2a      	ldr	r3, [pc, #168]	; (2b4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd4>)
     20a:	6a19      	ldr	r1, [r3, #32]
     20c:	4a2a      	ldr	r2, [pc, #168]	; (2b8 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd8>)
     20e:	400a      	ands	r2, r1
     210:	621a      	str	r2, [r3, #32]
	SYSCTRL->OSC8M.bit.ENABLE = 0x01u;                                 // Enable oscillator
     212:	6a19      	ldr	r1, [r3, #32]
     214:	2202      	movs	r2, #2
     216:	430a      	orrs	r2, r1
     218:	621a      	str	r2, [r3, #32]
	while(!(SYSCTRL->OSC8M.bit.ENABLE));                               // Wait for oscillator to become ready
     21a:	4b26      	ldr	r3, [pc, #152]	; (2b4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd4>)
     21c:	6a1b      	ldr	r3, [r3, #32]
     21e:	079b      	lsls	r3, r3, #30
     220:	d5fb      	bpl.n	21a <_ZN19ExampleStateMachine23InitializingStateActionEv+0x3a>

	// Set Generic Clock Generator 0 to use the 8 MHz oscillator
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC(GCLK_SOURCE_OSC8M) | GCLK_GENCTRL_GENEN;  // Change generator 0 source
     222:	2283      	movs	r2, #131	; 0x83
     224:	0252      	lsls	r2, r2, #9
     226:	4b22      	ldr	r3, [pc, #136]	; (2b0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd0>)
     228:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);                                  // Wait for write to complete
     22a:	4b21      	ldr	r3, [pc, #132]	; (2b0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xd0>)
     22c:	785b      	ldrb	r3, [r3, #1]
     22e:	09db      	lsrs	r3, r3, #7
     230:	d1fb      	bne.n	22a <_ZN19ExampleStateMachine23InitializingStateActionEv+0x4a>
	Util::exitCriticalSection();
     232:	4b22      	ldr	r3, [pc, #136]	; (2bc <_ZN19ExampleStateMachine23InitializingStateActionEv+0xdc>)
     234:	4798      	blx	r3
	
	//init
	#ifdef USING_LORA
	SPISAMD21::SetGenClk((SERCOMSAMD21::GenericClock)STT_SPI_GENCLK);
     236:	2200      	movs	r2, #0
     238:	2100      	movs	r1, #0
     23a:	2003      	movs	r0, #3
     23c:	4b20      	ldr	r3, [pc, #128]	; (2c0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xe0>)
     23e:	4798      	blx	r3
	LoRa::Config com3_lora_config;
	LoRa::GetConfigDefaults(&com3_lora_config);
     240:	4668      	mov	r0, sp
     242:	4b20      	ldr	r3, [pc, #128]	; (2c4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xe4>)
     244:	4798      	blx	r3
	SPISAMD21::GetPeripheralDefaults(&(com3_lora_config.spi_sercom), SERCOMSAMD21::SercomID::Sercom3);
     246:	2103      	movs	r1, #3
     248:	4668      	mov	r0, sp
     24a:	4b1f      	ldr	r3, [pc, #124]	; (2c8 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xe8>)
     24c:	4798      	blx	r3
	com3_lora_config.spi_sercom.ssl_pin = (SERCOMHAL::Pinout){0,0,7};
     24e:	2300      	movs	r3, #0
     250:	466a      	mov	r2, sp
     252:	72d3      	strb	r3, [r2, #11]
     254:	7313      	strb	r3, [r2, #12]
     256:	2207      	movs	r2, #7
     258:	4669      	mov	r1, sp
     25a:	734a      	strb	r2, [r1, #13]
	com3_lora_config.busy_pin = (SERCOMHAL::Pinout){0, 0, 17};
     25c:	770b      	strb	r3, [r1, #28]
     25e:	774b      	strb	r3, [r1, #29]
     260:	2211      	movs	r2, #17
     262:	778a      	strb	r2, [r1, #30]
	com3_lora_config.irq_pin = (SERCOMHAL::Pinout){0, 0, 4};
     264:	77cb      	strb	r3, [r1, #31]
     266:	2220      	movs	r2, #32
     268:	548b      	strb	r3, [r1, r2]
     26a:	3a1c      	subs	r2, #28
     26c:	3321      	adds	r3, #33	; 0x21
     26e:	54ca      	strb	r2, [r1, r3]
	com3_lora_config.reset_pin = (SERCOMHAL::Pinout){0, 1, 2};
     270:	3a01      	subs	r2, #1
     272:	4916      	ldr	r1, [pc, #88]	; (2cc <_ZN19ExampleStateMachine23InitializingStateActionEv+0xec>)
     274:	2022      	movs	r0, #34	; 0x22
     276:	4468      	add	r0, sp
     278:	4b15      	ldr	r3, [pc, #84]	; (2d0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xf0>)
     27a:	4798      	blx	r3
	lora_controller.Init(&com3_lora_config, lora_rx, sizeof(lora_rx));
     27c:	4a15      	ldr	r2, [pc, #84]	; (2d4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xf4>)
     27e:	1d10      	adds	r0, r2, #4
     280:	2301      	movs	r3, #1
     282:	4669      	mov	r1, sp
     284:	4c14      	ldr	r4, [pc, #80]	; (2d8 <_ZN19ExampleStateMachine23InitializingStateActionEv+0xf8>)
     286:	47a0      	blx	r4
	#endif
	
	usb_controller.Init(RX_BUFFER, sizeof(RX_BUFFER));
     288:	4c14      	ldr	r4, [pc, #80]	; (2dc <_ZN19ExampleStateMachine23InitializingStateActionEv+0xfc>)
     28a:	3470      	adds	r4, #112	; 0x70
     28c:	2280      	movs	r2, #128	; 0x80
     28e:	0092      	lsls	r2, r2, #2
     290:	4913      	ldr	r1, [pc, #76]	; (2e0 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x100>)
     292:	3170      	adds	r1, #112	; 0x70
     294:	0020      	movs	r0, r4
     296:	4b13      	ldr	r3, [pc, #76]	; (2e4 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x104>)
     298:	4798      	blx	r3
	usb_controller.Task();
     29a:	2100      	movs	r1, #0
     29c:	0020      	movs	r0, r4
     29e:	4b12      	ldr	r3, [pc, #72]	; (2e8 <_ZN19ExampleStateMachine23InitializingStateActionEv+0x108>)
     2a0:	4798      	blx	r3
	
	return STT_STATE::DISCONNECTED;
}
     2a2:	2002      	movs	r0, #2
     2a4:	b012      	add	sp, #72	; 0x48
     2a6:	bd10      	pop	{r4, pc}
     2a8:	000045a1 	.word	0x000045a1
     2ac:	00010300 	.word	0x00010300
     2b0:	40000c00 	.word	0x40000c00
     2b4:	40000800 	.word	0x40000800
     2b8:	fffffcff 	.word	0xfffffcff
     2bc:	000045b9 	.word	0x000045b9
     2c0:	000037d9 	.word	0x000037d9
     2c4:	00000725 	.word	0x00000725
     2c8:	00003689 	.word	0x00003689
     2cc:	00004c34 	.word	0x00004c34
     2d0:	00004961 	.word	0x00004961
     2d4:	20000490 	.word	0x20000490
     2d8:	00000ac1 	.word	0x00000ac1
     2dc:	20000790 	.word	0x20000790
     2e0:	20000590 	.word	0x20000590
     2e4:	000043b1 	.word	0x000043b1
     2e8:	00004259 	.word	0x00004259

000002ec <_ZN19ExampleStateMachine21PromptUserStateActionEv>:
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
	return current_state;
}

StateMachine::STT_STATE ExampleStateMachine::PromptUserStateAction(void)
{
     2ec:	b570      	push	{r4, r5, r6, lr}
	usb_controller.Task();
     2ee:	4c0c      	ldr	r4, [pc, #48]	; (320 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x34>)
     2f0:	3470      	adds	r4, #112	; 0x70
     2f2:	2100      	movs	r1, #0
     2f4:	0020      	movs	r0, r4
     2f6:	4b0b      	ldr	r3, [pc, #44]	; (324 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x38>)
     2f8:	4798      	blx	r3
	usb_controller.TransmitString("Send a command to test it out!\n\n");\
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x3c>)
     2fc:	0020      	movs	r0, r4
     2fe:	4d0b      	ldr	r5, [pc, #44]	; (32c <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x40>)
     300:	47a8      	blx	r5
	usb_controller.TransmitString("Command list:\n");
     302:	490b      	ldr	r1, [pc, #44]	; (330 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x44>)
     304:	0020      	movs	r0, r4
     306:	47a8      	blx	r5
	usb_controller.TransmitString("\"lora_hello_world\" -> sends hello world through LoRa radio.\n");
     308:	490a      	ldr	r1, [pc, #40]	; (334 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x48>)
     30a:	0020      	movs	r0, r4
     30c:	47a8      	blx	r5
	usb_controller.TransmitString("\"lora_integer_#\" -> sends an ASCII integer through LoRa radio (replace # with a valid integer.\n");
     30e:	490a      	ldr	r1, [pc, #40]	; (338 <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x4c>)
     310:	0020      	movs	r0, r4
     312:	47a8      	blx	r5
	usb_controller.TransmitString("\"off\" -> turn off.\n");
     314:	4909      	ldr	r1, [pc, #36]	; (33c <_ZN19ExampleStateMachine21PromptUserStateActionEv+0x50>)
     316:	0020      	movs	r0, r4
     318:	47a8      	blx	r5
	return STT_STATE::WAIT_FOR_RESPONSE;
}
     31a:	2004      	movs	r0, #4
     31c:	bd70      	pop	{r4, r5, r6, pc}
     31e:	46c0      	nop			; (mov r8, r8)
     320:	20000790 	.word	0x20000790
     324:	00004259 	.word	0x00004259
     328:	00004c38 	.word	0x00004c38
     32c:	000041b1 	.word	0x000041b1
     330:	00004c5c 	.word	0x00004c5c
     334:	00004c6c 	.word	0x00004c6c
     338:	00004cac 	.word	0x00004cac
     33c:	00004d0c 	.word	0x00004d0c

00000340 <_ZN19ExampleStateMachine17LoraHwStateActionEv>:
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
	return current_state;
}

StateMachine::STT_STATE ExampleStateMachine::LoraHwStateAction(void)
{
     340:	b510      	push	{r4, lr}
	usb_controller.Task();
     342:	2100      	movs	r1, #0
     344:	4811      	ldr	r0, [pc, #68]	; (38c <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x4c>)
     346:	3070      	adds	r0, #112	; 0x70
     348:	4b11      	ldr	r3, [pc, #68]	; (390 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x50>)
     34a:	4798      	blx	r3
	#ifdef USING_LORA
	if(lora_controller.TransmitString("hello world",TIMEOUT))
     34c:	22fa      	movs	r2, #250	; 0xfa
     34e:	00d2      	lsls	r2, r2, #3
     350:	4910      	ldr	r1, [pc, #64]	; (394 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x54>)
     352:	4811      	ldr	r0, [pc, #68]	; (398 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x58>)
     354:	3004      	adds	r0, #4
     356:	4b11      	ldr	r3, [pc, #68]	; (39c <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x5c>)
     358:	4798      	blx	r3
     35a:	2800      	cmp	r0, #0
     35c:	d10b      	bne.n	376 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x36>
		usb_controller.Task();
		usb_controller.TransmitString("Transmitted hello world through LoRa!\n");
	}
	else
	{
		usb_controller.Task();
     35e:	4c0b      	ldr	r4, [pc, #44]	; (38c <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x4c>)
     360:	3470      	adds	r4, #112	; 0x70
     362:	2100      	movs	r1, #0
     364:	0020      	movs	r0, r4
     366:	4b0a      	ldr	r3, [pc, #40]	; (390 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x50>)
     368:	4798      	blx	r3
		usb_controller.TransmitString("LoRa timed out!\n");
     36a:	490d      	ldr	r1, [pc, #52]	; (3a0 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x60>)
     36c:	0020      	movs	r0, r4
     36e:	4b0d      	ldr	r3, [pc, #52]	; (3a4 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x64>)
     370:	4798      	blx	r3
	}
	#else
	usb_controller.TransmitString("Not using LoRa!\n");
	#endif
	return STT_STATE::WAIT_FOR_RESPONSE;
}
     372:	2004      	movs	r0, #4
     374:	bd10      	pop	{r4, pc}
		usb_controller.Task();
     376:	4c05      	ldr	r4, [pc, #20]	; (38c <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x4c>)
     378:	3470      	adds	r4, #112	; 0x70
     37a:	2100      	movs	r1, #0
     37c:	0020      	movs	r0, r4
     37e:	4b04      	ldr	r3, [pc, #16]	; (390 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x50>)
     380:	4798      	blx	r3
		usb_controller.TransmitString("Transmitted hello world through LoRa!\n");
     382:	4909      	ldr	r1, [pc, #36]	; (3a8 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x68>)
     384:	0020      	movs	r0, r4
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x64>)
     388:	4798      	blx	r3
     38a:	e7f2      	b.n	372 <_ZN19ExampleStateMachine17LoraHwStateActionEv+0x32>
     38c:	20000790 	.word	0x20000790
     390:	00004259 	.word	0x00004259
     394:	00004d20 	.word	0x00004d20
     398:	20000490 	.word	0x20000490
     39c:	000009e9 	.word	0x000009e9
     3a0:	00004d54 	.word	0x00004d54
     3a4:	000041b1 	.word	0x000041b1
     3a8:	00004d2c 	.word	0x00004d2c

000003ac <_ZN19ExampleStateMachine18LoraIntStateActionEv>:

StateMachine::STT_STATE ExampleStateMachine::LoraIntStateAction(void)
{
     3ac:	b570      	push	{r4, r5, r6, lr}
	usb_controller.Task();
     3ae:	2100      	movs	r1, #0
     3b0:	4816      	ldr	r0, [pc, #88]	; (40c <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x60>)
     3b2:	3070      	adds	r0, #112	; 0x70
     3b4:	4b16      	ldr	r3, [pc, #88]	; (410 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x64>)
     3b6:	4798      	blx	r3
	#ifdef USING_LORA
	if(lora_controller.TransmitInt(param,TIMEOUT))
     3b8:	4b16      	ldr	r3, [pc, #88]	; (414 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x68>)
     3ba:	6919      	ldr	r1, [r3, #16]
     3bc:	22fa      	movs	r2, #250	; 0xfa
     3be:	00d2      	lsls	r2, r2, #3
     3c0:	4815      	ldr	r0, [pc, #84]	; (418 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x6c>)
     3c2:	3004      	adds	r0, #4
     3c4:	4b15      	ldr	r3, [pc, #84]	; (41c <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x70>)
     3c6:	4798      	blx	r3
     3c8:	2800      	cmp	r0, #0
     3ca:	d10b      	bne.n	3e4 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x38>
		usb_controller.TransmitInt(param);
		usb_controller.TransmitString("through LoRa!\n");
	}
	else
	{
		usb_controller.Task();
     3cc:	4c0f      	ldr	r4, [pc, #60]	; (40c <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x60>)
     3ce:	3470      	adds	r4, #112	; 0x70
     3d0:	2100      	movs	r1, #0
     3d2:	0020      	movs	r0, r4
     3d4:	4b0e      	ldr	r3, [pc, #56]	; (410 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x64>)
     3d6:	4798      	blx	r3
		usb_controller.TransmitString("LoRa timed out!\n");
     3d8:	4911      	ldr	r1, [pc, #68]	; (420 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x74>)
     3da:	0020      	movs	r0, r4
     3dc:	4b11      	ldr	r3, [pc, #68]	; (424 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x78>)
     3de:	4798      	blx	r3
	usb_controller.TransmitString("Not using LoRa! Integer param: ");
	usb_controller.TransmitInt(param);
	usb_controller.Transmit('\n');
	#endif
	return STT_STATE::WAIT_FOR_RESPONSE;
}
     3e0:	2004      	movs	r0, #4
     3e2:	bd70      	pop	{r4, r5, r6, pc}
		usb_controller.Task();
     3e4:	4c09      	ldr	r4, [pc, #36]	; (40c <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x60>)
     3e6:	3470      	adds	r4, #112	; 0x70
     3e8:	2100      	movs	r1, #0
     3ea:	0020      	movs	r0, r4
     3ec:	4b08      	ldr	r3, [pc, #32]	; (410 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x64>)
     3ee:	4798      	blx	r3
		usb_controller.TransmitString("Transmitted ");
     3f0:	490d      	ldr	r1, [pc, #52]	; (428 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x7c>)
     3f2:	0020      	movs	r0, r4
     3f4:	4d0b      	ldr	r5, [pc, #44]	; (424 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x78>)
     3f6:	47a8      	blx	r5
		usb_controller.TransmitInt(param);
     3f8:	4b06      	ldr	r3, [pc, #24]	; (414 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x68>)
     3fa:	6919      	ldr	r1, [r3, #16]
     3fc:	0020      	movs	r0, r4
     3fe:	4b0b      	ldr	r3, [pc, #44]	; (42c <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x80>)
     400:	4798      	blx	r3
		usb_controller.TransmitString("through LoRa!\n");
     402:	490b      	ldr	r1, [pc, #44]	; (430 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x84>)
     404:	0020      	movs	r0, r4
     406:	47a8      	blx	r5
     408:	e7ea      	b.n	3e0 <_ZN19ExampleStateMachine18LoraIntStateActionEv+0x34>
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	20000790 	.word	0x20000790
     410:	00004259 	.word	0x00004259
     414:	20000810 	.word	0x20000810
     418:	20000490 	.word	0x20000490
     41c:	00000a89 	.word	0x00000a89
     420:	00004d54 	.word	0x00004d54
     424:	000041b1 	.word	0x000041b1
     428:	00004d68 	.word	0x00004d68
     42c:	00004201 	.word	0x00004201
     430:	00004d44 	.word	0x00004d44

00000434 <_Z41__static_initialization_and_destruction_0ii>:
}

void USB_Handler(void)
{
	usb_controller.ISR();
}
     434:	b570      	push	{r4, r5, r6, lr}
     436:	2801      	cmp	r0, #1
     438:	d000      	beq.n	43c <_Z41__static_initialization_and_destruction_0ii+0x8>
     43a:	bd70      	pop	{r4, r5, r6, pc}
     43c:	4b0b      	ldr	r3, [pc, #44]	; (46c <_Z41__static_initialization_and_destruction_0ii+0x38>)
     43e:	4299      	cmp	r1, r3
     440:	d1fb      	bne.n	43a <_Z41__static_initialization_and_destruction_0ii+0x6>
SerialUSB::USBController usb_controller;
     442:	4c0b      	ldr	r4, [pc, #44]	; (470 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
     444:	3470      	adds	r4, #112	; 0x70
     446:	0020      	movs	r0, r4
     448:	4b0a      	ldr	r3, [pc, #40]	; (474 <_Z41__static_initialization_and_destruction_0ii+0x40>)
     44a:	4798      	blx	r3
     44c:	4d0a      	ldr	r5, [pc, #40]	; (478 <_Z41__static_initialization_and_destruction_0ii+0x44>)
     44e:	002a      	movs	r2, r5
     450:	490a      	ldr	r1, [pc, #40]	; (47c <_Z41__static_initialization_and_destruction_0ii+0x48>)
     452:	0020      	movs	r0, r4
     454:	4e0a      	ldr	r6, [pc, #40]	; (480 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
     456:	47b0      	blx	r6
LoRa::LoRaController lora_controller;
     458:	4c0a      	ldr	r4, [pc, #40]	; (484 <_Z41__static_initialization_and_destruction_0ii+0x50>)
     45a:	3404      	adds	r4, #4
     45c:	0020      	movs	r0, r4
     45e:	4b0a      	ldr	r3, [pc, #40]	; (488 <_Z41__static_initialization_and_destruction_0ii+0x54>)
     460:	4798      	blx	r3
     462:	002a      	movs	r2, r5
     464:	4909      	ldr	r1, [pc, #36]	; (48c <_Z41__static_initialization_and_destruction_0ii+0x58>)
     466:	0020      	movs	r0, r4
     468:	47b0      	blx	r6
}
     46a:	e7e6      	b.n	43a <_Z41__static_initialization_and_destruction_0ii+0x6>
     46c:	0000ffff 	.word	0x0000ffff
     470:	20000790 	.word	0x20000790
     474:	00004121 	.word	0x00004121
     478:	20000000 	.word	0x20000000
     47c:	00004375 	.word	0x00004375
     480:	000045cd 	.word	0x000045cd
     484:	20000490 	.word	0x20000490
     488:	00000785 	.word	0x00000785
     48c:	00000ed5 	.word	0x00000ed5

00000490 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE>:
	state_machine->current_state = STT_STATE::DISABLED;
     490:	2300      	movs	r3, #0
     492:	7003      	strb	r3, [r0, #0]
	state_machine->state_actions[STT_STATE::DISABLED] = &DisabledStateAction;
     494:	4b07      	ldr	r3, [pc, #28]	; (4b4 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x24>)
     496:	6043      	str	r3, [r0, #4]
	state_machine->state_actions[STT_STATE::INITIALIZING] = &InitializingStateAction;
     498:	4b07      	ldr	r3, [pc, #28]	; (4b8 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x28>)
     49a:	6083      	str	r3, [r0, #8]
	state_machine->state_actions[STT_STATE::DISCONNECTED] = &DisconnectedStateAction;
     49c:	4b07      	ldr	r3, [pc, #28]	; (4bc <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x2c>)
     49e:	60c3      	str	r3, [r0, #12]
	state_machine->state_actions[STT_STATE::PROMPT_USER] = &PromptUserStateAction;
     4a0:	4b07      	ldr	r3, [pc, #28]	; (4c0 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x30>)
     4a2:	6103      	str	r3, [r0, #16]
	state_machine->state_actions[STT_STATE::WAIT_FOR_RESPONSE] = &WaitForResponseStateAction;
     4a4:	4b07      	ldr	r3, [pc, #28]	; (4c4 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x34>)
     4a6:	6143      	str	r3, [r0, #20]
	state_machine->state_actions[STT_STATE::LORA_HW] = &LoraHwStateAction;
     4a8:	4b07      	ldr	r3, [pc, #28]	; (4c8 <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x38>)
     4aa:	6183      	str	r3, [r0, #24]
	state_machine->state_actions[STT_STATE::LORA_INT] = &LoraIntStateAction;
     4ac:	4b07      	ldr	r3, [pc, #28]	; (4cc <_ZN19ExampleStateMachine22GetExampleStateMachineEPN12StateMachine11STT_MACHINEE+0x3c>)
     4ae:	61c3      	str	r3, [r0, #28]
}
     4b0:	4770      	bx	lr
     4b2:	46c0      	nop			; (mov r8, r8)
     4b4:	000001dd 	.word	0x000001dd
     4b8:	000001e1 	.word	0x000001e1
     4bc:	000004f1 	.word	0x000004f1
     4c0:	000002ed 	.word	0x000002ed
     4c4:	00000689 	.word	0x00000689
     4c8:	00000341 	.word	0x00000341
     4cc:	000003ad 	.word	0x000003ad

000004d0 <_ZN19ExampleStateMachine6TurnOnEv>:
{
     4d0:	b510      	push	{r4, lr}
	return usb_controller.ReceiveString("on");
     4d2:	2301      	movs	r3, #1
     4d4:	2200      	movs	r2, #0
     4d6:	4903      	ldr	r1, [pc, #12]	; (4e4 <_ZN19ExampleStateMachine6TurnOnEv+0x14>)
     4d8:	4803      	ldr	r0, [pc, #12]	; (4e8 <_ZN19ExampleStateMachine6TurnOnEv+0x18>)
     4da:	3070      	adds	r0, #112	; 0x70
     4dc:	4c03      	ldr	r4, [pc, #12]	; (4ec <_ZN19ExampleStateMachine6TurnOnEv+0x1c>)
     4de:	47a0      	blx	r4
}
     4e0:	bd10      	pop	{r4, pc}
     4e2:	46c0      	nop			; (mov r8, r8)
     4e4:	00004d78 	.word	0x00004d78
     4e8:	20000790 	.word	0x20000790
     4ec:	000041e9 	.word	0x000041e9

000004f0 <_ZN19ExampleStateMachine23DisconnectedStateActionEv>:
{
     4f0:	b510      	push	{r4, lr}
     4f2:	b082      	sub	sp, #8
	StateMachine::STT_STATE current_state = STT_STATE::DISCONNECTED;
     4f4:	2202      	movs	r2, #2
     4f6:	466b      	mov	r3, sp
     4f8:	71da      	strb	r2, [r3, #7]
	usb_controller.Task();
     4fa:	2100      	movs	r1, #0
     4fc:	480d      	ldr	r0, [pc, #52]	; (534 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x44>)
     4fe:	3070      	adds	r0, #112	; 0x70
     500:	4b0d      	ldr	r3, [pc, #52]	; (538 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x48>)
     502:	4798      	blx	r3
	if(TurnOn())
     504:	4b0d      	ldr	r3, [pc, #52]	; (53c <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x4c>)
     506:	4798      	blx	r3
     508:	2800      	cmp	r0, #0
     50a:	d109      	bne.n	520 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x30>
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
     50c:	466b      	mov	r3, sp
     50e:	1ddc      	adds	r4, r3, #7
     510:	4a0b      	ldr	r2, [pc, #44]	; (540 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x50>)
     512:	2107      	movs	r1, #7
     514:	0020      	movs	r0, r4
     516:	4b0b      	ldr	r3, [pc, #44]	; (544 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x54>)
     518:	4798      	blx	r3
	return current_state;
     51a:	7820      	ldrb	r0, [r4, #0]
}
     51c:	b002      	add	sp, #8
     51e:	bd10      	pop	{r4, pc}
		usb_controller.TransmitString("Received on command! Turning on...\n\n");
     520:	4909      	ldr	r1, [pc, #36]	; (548 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x58>)
     522:	4804      	ldr	r0, [pc, #16]	; (534 <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x44>)
     524:	3070      	adds	r0, #112	; 0x70
     526:	4b09      	ldr	r3, [pc, #36]	; (54c <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x5c>)
     528:	4798      	blx	r3
		current_state = STT_STATE::PROMPT_USER;
     52a:	2203      	movs	r2, #3
     52c:	466b      	mov	r3, sp
     52e:	71da      	strb	r2, [r3, #7]
     530:	e7ec      	b.n	50c <_ZN19ExampleStateMachine23DisconnectedStateActionEv+0x1c>
     532:	46c0      	nop			; (mov r8, r8)
     534:	20000790 	.word	0x20000790
     538:	00004259 	.word	0x00004259
     53c:	000004d1 	.word	0x000004d1
     540:	000005f5 	.word	0x000005f5
     544:	0000458f 	.word	0x0000458f
     548:	00004d7c 	.word	0x00004d7c
     54c:	000041b1 	.word	0x000041b1

00000550 <_ZN19ExampleStateMachine9UnpluggedEv>:
{
     550:	b510      	push	{r4, lr}
	bool unplugged =  connected && !usb_controller.IsConnected();
     552:	4b09      	ldr	r3, [pc, #36]	; (578 <_ZN19ExampleStateMachine9UnpluggedEv+0x28>)
     554:	7d1c      	ldrb	r4, [r3, #20]
     556:	2c00      	cmp	r4, #0
     558:	d106      	bne.n	568 <_ZN19ExampleStateMachine9UnpluggedEv+0x18>
	if(unplugged)
     55a:	2c00      	cmp	r4, #0
     55c:	d002      	beq.n	564 <_ZN19ExampleStateMachine9UnpluggedEv+0x14>
		connected = false;
     55e:	2200      	movs	r2, #0
     560:	4b05      	ldr	r3, [pc, #20]	; (578 <_ZN19ExampleStateMachine9UnpluggedEv+0x28>)
     562:	751a      	strb	r2, [r3, #20]
}
     564:	0020      	movs	r0, r4
     566:	bd10      	pop	{r4, pc}
	bool unplugged =  connected && !usb_controller.IsConnected();
     568:	4804      	ldr	r0, [pc, #16]	; (57c <_ZN19ExampleStateMachine9UnpluggedEv+0x2c>)
     56a:	3070      	adds	r0, #112	; 0x70
     56c:	4b04      	ldr	r3, [pc, #16]	; (580 <_ZN19ExampleStateMachine9UnpluggedEv+0x30>)
     56e:	4798      	blx	r3
     570:	2800      	cmp	r0, #0
     572:	d0f2      	beq.n	55a <_ZN19ExampleStateMachine9UnpluggedEv+0xa>
     574:	2400      	movs	r4, #0
     576:	e7f0      	b.n	55a <_ZN19ExampleStateMachine9UnpluggedEv+0xa>
     578:	20000810 	.word	0x20000810
     57c:	20000790 	.word	0x20000790
     580:	00004319 	.word	0x00004319

00000584 <_ZN19ExampleStateMachine8TxLoraHwEv>:
{
     584:	b510      	push	{r4, lr}
	return usb_controller.ReceiveString("lora_hello_world");
     586:	2301      	movs	r3, #1
     588:	2200      	movs	r2, #0
     58a:	4903      	ldr	r1, [pc, #12]	; (598 <_ZN19ExampleStateMachine8TxLoraHwEv+0x14>)
     58c:	4803      	ldr	r0, [pc, #12]	; (59c <_ZN19ExampleStateMachine8TxLoraHwEv+0x18>)
     58e:	3070      	adds	r0, #112	; 0x70
     590:	4c03      	ldr	r4, [pc, #12]	; (5a0 <_ZN19ExampleStateMachine8TxLoraHwEv+0x1c>)
     592:	47a0      	blx	r4
}
     594:	bd10      	pop	{r4, pc}
     596:	46c0      	nop			; (mov r8, r8)
     598:	00004da4 	.word	0x00004da4
     59c:	20000790 	.word	0x20000790
     5a0:	000041e9 	.word	0x000041e9

000005a4 <_ZN19ExampleStateMachine7TurnOffEv>:
{
     5a4:	b510      	push	{r4, lr}
	return usb_controller.ReceiveString("off");
     5a6:	2301      	movs	r3, #1
     5a8:	2200      	movs	r2, #0
     5aa:	4903      	ldr	r1, [pc, #12]	; (5b8 <_ZN19ExampleStateMachine7TurnOffEv+0x14>)
     5ac:	4803      	ldr	r0, [pc, #12]	; (5bc <_ZN19ExampleStateMachine7TurnOffEv+0x18>)
     5ae:	3070      	adds	r0, #112	; 0x70
     5b0:	4c03      	ldr	r4, [pc, #12]	; (5c0 <_ZN19ExampleStateMachine7TurnOffEv+0x1c>)
     5b2:	47a0      	blx	r4
}
     5b4:	bd10      	pop	{r4, pc}
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	00004db8 	.word	0x00004db8
     5bc:	20000790 	.word	0x20000790
     5c0:	000041e9 	.word	0x000041e9

000005c4 <_ZN19ExampleStateMachine9PluggedInEv>:
{
     5c4:	b510      	push	{r4, lr}
	bool plugged_in = !connected && usb_controller.IsConnected();
     5c6:	4b08      	ldr	r3, [pc, #32]	; (5e8 <_ZN19ExampleStateMachine9PluggedInEv+0x24>)
     5c8:	7d1b      	ldrb	r3, [r3, #20]
     5ca:	2b00      	cmp	r3, #0
     5cc:	d006      	beq.n	5dc <_ZN19ExampleStateMachine9PluggedInEv+0x18>
     5ce:	2000      	movs	r0, #0
	if(plugged_in)
     5d0:	2800      	cmp	r0, #0
     5d2:	d002      	beq.n	5da <_ZN19ExampleStateMachine9PluggedInEv+0x16>
		connected = true;
     5d4:	2201      	movs	r2, #1
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <_ZN19ExampleStateMachine9PluggedInEv+0x24>)
     5d8:	751a      	strb	r2, [r3, #20]
}
     5da:	bd10      	pop	{r4, pc}
	bool plugged_in = !connected && usb_controller.IsConnected();
     5dc:	4803      	ldr	r0, [pc, #12]	; (5ec <_ZN19ExampleStateMachine9PluggedInEv+0x28>)
     5de:	3070      	adds	r0, #112	; 0x70
     5e0:	4b03      	ldr	r3, [pc, #12]	; (5f0 <_ZN19ExampleStateMachine9PluggedInEv+0x2c>)
     5e2:	4798      	blx	r3
     5e4:	e7f4      	b.n	5d0 <_ZN19ExampleStateMachine9PluggedInEv+0xc>
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	20000810 	.word	0x20000810
     5ec:	20000790 	.word	0x20000790
     5f0:	00004319 	.word	0x00004319

000005f4 <_ZN19ExampleStateMachine16SuperStateActionEv>:
{
     5f4:	b510      	push	{r4, lr}
	usb_controller.Task();
     5f6:	2100      	movs	r1, #0
     5f8:	4810      	ldr	r0, [pc, #64]	; (63c <_ZN19ExampleStateMachine16SuperStateActionEv+0x48>)
     5fa:	3070      	adds	r0, #112	; 0x70
     5fc:	4b10      	ldr	r3, [pc, #64]	; (640 <_ZN19ExampleStateMachine16SuperStateActionEv+0x4c>)
     5fe:	4798      	blx	r3
	if(TurnOff())
     600:	4b10      	ldr	r3, [pc, #64]	; (644 <_ZN19ExampleStateMachine16SuperStateActionEv+0x50>)
     602:	4798      	blx	r3
     604:	2800      	cmp	r0, #0
     606:	d105      	bne.n	614 <_ZN19ExampleStateMachine16SuperStateActionEv+0x20>
	else if(Unplugged())
     608:	4b0f      	ldr	r3, [pc, #60]	; (648 <_ZN19ExampleStateMachine16SuperStateActionEv+0x54>)
     60a:	4798      	blx	r3
     60c:	2800      	cmp	r0, #0
     60e:	d008      	beq.n	622 <_ZN19ExampleStateMachine16SuperStateActionEv+0x2e>
		return STT_STATE::DISCONNECTED;
     610:	2002      	movs	r0, #2
     612:	e005      	b.n	620 <_ZN19ExampleStateMachine16SuperStateActionEv+0x2c>
		usb_controller.TransmitString("Received off command! Turning off...\n");
     614:	490d      	ldr	r1, [pc, #52]	; (64c <_ZN19ExampleStateMachine16SuperStateActionEv+0x58>)
     616:	4809      	ldr	r0, [pc, #36]	; (63c <_ZN19ExampleStateMachine16SuperStateActionEv+0x48>)
     618:	3070      	adds	r0, #112	; 0x70
     61a:	4b0d      	ldr	r3, [pc, #52]	; (650 <_ZN19ExampleStateMachine16SuperStateActionEv+0x5c>)
     61c:	4798      	blx	r3
		return STT_STATE::DISCONNECTED;
     61e:	2002      	movs	r0, #2
}
     620:	bd10      	pop	{r4, pc}
	else if(PluggedIn())
     622:	4b0c      	ldr	r3, [pc, #48]	; (654 <_ZN19ExampleStateMachine16SuperStateActionEv+0x60>)
     624:	4798      	blx	r3
     626:	2800      	cmp	r0, #0
     628:	d101      	bne.n	62e <_ZN19ExampleStateMachine16SuperStateActionEv+0x3a>
	return STT_STATE::SUPER;
     62a:	2007      	movs	r0, #7
     62c:	e7f8      	b.n	620 <_ZN19ExampleStateMachine16SuperStateActionEv+0x2c>
		usb_controller.TransmitString("USB Plugged in!\n");
     62e:	490a      	ldr	r1, [pc, #40]	; (658 <_ZN19ExampleStateMachine16SuperStateActionEv+0x64>)
     630:	4802      	ldr	r0, [pc, #8]	; (63c <_ZN19ExampleStateMachine16SuperStateActionEv+0x48>)
     632:	3070      	adds	r0, #112	; 0x70
     634:	4b06      	ldr	r3, [pc, #24]	; (650 <_ZN19ExampleStateMachine16SuperStateActionEv+0x5c>)
     636:	4798      	blx	r3
		return STT_STATE::PROMPT_USER;
     638:	2003      	movs	r0, #3
     63a:	e7f1      	b.n	620 <_ZN19ExampleStateMachine16SuperStateActionEv+0x2c>
     63c:	20000790 	.word	0x20000790
     640:	00004259 	.word	0x00004259
     644:	000005a5 	.word	0x000005a5
     648:	00000551 	.word	0x00000551
     64c:	00004dbc 	.word	0x00004dbc
     650:	000041b1 	.word	0x000041b1
     654:	000005c5 	.word	0x000005c5
     658:	00004de4 	.word	0x00004de4

0000065c <_ZN19ExampleStateMachine9TxLoraIntEv>:
{
     65c:	b510      	push	{r4, lr}
     65e:	b082      	sub	sp, #8
	return usb_controller.ReceiveParam(&param, "lora_integer_");
     660:	2308      	movs	r3, #8
     662:	9300      	str	r3, [sp, #0]
     664:	2300      	movs	r3, #0
     666:	4a04      	ldr	r2, [pc, #16]	; (678 <_ZN19ExampleStateMachine9TxLoraIntEv+0x1c>)
     668:	4904      	ldr	r1, [pc, #16]	; (67c <_ZN19ExampleStateMachine9TxLoraIntEv+0x20>)
     66a:	3110      	adds	r1, #16
     66c:	4804      	ldr	r0, [pc, #16]	; (680 <_ZN19ExampleStateMachine9TxLoraIntEv+0x24>)
     66e:	3070      	adds	r0, #112	; 0x70
     670:	4c04      	ldr	r4, [pc, #16]	; (684 <_ZN19ExampleStateMachine9TxLoraIntEv+0x28>)
     672:	47a0      	blx	r4
}
     674:	b002      	add	sp, #8
     676:	bd10      	pop	{r4, pc}
     678:	00004df8 	.word	0x00004df8
     67c:	20000810 	.word	0x20000810
     680:	20000790 	.word	0x20000790
     684:	00004225 	.word	0x00004225

00000688 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv>:
{
     688:	b510      	push	{r4, lr}
     68a:	b082      	sub	sp, #8
	StateMachine::STT_STATE current_state = STT_STATE::WAIT_FOR_RESPONSE;
     68c:	2204      	movs	r2, #4
     68e:	466b      	mov	r3, sp
     690:	71da      	strb	r2, [r3, #7]
	usb_controller.Task();
     692:	2100      	movs	r1, #0
     694:	480e      	ldr	r0, [pc, #56]	; (6d0 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x48>)
     696:	3070      	adds	r0, #112	; 0x70
     698:	4b0e      	ldr	r3, [pc, #56]	; (6d4 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x4c>)
     69a:	4798      	blx	r3
	if(TxLoraHw())
     69c:	4b0e      	ldr	r3, [pc, #56]	; (6d8 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x50>)
     69e:	4798      	blx	r3
     6a0:	2800      	cmp	r0, #0
     6a2:	d00c      	beq.n	6be <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x36>
		current_state = STT_STATE::LORA_HW;
     6a4:	2205      	movs	r2, #5
     6a6:	466b      	mov	r3, sp
     6a8:	71da      	strb	r2, [r3, #7]
	StateMachine::ProcessSuperState(&current_state, STT_STATE::SUPER, &SuperStateAction);
     6aa:	466b      	mov	r3, sp
     6ac:	1ddc      	adds	r4, r3, #7
     6ae:	4a0b      	ldr	r2, [pc, #44]	; (6dc <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x54>)
     6b0:	2107      	movs	r1, #7
     6b2:	0020      	movs	r0, r4
     6b4:	4b0a      	ldr	r3, [pc, #40]	; (6e0 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x58>)
     6b6:	4798      	blx	r3
	return current_state;
     6b8:	7820      	ldrb	r0, [r4, #0]
}
     6ba:	b002      	add	sp, #8
     6bc:	bd10      	pop	{r4, pc}
	else if(TxLoraInt())
     6be:	4b09      	ldr	r3, [pc, #36]	; (6e4 <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x5c>)
     6c0:	4798      	blx	r3
     6c2:	2800      	cmp	r0, #0
     6c4:	d0f1      	beq.n	6aa <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x22>
		current_state = STT_STATE::LORA_INT;
     6c6:	2206      	movs	r2, #6
     6c8:	466b      	mov	r3, sp
     6ca:	71da      	strb	r2, [r3, #7]
     6cc:	e7ed      	b.n	6aa <_ZN19ExampleStateMachine26WaitForResponseStateActionEv+0x22>
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	20000790 	.word	0x20000790
     6d4:	00004259 	.word	0x00004259
     6d8:	00000585 	.word	0x00000585
     6dc:	000005f5 	.word	0x000005f5
     6e0:	0000458f 	.word	0x0000458f
     6e4:	0000065d 	.word	0x0000065d

000006e8 <SERCOM3_Handler>:
{
     6e8:	b510      	push	{r4, lr}
	lora_controller.ISR();
     6ea:	4802      	ldr	r0, [pc, #8]	; (6f4 <SERCOM3_Handler+0xc>)
     6ec:	3004      	adds	r0, #4
     6ee:	4b02      	ldr	r3, [pc, #8]	; (6f8 <SERCOM3_Handler+0x10>)
     6f0:	4798      	blx	r3
}
     6f2:	bd10      	pop	{r4, pc}
     6f4:	20000490 	.word	0x20000490
     6f8:	000007ad 	.word	0x000007ad

000006fc <USB_Handler>:
{
     6fc:	b510      	push	{r4, lr}
	usb_controller.ISR();
     6fe:	4802      	ldr	r0, [pc, #8]	; (708 <USB_Handler+0xc>)
     700:	3070      	adds	r0, #112	; 0x70
     702:	4b02      	ldr	r3, [pc, #8]	; (70c <USB_Handler+0x10>)
     704:	4798      	blx	r3
}
     706:	bd10      	pop	{r4, pc}
     708:	20000790 	.word	0x20000790
     70c:	00004175 	.word	0x00004175

00000710 <_GLOBAL__sub_I_RX_BUFFER>:
     710:	b510      	push	{r4, lr}
     712:	4902      	ldr	r1, [pc, #8]	; (71c <_GLOBAL__sub_I_RX_BUFFER+0xc>)
     714:	2001      	movs	r0, #1
     716:	4b02      	ldr	r3, [pc, #8]	; (720 <_GLOBAL__sub_I_RX_BUFFER+0x10>)
     718:	4798      	blx	r3
     71a:	bd10      	pop	{r4, pc}
     71c:	0000ffff 	.word	0x0000ffff
     720:	00000435 	.word	0x00000435

00000724 <_ZN4LoRa17GetConfigDefaultsEPNS_6ConfigE>:
SERCOMHAL::Pinout LoRa::DEFAULT_LORA_IRQ_PIN = {0, 0, 0};
SERCOMHAL::Pinout LoRa::DEFAULT_LORA_RESET_PIN = {0, 0, 0};
#endif

void LoRa::GetConfigDefaults(LoRa::Config * config_peripheral)
{
     724:	b570      	push	{r4, r5, r6, lr}
     726:	0004      	movs	r4, r0
	SPIHAL::GetPeripheralDefaults(&(config_peripheral->spi_sercom));
     728:	4b12      	ldr	r3, [pc, #72]	; (774 <_ZN4LoRa17GetConfigDefaultsEPNS_6ConfigE+0x50>)
     72a:	4798      	blx	r3
	config_peripheral->busy_pin = DEFAULT_LORA_BUSY_PIN;
     72c:	4d12      	ldr	r5, [pc, #72]	; (778 <_ZN4LoRa17GetConfigDefaultsEPNS_6ConfigE+0x54>)
     72e:	882b      	ldrh	r3, [r5, #0]
     730:	83a3      	strh	r3, [r4, #28]
     732:	78ab      	ldrb	r3, [r5, #2]
     734:	77a3      	strb	r3, [r4, #30]
	config_peripheral->irq_pin = DEFAULT_LORA_IRQ_PIN;
     736:	0020      	movs	r0, r4
     738:	301f      	adds	r0, #31
     73a:	1d29      	adds	r1, r5, #4
     73c:	2203      	movs	r2, #3
     73e:	4e0f      	ldr	r6, [pc, #60]	; (77c <_ZN4LoRa17GetConfigDefaultsEPNS_6ConfigE+0x58>)
     740:	47b0      	blx	r6
	config_peripheral->reset_pin = DEFAULT_LORA_BUSY_PIN;
     742:	0020      	movs	r0, r4
     744:	3022      	adds	r0, #34	; 0x22
     746:	2203      	movs	r2, #3
     748:	0029      	movs	r1, r5
     74a:	47b0      	blx	r6
	config_peripheral->frequency = 915000000;
     74c:	4b0c      	ldr	r3, [pc, #48]	; (780 <_ZN4LoRa17GetConfigDefaultsEPNS_6ConfigE+0x5c>)
     74e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_peripheral->output_power = OutputPower::dBm22;
     750:	2300      	movs	r3, #0
     752:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_peripheral->ramp_time = TxRampTime::SET_RAMP_20U;
     754:	2201      	movs	r2, #1
     756:	6322      	str	r2, [r4, #48]	; 0x30
	config_peripheral->spread_factor = SpreadFactor::SF7;
     758:	2102      	movs	r1, #2
     75a:	6361      	str	r1, [r4, #52]	; 0x34
	config_peripheral->bandwidth = Bandwidth::LORA_BW_125;
     75c:	63a3      	str	r3, [r4, #56]	; 0x38
	config_peripheral->coding_rate = CodingRate::LORA_CR_4_5;
     75e:	63e3      	str	r3, [r4, #60]	; 0x3c
	config_peripheral->low_data_rate_opt = false;
     760:	313e      	adds	r1, #62	; 0x3e
     762:	5463      	strb	r3, [r4, r1]
	config_peripheral->preamble_symbols = 8;
     764:	2008      	movs	r0, #8
     766:	3102      	adds	r1, #2
     768:	5260      	strh	r0, [r4, r1]
	config_peripheral->crc_on = true;
     76a:	3102      	adds	r1, #2
     76c:	5462      	strb	r2, [r4, r1]
	config_peripheral->public_network = false;
     76e:	3244      	adds	r2, #68	; 0x44
     770:	54a3      	strb	r3, [r4, r2]
}
     772:	bd70      	pop	{r4, r5, r6, pc}
     774:	000037ed 	.word	0x000037ed
     778:	20000004 	.word	0x20000004
     77c:	00004961 	.word	0x00004961
     780:	3689cac0 	.word	0x3689cac0

00000784 <_ZN4LoRa14LoRaControllerC1Ev>:

LoRa::LoRaController::LoRaController(void)
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	3011      	adds	r0, #17
     78a:	30ff      	adds	r0, #255	; 0xff
     78c:	4b05      	ldr	r3, [pc, #20]	; (7a4 <_ZN4LoRa14LoRaControllerC1Ev+0x20>)
     78e:	4798      	blx	r3
     790:	0020      	movs	r0, r4
     792:	3051      	adds	r0, #81	; 0x51
     794:	30ff      	adds	r0, #255	; 0xff
     796:	2300      	movs	r3, #0
     798:	2200      	movs	r2, #0
     79a:	2100      	movs	r1, #0
     79c:	4d02      	ldr	r5, [pc, #8]	; (7a8 <_ZN4LoRa14LoRaControllerC1Ev+0x24>)
     79e:	47a8      	blx	r5
{
	//do nothing
}
     7a0:	0020      	movs	r0, r4
     7a2:	bd70      	pop	{r4, r5, r6, pc}
     7a4:	00003bdd 	.word	0x00003bdd
     7a8:	000030b1 	.word	0x000030b1

000007ac <_ZN4LoRa14LoRaController3ISREv>:
	spi_control.Deinit();
	ClearRxBuffer();
}

void LoRa::LoRaController::ISR(void)
{
     7ac:	b510      	push	{r4, lr}
	spi_control.ISR();
     7ae:	3011      	adds	r0, #17
     7b0:	30ff      	adds	r0, #255	; 0xff
     7b2:	4b01      	ldr	r3, [pc, #4]	; (7b8 <_ZN4LoRa14LoRaController3ISREv+0xc>)
     7b4:	4798      	blx	r3
}
     7b6:	bd10      	pop	{r4, pc}
     7b8:	00003dfd 	.word	0x00003dfd

000007bc <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh>:

uint8_t LoRa::LoRaController::SendOpCode(uint32_t num_read, uint8_t command, uint32_t num_params, uint8_t * params)
{
     7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
     7be:	b083      	sub	sp, #12
     7c0:	af00      	add	r7, sp, #0
     7c2:	0005      	movs	r5, r0
     7c4:	6079      	str	r1, [r7, #4]
     7c6:	6a38      	ldr	r0, [r7, #32]
	char spi_bytes[num_params + 1];
     7c8:	1c5c      	adds	r4, r3, #1
     7ca:	0019      	movs	r1, r3
     7cc:	3108      	adds	r1, #8
     7ce:	08c9      	lsrs	r1, r1, #3
     7d0:	00c9      	lsls	r1, r1, #3
     7d2:	466e      	mov	r6, sp
     7d4:	1a71      	subs	r1, r6, r1
     7d6:	468d      	mov	sp, r1
     7d8:	466e      	mov	r6, sp
	spi_bytes[0] = command;
     7da:	7032      	strb	r2, [r6, #0]
	for(uint32_t i = 0; i < num_params; i++)
     7dc:	2200      	movs	r2, #0
     7de:	429a      	cmp	r2, r3
     7e0:	d204      	bcs.n	7ec <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh+0x30>
	{
		spi_bytes[i+1] = params[i];
     7e2:	1c51      	adds	r1, r2, #1
     7e4:	5c82      	ldrb	r2, [r0, r2]
     7e6:	5472      	strb	r2, [r6, r1]
	for(uint32_t i = 0; i < num_params; i++)
     7e8:	000a      	movs	r2, r1
     7ea:	e7f8      	b.n	7de <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh+0x22>
	}
	//wait until busy pin is low
	while(SERCOMHAL::GetPinState(busy_pin));
     7ec:	2304      	movs	r3, #4
     7ee:	33ff      	adds	r3, #255	; 0xff
     7f0:	5ceb      	ldrb	r3, [r5, r3]
     7f2:	1d2a      	adds	r2, r5, #4
     7f4:	32ff      	adds	r2, #255	; 0xff
     7f6:	7850      	ldrb	r0, [r2, #1]
     7f8:	0200      	lsls	r0, r0, #8
     7fa:	4303      	orrs	r3, r0
     7fc:	7890      	ldrb	r0, [r2, #2]
     7fe:	0400      	lsls	r0, r0, #16
     800:	4318      	orrs	r0, r3
     802:	4b07      	ldr	r3, [pc, #28]	; (820 <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh+0x64>)
     804:	4798      	blx	r3
     806:	2800      	cmp	r0, #0
     808:	d1f0      	bne.n	7ec <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh+0x30>
	return spi_control.SPIHostProcedure(num_params + 1, spi_bytes, num_read);
     80a:	0028      	movs	r0, r5
     80c:	3011      	adds	r0, #17
     80e:	30ff      	adds	r0, #255	; 0xff
     810:	687b      	ldr	r3, [r7, #4]
     812:	0032      	movs	r2, r6
     814:	0021      	movs	r1, r4
     816:	4c03      	ldr	r4, [pc, #12]	; (824 <_ZN4LoRa14LoRaController10SendOpCodeEmhmPh+0x68>)
     818:	47a0      	blx	r4
}
     81a:	46bd      	mov	sp, r7
     81c:	b003      	add	sp, #12
     81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     820:	00003621 	.word	0x00003621
     824:	00003f91 	.word	0x00003f91

00000828 <_ZN4LoRa14LoRaController13WriteRegisterEth>:
{
	return spi_control.Receive(output);
}

void LoRa::LoRaController::WriteRegister(uint16_t address, uint8_t value)
{
     828:	b510      	push	{r4, lr}
     82a:	b084      	sub	sp, #16
	uint8_t write_to_reg_params[3] = {(uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF), value};
     82c:	0a0c      	lsrs	r4, r1, #8
     82e:	ab03      	add	r3, sp, #12
     830:	701c      	strb	r4, [r3, #0]
     832:	7059      	strb	r1, [r3, #1]
     834:	709a      	strb	r2, [r3, #2]
	SendOpCode(0, 0x0D, 3, write_to_reg_params);
     836:	9300      	str	r3, [sp, #0]
     838:	2303      	movs	r3, #3
     83a:	220d      	movs	r2, #13
     83c:	2100      	movs	r1, #0
     83e:	4c02      	ldr	r4, [pc, #8]	; (848 <_ZN4LoRa14LoRaController13WriteRegisterEth+0x20>)
     840:	47a0      	blx	r4
}
     842:	b004      	add	sp, #16
     844:	bd10      	pop	{r4, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	000007bd 	.word	0x000007bd

0000084c <_ZN4LoRa14LoRaController12ReadRegisterEt>:

uint8_t LoRa::LoRaController::ReadRegister(uint16_t address)
{
     84c:	b570      	push	{r4, r5, r6, lr}
     84e:	b084      	sub	sp, #16
     850:	0004      	movs	r4, r0
	uint8_t read_register_params[2] = {(uint8_t)((address >> 8) & 0xFF), (uint8_t)(address & 0xFF)};
     852:	0a0a      	lsrs	r2, r1, #8
     854:	ab03      	add	r3, sp, #12
     856:	701a      	strb	r2, [r3, #0]
     858:	7059      	strb	r1, [r3, #1]
	SendOpCode(2, 0x1D, 2, read_register_params);
     85a:	9300      	str	r3, [sp, #0]
     85c:	2302      	movs	r3, #2
     85e:	221d      	movs	r2, #29
     860:	2102      	movs	r1, #2
     862:	4d08      	ldr	r5, [pc, #32]	; (884 <_ZN4LoRa14LoRaController12ReadRegisterEt+0x38>)
     864:	47a8      	blx	r5
	//one status bit read before register reading begins
	spi_control.Receive();
     866:	3411      	adds	r4, #17
     868:	34ff      	adds	r4, #255	; 0xff
     86a:	2100      	movs	r1, #0
     86c:	0020      	movs	r0, r4
     86e:	4e06      	ldr	r6, [pc, #24]	; (888 <_ZN4LoRa14LoRaController12ReadRegisterEt+0x3c>)
     870:	47b0      	blx	r6
	char output;
	spi_control.Receive(&output);
     872:	250b      	movs	r5, #11
     874:	446d      	add	r5, sp
     876:	0029      	movs	r1, r5
     878:	0020      	movs	r0, r4
     87a:	47b0      	blx	r6
	return output;
     87c:	7828      	ldrb	r0, [r5, #0]
}
     87e:	b004      	add	sp, #16
     880:	bd70      	pop	{r4, r5, r6, pc}
     882:	46c0      	nop			; (mov r8, r8)
     884:	000007bd 	.word	0x000007bd
     888:	00003d39 	.word	0x00003d39

0000088c <_ZN4LoRa14LoRaController12GetIRQStatusEv>:

uint16_t LoRa::LoRaController::GetIRQStatus(void)
{
     88c:	b5f0      	push	{r4, r5, r6, r7, lr}
     88e:	b087      	sub	sp, #28
     890:	0006      	movs	r6, r0
     892:	9003      	str	r0, [sp, #12]
	//get irqs
	SendOpCode(3, 0x12);
     894:	2300      	movs	r3, #0
     896:	9300      	str	r3, [sp, #0]
     898:	2212      	movs	r2, #18
     89a:	2103      	movs	r1, #3
     89c:	4c13      	ldr	r4, [pc, #76]	; (8ec <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x60>)
     89e:	47a0      	blx	r4
	spi_control.Receive();
     8a0:	3611      	adds	r6, #17
     8a2:	36ff      	adds	r6, #255	; 0xff
     8a4:	2100      	movs	r1, #0
     8a6:	0030      	movs	r0, r6
     8a8:	4b11      	ldr	r3, [pc, #68]	; (8f0 <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x64>)
     8aa:	4798      	blx	r3
	uint16_t output = 0;
	char fragment;
	//convert bytes to unsigned short value 
	for(int i = 0; i < 2; i++)
     8ac:	2500      	movs	r5, #0
	uint16_t output = 0;
     8ae:	2400      	movs	r4, #0
	for(int i = 0; i < 2; i++)
     8b0:	2d01      	cmp	r5, #1
     8b2:	dc0d      	bgt.n	8d0 <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x44>
	{
		spi_control.Receive(&fragment);
     8b4:	270f      	movs	r7, #15
     8b6:	ab02      	add	r3, sp, #8
     8b8:	469c      	mov	ip, r3
     8ba:	4467      	add	r7, ip
     8bc:	0039      	movs	r1, r7
     8be:	0030      	movs	r0, r6
     8c0:	4b0b      	ldr	r3, [pc, #44]	; (8f0 <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x64>)
     8c2:	4798      	blx	r3
		output = (output << 8) | fragment;
     8c4:	0223      	lsls	r3, r4, #8
     8c6:	783c      	ldrb	r4, [r7, #0]
     8c8:	431c      	orrs	r4, r3
     8ca:	b2a4      	uxth	r4, r4
	for(int i = 0; i < 2; i++)
     8cc:	3501      	adds	r5, #1
     8ce:	e7ef      	b.n	8b0 <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x24>
	}
	//clear all IRQs
	uint8_t clear_irq_params[2] = {0xFF, 0xFF};
     8d0:	ab05      	add	r3, sp, #20
     8d2:	4a08      	ldr	r2, [pc, #32]	; (8f4 <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x68>)
     8d4:	8812      	ldrh	r2, [r2, #0]
     8d6:	801a      	strh	r2, [r3, #0]
	SendOpCode(0, 0x02, 2, clear_irq_params);
     8d8:	9300      	str	r3, [sp, #0]
     8da:	2302      	movs	r3, #2
     8dc:	2202      	movs	r2, #2
     8de:	2100      	movs	r1, #0
     8e0:	9803      	ldr	r0, [sp, #12]
     8e2:	4d02      	ldr	r5, [pc, #8]	; (8ec <_ZN4LoRa14LoRaController12GetIRQStatusEv+0x60>)
     8e4:	47a8      	blx	r5
	return output;
}
     8e6:	0020      	movs	r0, r4
     8e8:	b007      	add	sp, #28
     8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8ec:	000007bd 	.word	0x000007bd
     8f0:	00003d39 	.word	0x00003d39
     8f4:	00004e44 	.word	0x00004e44

000008f8 <_ZN4LoRa14LoRaController9SetTxModeEhm>:


bool LoRa::LoRaController::SetTxMode(uint8_t payload, uint32_t timeout)
{
     8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fa:	b087      	sub	sp, #28
     8fc:	0005      	movs	r5, r0
     8fe:	000f      	movs	r7, r1
     900:	0016      	movs	r6, r2
	//packet params (sets payload size to size)
	uint8_t set_packet_params[6] = {(uint8_t)((preamble_symbols >> 8) & 0xFF), (uint8_t)(preamble_symbols & 0xFF), 0x00, payload, crc_on, 0x00};
     902:	ac04      	add	r4, sp, #16
     904:	2206      	movs	r2, #6
     906:	2100      	movs	r1, #0
     908:	0020      	movs	r0, r4
     90a:	4b1a      	ldr	r3, [pc, #104]	; (974 <_ZN4LoRa14LoRaController9SetTxModeEhm+0x7c>)
     90c:	4798      	blx	r3
     90e:	2385      	movs	r3, #133	; 0x85
     910:	005b      	lsls	r3, r3, #1
     912:	5aeb      	ldrh	r3, [r5, r3]
     914:	0a1a      	lsrs	r2, r3, #8
     916:	7022      	strb	r2, [r4, #0]
     918:	7063      	strb	r3, [r4, #1]
     91a:	70e7      	strb	r7, [r4, #3]
     91c:	2386      	movs	r3, #134	; 0x86
     91e:	005b      	lsls	r3, r3, #1
     920:	5ceb      	ldrb	r3, [r5, r3]
     922:	7123      	strb	r3, [r4, #4]
	SendOpCode(0, 0x8C, 6, set_packet_params);
     924:	9400      	str	r4, [sp, #0]
     926:	2306      	movs	r3, #6
     928:	228c      	movs	r2, #140	; 0x8c
     92a:	2100      	movs	r1, #0
     92c:	0028      	movs	r0, r5
     92e:	4c12      	ldr	r4, [pc, #72]	; (978 <_ZN4LoRa14LoRaController9SetTxModeEhm+0x80>)
     930:	47a0      	blx	r4
	//begin tx mode
	uint8_t tx_mode_params[3] = {(uint8_t)((timeout >> 16) & 0xFF), (uint8_t)((timeout >> 8) & 0xFF), (uint8_t)(timeout & 0xFF)};
     932:	0c32      	lsrs	r2, r6, #16
     934:	ab03      	add	r3, sp, #12
     936:	701a      	strb	r2, [r3, #0]
     938:	0a32      	lsrs	r2, r6, #8
     93a:	705a      	strb	r2, [r3, #1]
     93c:	709e      	strb	r6, [r3, #2]
	SendOpCode(0, 0x83, 3, tx_mode_params);
     93e:	9300      	str	r3, [sp, #0]
     940:	2303      	movs	r3, #3
     942:	2283      	movs	r2, #131	; 0x83
     944:	2100      	movs	r1, #0
     946:	0028      	movs	r0, r5
     948:	47a0      	blx	r4
	//wait on irq pin
	while(!SERCOMHAL::GetPinState(irq_pin));
     94a:	2383      	movs	r3, #131	; 0x83
     94c:	005b      	lsls	r3, r3, #1
     94e:	5aeb      	ldrh	r3, [r5, r3]
     950:	1dea      	adds	r2, r5, #7
     952:	32ff      	adds	r2, #255	; 0xff
     954:	7890      	ldrb	r0, [r2, #2]
     956:	0400      	lsls	r0, r0, #16
     958:	4318      	orrs	r0, r3
     95a:	4b08      	ldr	r3, [pc, #32]	; (97c <_ZN4LoRa14LoRaController9SetTxModeEhm+0x84>)
     95c:	4798      	blx	r3
     95e:	1e04      	subs	r4, r0, #0
     960:	d0f3      	beq.n	94a <_ZN4LoRa14LoRaController9SetTxModeEhm+0x52>
	//get irq bytes and clear irq
	uint16_t irq_status = GetIRQStatus();
     962:	0028      	movs	r0, r5
     964:	4b06      	ldr	r3, [pc, #24]	; (980 <_ZN4LoRa14LoRaController9SetTxModeEhm+0x88>)
     966:	4798      	blx	r3
	if(irq_status & 0x1)
     968:	07c3      	lsls	r3, r0, #31
     96a:	d400      	bmi.n	96e <_ZN4LoRa14LoRaController9SetTxModeEhm+0x76>
		return true;
	return false;
     96c:	2400      	movs	r4, #0
}
     96e:	0020      	movs	r0, r4
     970:	b007      	add	sp, #28
     972:	bdf0      	pop	{r4, r5, r6, r7, pc}
     974:	000049e5 	.word	0x000049e5
     978:	000007bd 	.word	0x000007bd
     97c:	00003621 	.word	0x00003621
     980:	0000088d 	.word	0x0000088d

00000984 <_ZN4LoRa14LoRaController11WriteBufferEhPh>:

void LoRa::LoRaController::WriteBuffer(uint8_t payload, uint8_t * payload_bytes)
{
     984:	b570      	push	{r4, r5, r6, lr}
     986:	b0c2      	sub	sp, #264	; 0x108
	//first char is 0 to account for buffer offset (0 = write to beginning)
	uint8_t write_buffer_params[256];
	write_buffer_params[0] = 0;
     988:	2400      	movs	r4, #0
     98a:	ab02      	add	r3, sp, #8
     98c:	701c      	strb	r4, [r3, #0]
	for(uint32_t i = 0; i < payload; i++)
     98e:	428c      	cmp	r4, r1
     990:	d205      	bcs.n	99e <_ZN4LoRa14LoRaController11WriteBufferEhPh+0x1a>
	{
		write_buffer_params[i+1] = payload_bytes[i];
     992:	1c65      	adds	r5, r4, #1
     994:	5d16      	ldrb	r6, [r2, r4]
     996:	ac02      	add	r4, sp, #8
     998:	5566      	strb	r6, [r4, r5]
	for(uint32_t i = 0; i < payload; i++)
     99a:	002c      	movs	r4, r5
     99c:	e7f7      	b.n	98e <_ZN4LoRa14LoRaController11WriteBufferEhPh+0xa>
	}
	SendOpCode(0, 0x0E, payload + 1, write_buffer_params);
     99e:	1c4b      	adds	r3, r1, #1
     9a0:	aa02      	add	r2, sp, #8
     9a2:	9200      	str	r2, [sp, #0]
     9a4:	220e      	movs	r2, #14
     9a6:	2100      	movs	r1, #0
     9a8:	4c01      	ldr	r4, [pc, #4]	; (9b0 <_ZN4LoRa14LoRaController11WriteBufferEhPh+0x2c>)
     9aa:	47a0      	blx	r4
}
     9ac:	b042      	add	sp, #264	; 0x108
     9ae:	bd70      	pop	{r4, r5, r6, pc}
     9b0:	000007bd 	.word	0x000007bd

000009b4 <_ZN4LoRa14LoRaController9ResetLoRaEv>:
		received_data.Put(read_data, &(Serial::NoIntEnable));
	}
}

void LoRa::LoRaController::ResetLoRa(void)
{
     9b4:	b510      	push	{r4, lr}
     9b6:	0004      	movs	r4, r0
	SERCOMHAL::OutputLow(reset_pin);
     9b8:	2380      	movs	r3, #128	; 0x80
     9ba:	005b      	lsls	r3, r3, #1
     9bc:	58c0      	ldr	r0, [r0, r3]
     9be:	4b07      	ldr	r3, [pc, #28]	; (9dc <_ZN4LoRa14LoRaController9ResetLoRaEv+0x28>)
     9c0:	4798      	blx	r3
	for(uint32_t i = 0; i < 5000; i++);
     9c2:	2300      	movs	r3, #0
     9c4:	4a06      	ldr	r2, [pc, #24]	; (9e0 <_ZN4LoRa14LoRaController9ResetLoRaEv+0x2c>)
     9c6:	4293      	cmp	r3, r2
     9c8:	d801      	bhi.n	9ce <_ZN4LoRa14LoRaController9ResetLoRaEv+0x1a>
     9ca:	3301      	adds	r3, #1
     9cc:	e7fa      	b.n	9c4 <_ZN4LoRa14LoRaController9ResetLoRaEv+0x10>
	SERCOMHAL::OutputHigh(reset_pin);
     9ce:	2380      	movs	r3, #128	; 0x80
     9d0:	005b      	lsls	r3, r3, #1
     9d2:	58e0      	ldr	r0, [r4, r3]
     9d4:	4b03      	ldr	r3, [pc, #12]	; (9e4 <_ZN4LoRa14LoRaController9ResetLoRaEv+0x30>)
     9d6:	4798      	blx	r3
}
     9d8:	bd10      	pop	{r4, pc}
     9da:	46c0      	nop			; (mov r8, r8)
     9dc:	00003669 	.word	0x00003669
     9e0:	00001387 	.word	0x00001387
     9e4:	00003649 	.word	0x00003649

000009e8 <_ZN4LoRa14LoRaController14TransmitStringEPKcm>:
	//begin tx mode
	return SetTxMode(1, timeout);
}

bool LoRa::LoRaController::TransmitString(const char * input, uint32_t timeout)
{
     9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ea:	b0c7      	sub	sp, #284	; 0x11c
     9ec:	0005      	movs	r5, r0
     9ee:	000f      	movs	r7, r1
     9f0:	9203      	str	r2, [sp, #12]
	//standby mode
	uint8_t set_stndby_params[1] = {0x00};
     9f2:	ab45      	add	r3, sp, #276	; 0x114
     9f4:	2400      	movs	r4, #0
     9f6:	701c      	strb	r4, [r3, #0]
	SendOpCode(0, 0x80, 1, set_stndby_params);
     9f8:	9300      	str	r3, [sp, #0]
     9fa:	2301      	movs	r3, #1
     9fc:	2280      	movs	r2, #128	; 0x80
     9fe:	2100      	movs	r1, #0
     a00:	4e0e      	ldr	r6, [pc, #56]	; (a3c <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x54>)
     a02:	47b0      	blx	r6
	//write to data buffer
	uint8_t i = 0;
	uint8_t write_buffer_params[256];
	write_buffer_params[0] = 0x00;
     a04:	ab05      	add	r3, sp, #20
     a06:	701c      	strb	r4, [r3, #0]
	while(input[i] != '\0' && i < 255)
     a08:	5d3b      	ldrb	r3, [r7, r4]
     a0a:	2b00      	cmp	r3, #0
     a0c:	d006      	beq.n	a1c <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x34>
     a0e:	2cfe      	cmp	r4, #254	; 0xfe
     a10:	dc04      	bgt.n	a1c <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x34>
	{
		write_buffer_params[i+1] = input[i];
     a12:	1c62      	adds	r2, r4, #1
     a14:	a905      	add	r1, sp, #20
     a16:	548b      	strb	r3, [r1, r2]
		i++;
     a18:	b2d4      	uxtb	r4, r2
	while(input[i] != '\0' && i < 255)
     a1a:	e7f5      	b.n	a08 <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x20>
	}
	SendOpCode(0, 0x0E, i + 1, write_buffer_params);
     a1c:	1c63      	adds	r3, r4, #1
     a1e:	aa05      	add	r2, sp, #20
     a20:	9200      	str	r2, [sp, #0]
     a22:	220e      	movs	r2, #14
     a24:	2100      	movs	r1, #0
     a26:	0028      	movs	r0, r5
     a28:	4f04      	ldr	r7, [pc, #16]	; (a3c <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x54>)
     a2a:	47b8      	blx	r7
	return SetTxMode(i, timeout);
     a2c:	9a03      	ldr	r2, [sp, #12]
     a2e:	0021      	movs	r1, r4
     a30:	0028      	movs	r0, r5
     a32:	4b03      	ldr	r3, [pc, #12]	; (a40 <_ZN4LoRa14LoRaController14TransmitStringEPKcm+0x58>)
     a34:	4798      	blx	r3
	
}
     a36:	b047      	add	sp, #284	; 0x11c
     a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	000007bd 	.word	0x000007bd
     a40:	000008f9 	.word	0x000008f9

00000a44 <_ZN4LoRa14LoRaController14TransmitPacketEPKchm>:

bool LoRa::LoRaController::TransmitPacket(const char * input, uint8_t num_bytes, uint32_t timeout)
{
     a44:	b5f0      	push	{r4, r5, r6, r7, lr}
     a46:	b087      	sub	sp, #28
     a48:	0004      	movs	r4, r0
     a4a:	000f      	movs	r7, r1
     a4c:	0015      	movs	r5, r2
     a4e:	9303      	str	r3, [sp, #12]
	//standby mode
	uint8_t set_stndby_params[1] = {0x00};
     a50:	ab05      	add	r3, sp, #20
     a52:	2200      	movs	r2, #0
     a54:	701a      	strb	r2, [r3, #0]
	SendOpCode(0, 0x80, 1, set_stndby_params);
     a56:	9300      	str	r3, [sp, #0]
     a58:	2301      	movs	r3, #1
     a5a:	3280      	adds	r2, #128	; 0x80
     a5c:	2100      	movs	r1, #0
     a5e:	4e07      	ldr	r6, [pc, #28]	; (a7c <_ZN4LoRa14LoRaController14TransmitPacketEPKchm+0x38>)
     a60:	47b0      	blx	r6
	WriteBuffer(num_bytes, (uint8_t *)input);
     a62:	003a      	movs	r2, r7
     a64:	0029      	movs	r1, r5
     a66:	0020      	movs	r0, r4
     a68:	4b05      	ldr	r3, [pc, #20]	; (a80 <_ZN4LoRa14LoRaController14TransmitPacketEPKchm+0x3c>)
     a6a:	4798      	blx	r3
	//write to data buffer
	return SetTxMode(num_bytes, timeout);
     a6c:	9a03      	ldr	r2, [sp, #12]
     a6e:	0029      	movs	r1, r5
     a70:	0020      	movs	r0, r4
     a72:	4b04      	ldr	r3, [pc, #16]	; (a84 <_ZN4LoRa14LoRaController14TransmitPacketEPKchm+0x40>)
     a74:	4798      	blx	r3
}
     a76:	b007      	add	sp, #28
     a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	000007bd 	.word	0x000007bd
     a80:	00000985 	.word	0x00000985
     a84:	000008f9 	.word	0x000008f9

00000a88 <_ZN4LoRa14LoRaController11TransmitIntEmm>:

bool LoRa::LoRaController::TransmitInt(uint32_t input, uint32_t timeout)
{
     a88:	b530      	push	{r4, r5, lr}
     a8a:	b085      	sub	sp, #20
     a8c:	0004      	movs	r4, r0
     a8e:	0008      	movs	r0, r1
     a90:	0015      	movs	r5, r2
	char packet[10];
	uint32_t numel = Serial::Int2ASCII(input, &(packet));
     a92:	a901      	add	r1, sp, #4
     a94:	4b04      	ldr	r3, [pc, #16]	; (aa8 <_ZN4LoRa14LoRaController11TransmitIntEmm+0x20>)
     a96:	4798      	blx	r3
	return TransmitPacket(packet, numel, timeout);
     a98:	b2c2      	uxtb	r2, r0
     a9a:	002b      	movs	r3, r5
     a9c:	a901      	add	r1, sp, #4
     a9e:	0020      	movs	r0, r4
     aa0:	4c02      	ldr	r4, [pc, #8]	; (aac <_ZN4LoRa14LoRaController11TransmitIntEmm+0x24>)
     aa2:	47a0      	blx	r4
}
     aa4:	b005      	add	sp, #20
     aa6:	bd30      	pop	{r4, r5, pc}
     aa8:	00003035 	.word	0x00003035
     aac:	00000a45 	.word	0x00000a45

00000ab0 <_ZN4LoRa14LoRaController13ResetRxBufferEPcm>:
	}
	return result;
}

void LoRa::LoRaController::ResetRxBuffer(char * rx_buf, uint32_t rx_buf_size)
{
     ab0:	b510      	push	{r4, lr}
	received_data.Reset(rx_buf, rx_buf_size);
     ab2:	3051      	adds	r0, #81	; 0x51
     ab4:	30ff      	adds	r0, #255	; 0xff
     ab6:	4b01      	ldr	r3, [pc, #4]	; (abc <_ZN4LoRa14LoRaController13ResetRxBufferEPcm+0xc>)
     ab8:	4798      	blx	r3
}
     aba:	bd10      	pop	{r4, pc}
     abc:	0000309d 	.word	0x0000309d

00000ac0 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm>:
{
     ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac2:	46ce      	mov	lr, r9
     ac4:	4647      	mov	r7, r8
     ac6:	b580      	push	{r7, lr}
     ac8:	b08f      	sub	sp, #60	; 0x3c
     aca:	0004      	movs	r4, r0
     acc:	000d      	movs	r5, r1
     ace:	0011      	movs	r1, r2
	ResetRxBuffer(rx_buf, rx_buf_size);
     ad0:	001a      	movs	r2, r3
     ad2:	4bd7      	ldr	r3, [pc, #860]	; (e30 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x370>)
     ad4:	4798      	blx	r3
	reset_pin = config_peripheral->reset_pin;
     ad6:	2780      	movs	r7, #128	; 0x80
     ad8:	007f      	lsls	r7, r7, #1
     ada:	19e0      	adds	r0, r4, r7
     adc:	0029      	movs	r1, r5
     ade:	3122      	adds	r1, #34	; 0x22
     ae0:	2203      	movs	r2, #3
     ae2:	4bd4      	ldr	r3, [pc, #848]	; (e34 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x374>)
     ae4:	4699      	mov	r9, r3
     ae6:	4798      	blx	r3
	SERCOMHAL::ConfigPin(reset_pin, true, false);
     ae8:	2300      	movs	r3, #0
     aea:	2200      	movs	r2, #0
     aec:	2101      	movs	r1, #1
     aee:	59e0      	ldr	r0, [r4, r7]
     af0:	4ed1      	ldr	r6, [pc, #836]	; (e38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x378>)
     af2:	47b0      	blx	r6
	SERCOMHAL::OutputHigh(reset_pin);
     af4:	59e0      	ldr	r0, [r4, r7]
     af6:	4bd1      	ldr	r3, [pc, #836]	; (e3c <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x37c>)
     af8:	4798      	blx	r3
	ResetLoRa();
     afa:	0020      	movs	r0, r4
     afc:	4bd0      	ldr	r3, [pc, #832]	; (e40 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x380>)
     afe:	4798      	blx	r3
	busy_pin = config_peripheral->busy_pin;
     b00:	1d23      	adds	r3, r4, #4
     b02:	33ff      	adds	r3, #255	; 0xff
     b04:	4698      	mov	r8, r3
     b06:	0029      	movs	r1, r5
     b08:	311c      	adds	r1, #28
     b0a:	2203      	movs	r2, #3
     b0c:	0018      	movs	r0, r3
     b0e:	47c8      	blx	r9
	irq_pin = config_peripheral->irq_pin;
     b10:	1de7      	adds	r7, r4, #7
     b12:	37ff      	adds	r7, #255	; 0xff
     b14:	0029      	movs	r1, r5
     b16:	311f      	adds	r1, #31
     b18:	2203      	movs	r2, #3
     b1a:	0038      	movs	r0, r7
     b1c:	47c8      	blx	r9
	SERCOMHAL::ConfigPin(busy_pin, false, false);
     b1e:	2304      	movs	r3, #4
     b20:	33ff      	adds	r3, #255	; 0xff
     b22:	5ce3      	ldrb	r3, [r4, r3]
     b24:	4642      	mov	r2, r8
     b26:	7850      	ldrb	r0, [r2, #1]
     b28:	0200      	lsls	r0, r0, #8
     b2a:	4303      	orrs	r3, r0
     b2c:	7890      	ldrb	r0, [r2, #2]
     b2e:	0400      	lsls	r0, r0, #16
     b30:	4318      	orrs	r0, r3
     b32:	2300      	movs	r3, #0
     b34:	2200      	movs	r2, #0
     b36:	2100      	movs	r1, #0
     b38:	47b0      	blx	r6
	SERCOMHAL::ConfigPin(irq_pin, false, false);
     b3a:	2383      	movs	r3, #131	; 0x83
     b3c:	005b      	lsls	r3, r3, #1
     b3e:	5ae3      	ldrh	r3, [r4, r3]
     b40:	78b8      	ldrb	r0, [r7, #2]
     b42:	0400      	lsls	r0, r0, #16
     b44:	4318      	orrs	r0, r3
     b46:	2300      	movs	r3, #0
     b48:	2200      	movs	r2, #0
     b4a:	2100      	movs	r1, #0
     b4c:	47b0      	blx	r6
	spi_control.Init(&(config_peripheral->spi_sercom), mosi_buffer, sizeof(mosi_buffer), miso_buffer, sizeof(miso_buffer));
     b4e:	0020      	movs	r0, r4
     b50:	3011      	adds	r0, #17
     b52:	30ff      	adds	r0, #255	; 0xff
     b54:	0022      	movs	r2, r4
     b56:	3280      	adds	r2, #128	; 0x80
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	9301      	str	r3, [sp, #4]
     b5c:	9400      	str	r4, [sp, #0]
     b5e:	0029      	movs	r1, r5
     b60:	4eb8      	ldr	r6, [pc, #736]	; (e44 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x384>)
     b62:	47b0      	blx	r6
	uint8_t set_stndby_params[1] = {0x00};
     b64:	ab0d      	add	r3, sp, #52	; 0x34
     b66:	2200      	movs	r2, #0
     b68:	701a      	strb	r2, [r3, #0]
	SendOpCode(0, 0x80, 1, set_stndby_params);
     b6a:	9300      	str	r3, [sp, #0]
     b6c:	2301      	movs	r3, #1
     b6e:	3280      	adds	r2, #128	; 0x80
     b70:	2100      	movs	r1, #0
     b72:	0020      	movs	r0, r4
     b74:	4eb4      	ldr	r6, [pc, #720]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     b76:	47b0      	blx	r6
	uint8_t set_packet_type_params[1] = {0x01};
     b78:	ab0c      	add	r3, sp, #48	; 0x30
     b7a:	2201      	movs	r2, #1
     b7c:	701a      	strb	r2, [r3, #0]
	SendOpCode(0, 0x8A, 1, set_packet_type_params);
     b7e:	9300      	str	r3, [sp, #0]
     b80:	2301      	movs	r3, #1
     b82:	3289      	adds	r2, #137	; 0x89
     b84:	2100      	movs	r1, #0
     b86:	0020      	movs	r0, r4
     b88:	47b0      	blx	r6
	uint64_t freq = (uint64_t)(config_peripheral->frequency) * (1 << 25) / 32000000;
     b8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     b8c:	09c1      	lsrs	r1, r0, #7
     b8e:	0640      	lsls	r0, r0, #25
     b90:	4aae      	ldr	r2, [pc, #696]	; (e4c <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x38c>)
     b92:	2300      	movs	r3, #0
     b94:	4fae      	ldr	r7, [pc, #696]	; (e50 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x390>)
     b96:	47b8      	blx	r7
	uint8_t set_frequency_params[4] = {(uint8_t)((freq >> 24) & 0xFF), (uint8_t)((freq >> 16) & 0xFF), (uint8_t)((freq >> 8) & 0xFF), (uint8_t)(freq & 0xFF)};
     b98:	0e02      	lsrs	r2, r0, #24
     b9a:	ab0b      	add	r3, sp, #44	; 0x2c
     b9c:	701a      	strb	r2, [r3, #0]
     b9e:	0c02      	lsrs	r2, r0, #16
     ba0:	705a      	strb	r2, [r3, #1]
     ba2:	0a02      	lsrs	r2, r0, #8
     ba4:	709a      	strb	r2, [r3, #2]
     ba6:	70d8      	strb	r0, [r3, #3]
	SendOpCode(0, 0x86, 4, set_frequency_params);
     ba8:	9300      	str	r3, [sp, #0]
     baa:	2304      	movs	r3, #4
     bac:	2286      	movs	r2, #134	; 0x86
     bae:	2100      	movs	r1, #0
     bb0:	0020      	movs	r0, r4
     bb2:	47b0      	blx	r6
	switch(config_peripheral->output_power)
     bb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
     bb6:	2b01      	cmp	r3, #1
     bb8:	d02c      	beq.n	c14 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x154>
     bba:	dd1d      	ble.n	bf8 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x138>
     bbc:	2b02      	cmp	r3, #2
     bbe:	d023      	beq.n	c08 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x148>
     bc0:	2b03      	cmp	r3, #3
     bc2:	d103      	bne.n	bcc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x10c>
			set_pa_config_params[0] = 0x02;
     bc4:	ab0a      	add	r3, sp, #40	; 0x28
     bc6:	2202      	movs	r2, #2
     bc8:	701a      	strb	r2, [r3, #0]
			set_pa_config_params[1] = 0x02;
     bca:	705a      	strb	r2, [r3, #1]
	set_pa_config_params[2] = 0x00;
     bcc:	ab0a      	add	r3, sp, #40	; 0x28
     bce:	2200      	movs	r2, #0
     bd0:	709a      	strb	r2, [r3, #2]
	set_pa_config_params[3] = 0x01;
     bd2:	3201      	adds	r2, #1
     bd4:	70da      	strb	r2, [r3, #3]
	SendOpCode(0, 0x95, 4, set_pa_config_params);
     bd6:	9300      	str	r3, [sp, #0]
     bd8:	2304      	movs	r3, #4
     bda:	3294      	adds	r2, #148	; 0x94
     bdc:	2100      	movs	r1, #0
     bde:	0020      	movs	r0, r4
     be0:	4e99      	ldr	r6, [pc, #612]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     be2:	47b0      	blx	r6
	set_tx_params[0] = 0x16;
     be4:	2216      	movs	r2, #22
     be6:	ab09      	add	r3, sp, #36	; 0x24
     be8:	701a      	strb	r2, [r3, #0]
	switch(config_peripheral->ramp_time)
     bea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
     bec:	2b07      	cmp	r3, #7
     bee:	d81a      	bhi.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
     bf0:	009b      	lsls	r3, r3, #2
     bf2:	4a98      	ldr	r2, [pc, #608]	; (e54 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x394>)
     bf4:	58d3      	ldr	r3, [r2, r3]
     bf6:	469f      	mov	pc, r3
	switch(config_peripheral->output_power)
     bf8:	2b00      	cmp	r3, #0
     bfa:	d1e7      	bne.n	bcc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x10c>
			set_pa_config_params[0] = 0x04;
     bfc:	ab0a      	add	r3, sp, #40	; 0x28
     bfe:	2204      	movs	r2, #4
     c00:	701a      	strb	r2, [r3, #0]
			set_pa_config_params[1] = 0x07;
     c02:	3203      	adds	r2, #3
     c04:	705a      	strb	r2, [r3, #1]
			break;
     c06:	e7e1      	b.n	bcc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x10c>
			set_pa_config_params[0] = 0x02;
     c08:	ab0a      	add	r3, sp, #40	; 0x28
     c0a:	2202      	movs	r2, #2
     c0c:	701a      	strb	r2, [r3, #0]
			set_pa_config_params[1] = 0x03;
     c0e:	3201      	adds	r2, #1
     c10:	705a      	strb	r2, [r3, #1]
			break;
     c12:	e7db      	b.n	bcc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x10c>
			set_pa_config_params[0] = 0x03;
     c14:	ab0a      	add	r3, sp, #40	; 0x28
     c16:	2203      	movs	r2, #3
     c18:	701a      	strb	r2, [r3, #0]
			set_pa_config_params[1] = 0x05;
     c1a:	3202      	adds	r2, #2
     c1c:	705a      	strb	r2, [r3, #1]
			break;
     c1e:	e7d5      	b.n	bcc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x10c>
			set_tx_params[1] = 0x00;
     c20:	2200      	movs	r2, #0
     c22:	ab09      	add	r3, sp, #36	; 0x24
     c24:	705a      	strb	r2, [r3, #1]
	SendOpCode(0, 0x8E, 2, set_tx_params);
     c26:	ab09      	add	r3, sp, #36	; 0x24
     c28:	9300      	str	r3, [sp, #0]
     c2a:	2302      	movs	r3, #2
     c2c:	228e      	movs	r2, #142	; 0x8e
     c2e:	2100      	movs	r1, #0
     c30:	0020      	movs	r0, r4
     c32:	4f85      	ldr	r7, [pc, #532]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     c34:	47b8      	blx	r7
	volatile uint8_t value = ReadRegister(0x08D8);
     c36:	4e88      	ldr	r6, [pc, #544]	; (e58 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x398>)
     c38:	0031      	movs	r1, r6
     c3a:	0020      	movs	r0, r4
     c3c:	4b87      	ldr	r3, [pc, #540]	; (e5c <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x39c>)
     c3e:	4798      	blx	r3
     c40:	2223      	movs	r2, #35	; 0x23
     c42:	446a      	add	r2, sp
     c44:	7010      	strb	r0, [r2, #0]
	value |= 0x1E;
     c46:	7813      	ldrb	r3, [r2, #0]
     c48:	211e      	movs	r1, #30
     c4a:	430b      	orrs	r3, r1
     c4c:	b2db      	uxtb	r3, r3
     c4e:	7013      	strb	r3, [r2, #0]
	WriteRegister(0x8D8, value);
     c50:	7812      	ldrb	r2, [r2, #0]
     c52:	b2d2      	uxtb	r2, r2
     c54:	0031      	movs	r1, r6
     c56:	0020      	movs	r0, r4
     c58:	4b81      	ldr	r3, [pc, #516]	; (e60 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3a0>)
     c5a:	4798      	blx	r3
	uint8_t set_buf_adr_params[2] = {0x00, 0x00};
     c5c:	ab08      	add	r3, sp, #32
     c5e:	2200      	movs	r2, #0
     c60:	701a      	strb	r2, [r3, #0]
     c62:	705a      	strb	r2, [r3, #1]
	SendOpCode(0, 0x8F, 2, set_buf_adr_params);
     c64:	9300      	str	r3, [sp, #0]
     c66:	2302      	movs	r3, #2
     c68:	328f      	adds	r2, #143	; 0x8f
     c6a:	2100      	movs	r1, #0
     c6c:	0020      	movs	r0, r4
     c6e:	47b8      	blx	r7
	switch(config_peripheral->spread_factor)
     c70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     c72:	2b06      	cmp	r3, #6
     c74:	d822      	bhi.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
     c76:	009b      	lsls	r3, r3, #2
     c78:	4a7a      	ldr	r2, [pc, #488]	; (e64 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3a4>)
     c7a:	58d3      	ldr	r3, [r2, r3]
     c7c:	469f      	mov	pc, r3
			set_tx_params[1] = 0x01;
     c7e:	2201      	movs	r2, #1
     c80:	ab09      	add	r3, sp, #36	; 0x24
     c82:	705a      	strb	r2, [r3, #1]
			break;
     c84:	e7cf      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x02;
     c86:	2202      	movs	r2, #2
     c88:	ab09      	add	r3, sp, #36	; 0x24
     c8a:	705a      	strb	r2, [r3, #1]
			break;
     c8c:	e7cb      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x03;
     c8e:	2203      	movs	r2, #3
     c90:	ab09      	add	r3, sp, #36	; 0x24
     c92:	705a      	strb	r2, [r3, #1]
			break;
     c94:	e7c7      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x04;
     c96:	2204      	movs	r2, #4
     c98:	ab09      	add	r3, sp, #36	; 0x24
     c9a:	705a      	strb	r2, [r3, #1]
			break;
     c9c:	e7c3      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x05;
     c9e:	2205      	movs	r2, #5
     ca0:	ab09      	add	r3, sp, #36	; 0x24
     ca2:	705a      	strb	r2, [r3, #1]
			break;
     ca4:	e7bf      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x06;
     ca6:	2206      	movs	r2, #6
     ca8:	ab09      	add	r3, sp, #36	; 0x24
     caa:	705a      	strb	r2, [r3, #1]
			break;
     cac:	e7bb      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_tx_params[1] = 0x07;
     cae:	2207      	movs	r2, #7
     cb0:	ab09      	add	r3, sp, #36	; 0x24
     cb2:	705a      	strb	r2, [r3, #1]
			break;
     cb4:	e7b7      	b.n	c26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x166>
			set_mod_params[0] = 0x05;
     cb6:	2205      	movs	r2, #5
     cb8:	ab07      	add	r3, sp, #28
     cba:	701a      	strb	r2, [r3, #0]
	switch(config_peripheral->bandwidth)
     cbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
     cbe:	2b01      	cmp	r3, #1
     cc0:	d02d      	beq.n	d1e <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x25e>
     cc2:	2b02      	cmp	r3, #2
     cc4:	d02f      	beq.n	d26 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x266>
     cc6:	2b00      	cmp	r3, #0
     cc8:	d025      	beq.n	d16 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x256>
	switch(config_peripheral->coding_rate)
     cca:	6beb      	ldr	r3, [r5, #60]	; 0x3c
     ccc:	2b01      	cmp	r3, #1
     cce:	d100      	bne.n	cd2 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x212>
     cd0:	e09e      	b.n	e10 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x350>
     cd2:	dd2c      	ble.n	d2e <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x26e>
     cd4:	2b02      	cmp	r3, #2
     cd6:	d100      	bne.n	cda <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x21a>
     cd8:	e09e      	b.n	e18 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x358>
     cda:	2b03      	cmp	r3, #3
     cdc:	d12c      	bne.n	d38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x278>
			set_mod_params[2] = 0x04;
     cde:	2204      	movs	r2, #4
     ce0:	ab07      	add	r3, sp, #28
     ce2:	709a      	strb	r2, [r3, #2]
			break;
     ce4:	e028      	b.n	d38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x278>
			set_mod_params[0] = 0x06;
     ce6:	2206      	movs	r2, #6
     ce8:	ab07      	add	r3, sp, #28
     cea:	701a      	strb	r2, [r3, #0]
			break;
     cec:	e7e6      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[0] = 0x07;
     cee:	2207      	movs	r2, #7
     cf0:	ab07      	add	r3, sp, #28
     cf2:	701a      	strb	r2, [r3, #0]
			break;
     cf4:	e7e2      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[0] = 0x08;
     cf6:	2208      	movs	r2, #8
     cf8:	ab07      	add	r3, sp, #28
     cfa:	701a      	strb	r2, [r3, #0]
			break;
     cfc:	e7de      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[0] = 0x09;
     cfe:	2209      	movs	r2, #9
     d00:	ab07      	add	r3, sp, #28
     d02:	701a      	strb	r2, [r3, #0]
			break;
     d04:	e7da      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[0] = 0x0A;
     d06:	220a      	movs	r2, #10
     d08:	ab07      	add	r3, sp, #28
     d0a:	701a      	strb	r2, [r3, #0]
			break;
     d0c:	e7d6      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[0] = 0x0B;
     d0e:	220b      	movs	r2, #11
     d10:	ab07      	add	r3, sp, #28
     d12:	701a      	strb	r2, [r3, #0]
			break;
     d14:	e7d2      	b.n	cbc <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x1fc>
			set_mod_params[1] = 0x04;
     d16:	2204      	movs	r2, #4
     d18:	ab07      	add	r3, sp, #28
     d1a:	705a      	strb	r2, [r3, #1]
			break;
     d1c:	e7d5      	b.n	cca <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x20a>
			set_mod_params[1] = 0x05;
     d1e:	2205      	movs	r2, #5
     d20:	ab07      	add	r3, sp, #28
     d22:	705a      	strb	r2, [r3, #1]
			break;
     d24:	e7d1      	b.n	cca <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x20a>
			set_mod_params[1] = 0x06;
     d26:	2206      	movs	r2, #6
     d28:	ab07      	add	r3, sp, #28
     d2a:	705a      	strb	r2, [r3, #1]
			break;
     d2c:	e7cd      	b.n	cca <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x20a>
	switch(config_peripheral->coding_rate)
     d2e:	2b00      	cmp	r3, #0
     d30:	d102      	bne.n	d38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x278>
			set_mod_params[2] = 0x01;
     d32:	2201      	movs	r2, #1
     d34:	ab07      	add	r3, sp, #28
     d36:	709a      	strb	r2, [r3, #2]
	set_mod_params[3] = config_peripheral->low_data_rate_opt;
     d38:	2340      	movs	r3, #64	; 0x40
     d3a:	5cea      	ldrb	r2, [r5, r3]
     d3c:	ab07      	add	r3, sp, #28
     d3e:	70da      	strb	r2, [r3, #3]
	SendOpCode(0, 0x8B, 4, set_mod_params);
     d40:	9300      	str	r3, [sp, #0]
     d42:	2304      	movs	r3, #4
     d44:	228b      	movs	r2, #139	; 0x8b
     d46:	2100      	movs	r1, #0
     d48:	0020      	movs	r0, r4
     d4a:	4e3f      	ldr	r6, [pc, #252]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     d4c:	47b0      	blx	r6
	volatile uint8_t value2 = ReadRegister(0x0889);
     d4e:	4946      	ldr	r1, [pc, #280]	; (e68 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3a8>)
     d50:	0020      	movs	r0, r4
     d52:	4b42      	ldr	r3, [pc, #264]	; (e5c <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x39c>)
     d54:	4798      	blx	r3
     d56:	231b      	movs	r3, #27
     d58:	446b      	add	r3, sp
     d5a:	7018      	strb	r0, [r3, #0]
	if(config_peripheral->bandwidth == Bandwidth::LORA_BW_500)
     d5c:	6bab      	ldr	r3, [r5, #56]	; 0x38
     d5e:	2b02      	cmp	r3, #2
     d60:	d05e      	beq.n	e20 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x360>
		value2 |= 0x04;
     d62:	221b      	movs	r2, #27
     d64:	446a      	add	r2, sp
     d66:	7813      	ldrb	r3, [r2, #0]
     d68:	2104      	movs	r1, #4
     d6a:	430b      	orrs	r3, r1
     d6c:	b2db      	uxtb	r3, r3
     d6e:	7013      	strb	r3, [r2, #0]
	WriteRegister(0x0889, value2);
     d70:	231b      	movs	r3, #27
     d72:	446b      	add	r3, sp
     d74:	781a      	ldrb	r2, [r3, #0]
     d76:	b2d2      	uxtb	r2, r2
     d78:	493b      	ldr	r1, [pc, #236]	; (e68 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3a8>)
     d7a:	0020      	movs	r0, r4
     d7c:	4b38      	ldr	r3, [pc, #224]	; (e60 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3a0>)
     d7e:	4798      	blx	r3
	preamble_symbols = config_peripheral->preamble_symbols;
     d80:	2342      	movs	r3, #66	; 0x42
     d82:	5aef      	ldrh	r7, [r5, r3]
     d84:	33c8      	adds	r3, #200	; 0xc8
     d86:	52e7      	strh	r7, [r4, r3]
	crc_on = config_peripheral->crc_on;
     d88:	3bc6      	subs	r3, #198	; 0xc6
     d8a:	5ceb      	ldrb	r3, [r5, r3]
     d8c:	4698      	mov	r8, r3
     d8e:	2386      	movs	r3, #134	; 0x86
     d90:	005b      	lsls	r3, r3, #1
     d92:	4642      	mov	r2, r8
     d94:	54e2      	strb	r2, [r4, r3]
	uint8_t set_packet_params[6] = {(uint8_t)((preamble_symbols >> 8) & 0xFF), (uint8_t)(preamble_symbols & 0xFF), 0x01, 0xFF, crc_on, 0x00};
     d96:	ae05      	add	r6, sp, #20
     d98:	2206      	movs	r2, #6
     d9a:	2100      	movs	r1, #0
     d9c:	0030      	movs	r0, r6
     d9e:	4b33      	ldr	r3, [pc, #204]	; (e6c <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3ac>)
     da0:	4798      	blx	r3
     da2:	2301      	movs	r3, #1
     da4:	70b3      	strb	r3, [r6, #2]
     da6:	33fe      	adds	r3, #254	; 0xfe
     da8:	70f3      	strb	r3, [r6, #3]
     daa:	0a3b      	lsrs	r3, r7, #8
     dac:	7033      	strb	r3, [r6, #0]
     dae:	7077      	strb	r7, [r6, #1]
     db0:	4643      	mov	r3, r8
     db2:	7133      	strb	r3, [r6, #4]
	SendOpCode(0, 0x8C, 6, set_packet_params); 
     db4:	9600      	str	r6, [sp, #0]
     db6:	2306      	movs	r3, #6
     db8:	228c      	movs	r2, #140	; 0x8c
     dba:	2100      	movs	r1, #0
     dbc:	0020      	movs	r0, r4
     dbe:	4e22      	ldr	r6, [pc, #136]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     dc0:	47b0      	blx	r6
	uint8_t set_irq_params[8] = {0b00000010, 0b01000011, 0b00000010, 0b01000011, 0x00, 0x00, 0x00, 0x00};
     dc2:	aa03      	add	r2, sp, #12
     dc4:	4b2a      	ldr	r3, [pc, #168]	; (e70 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3b0>)
     dc6:	3304      	adds	r3, #4
     dc8:	0011      	movs	r1, r2
     dca:	cb81      	ldmia	r3!, {r0, r7}
     dcc:	c181      	stmia	r1!, {r0, r7}
	SendOpCode(0, 0x08, 8, set_irq_params);
     dce:	9200      	str	r2, [sp, #0]
     dd0:	2308      	movs	r3, #8
     dd2:	2208      	movs	r2, #8
     dd4:	2100      	movs	r1, #0
     dd6:	0020      	movs	r0, r4
     dd8:	47b0      	blx	r6
	sync_word_params[0] = 0x07;
     dda:	ab02      	add	r3, sp, #8
     ddc:	2207      	movs	r2, #7
     dde:	701a      	strb	r2, [r3, #0]
	sync_word_params[1] = 0x40;
     de0:	3239      	adds	r2, #57	; 0x39
     de2:	705a      	strb	r2, [r3, #1]
	if(config_peripheral->public_network)
     de4:	2345      	movs	r3, #69	; 0x45
     de6:	5ceb      	ldrb	r3, [r5, r3]
     de8:	2b00      	cmp	r3, #0
     dea:	d143      	bne.n	e74 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x3b4>
		sync_word_params[2] = 0x14;
     dec:	ab02      	add	r3, sp, #8
     dee:	2214      	movs	r2, #20
     df0:	709a      	strb	r2, [r3, #2]
		sync_word_params[3] = 0x24;
     df2:	3210      	adds	r2, #16
     df4:	70da      	strb	r2, [r3, #3]
	SendOpCode(0, 0x0D, 4, sync_word_params);	
     df6:	ab02      	add	r3, sp, #8
     df8:	9300      	str	r3, [sp, #0]
     dfa:	2304      	movs	r3, #4
     dfc:	220d      	movs	r2, #13
     dfe:	2100      	movs	r1, #0
     e00:	0020      	movs	r0, r4
     e02:	4c11      	ldr	r4, [pc, #68]	; (e48 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x388>)
     e04:	47a0      	blx	r4
}
     e06:	b00f      	add	sp, #60	; 0x3c
     e08:	bc0c      	pop	{r2, r3}
     e0a:	4690      	mov	r8, r2
     e0c:	4699      	mov	r9, r3
     e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_mod_params[2] = 0x02;
     e10:	2202      	movs	r2, #2
     e12:	ab07      	add	r3, sp, #28
     e14:	709a      	strb	r2, [r3, #2]
			break;
     e16:	e78f      	b.n	d38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x278>
			set_mod_params[2] = 0x03;
     e18:	2203      	movs	r2, #3
     e1a:	ab07      	add	r3, sp, #28
     e1c:	709a      	strb	r2, [r3, #2]
			break;
     e1e:	e78b      	b.n	d38 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x278>
		value2 &= 0xFB;
     e20:	221b      	movs	r2, #27
     e22:	446a      	add	r2, sp
     e24:	7813      	ldrb	r3, [r2, #0]
     e26:	2104      	movs	r1, #4
     e28:	438b      	bics	r3, r1
     e2a:	7013      	strb	r3, [r2, #0]
     e2c:	e7a0      	b.n	d70 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x2b0>
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00000ab1 	.word	0x00000ab1
     e34:	00004961 	.word	0x00004961
     e38:	00003565 	.word	0x00003565
     e3c:	00003649 	.word	0x00003649
     e40:	000009b5 	.word	0x000009b5
     e44:	00003f01 	.word	0x00003f01
     e48:	000007bd 	.word	0x000007bd
     e4c:	01e84800 	.word	0x01e84800
     e50:	000046f5 	.word	0x000046f5
     e54:	00004e08 	.word	0x00004e08
     e58:	000008d8 	.word	0x000008d8
     e5c:	0000084d 	.word	0x0000084d
     e60:	00000829 	.word	0x00000829
     e64:	00004e28 	.word	0x00004e28
     e68:	00000889 	.word	0x00000889
     e6c:	000049e5 	.word	0x000049e5
     e70:	00004e44 	.word	0x00004e44
		sync_word_params[2] = 0x34;
     e74:	ab02      	add	r3, sp, #8
     e76:	3a0c      	subs	r2, #12
     e78:	709a      	strb	r2, [r3, #2]
		sync_word_params[3] = 0x44; 
     e7a:	3210      	adds	r2, #16
     e7c:	70da      	strb	r2, [r3, #3]
     e7e:	e7ba      	b.n	df6 <_ZN4LoRa14LoRaController4InitEPNS_6ConfigEPcm+0x336>

00000e80 <_ZN4LoRa14LoRaController13ClearRxBufferEv>:

void LoRa::LoRaController::ClearRxBuffer(void)
{
     e80:	b510      	push	{r4, lr}
	received_data.Clear();
     e82:	3051      	adds	r0, #81	; 0x51
     e84:	30ff      	adds	r0, #255	; 0xff
     e86:	4b01      	ldr	r3, [pc, #4]	; (e8c <_ZN4LoRa14LoRaController13ClearRxBufferEv+0xc>)
     e88:	4798      	blx	r3
}
     e8a:	bd10      	pop	{r4, pc}
     e8c:	000030d9 	.word	0x000030d9

00000e90 <_ZN4LoRa14LoRaController8TeardownEv>:
{
     e90:	b530      	push	{r4, r5, lr}
     e92:	b085      	sub	sp, #20
     e94:	0004      	movs	r4, r0
	ResetLoRa();
     e96:	4b0b      	ldr	r3, [pc, #44]	; (ec4 <_ZN4LoRa14LoRaController8TeardownEv+0x34>)
     e98:	4798      	blx	r3
	uint8_t set_stndby_params[1] = {0x00};
     e9a:	ab03      	add	r3, sp, #12
     e9c:	2200      	movs	r2, #0
     e9e:	701a      	strb	r2, [r3, #0]
	SendOpCode(0, 0x80, 1, set_stndby_params);
     ea0:	9300      	str	r3, [sp, #0]
     ea2:	2301      	movs	r3, #1
     ea4:	3280      	adds	r2, #128	; 0x80
     ea6:	2100      	movs	r1, #0
     ea8:	0020      	movs	r0, r4
     eaa:	4d07      	ldr	r5, [pc, #28]	; (ec8 <_ZN4LoRa14LoRaController8TeardownEv+0x38>)
     eac:	47a8      	blx	r5
	spi_control.Deinit();
     eae:	0020      	movs	r0, r4
     eb0:	3011      	adds	r0, #17
     eb2:	30ff      	adds	r0, #255	; 0xff
     eb4:	4b05      	ldr	r3, [pc, #20]	; (ecc <_ZN4LoRa14LoRaController8TeardownEv+0x3c>)
     eb6:	4798      	blx	r3
	ClearRxBuffer();
     eb8:	0020      	movs	r0, r4
     eba:	4b05      	ldr	r3, [pc, #20]	; (ed0 <_ZN4LoRa14LoRaController8TeardownEv+0x40>)
     ebc:	4798      	blx	r3
}
     ebe:	b005      	add	sp, #20
     ec0:	bd30      	pop	{r4, r5, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	000009b5 	.word	0x000009b5
     ec8:	000007bd 	.word	0x000007bd
     ecc:	00003c8d 	.word	0x00003c8d
     ed0:	00000e81 	.word	0x00000e81

00000ed4 <_ZN4LoRa14LoRaControllerD1Ev>:
LoRa::LoRaController::~LoRaController(void)
     ed4:	b510      	push	{r4, lr}
     ed6:	0004      	movs	r4, r0
	Teardown(); 
     ed8:	4b06      	ldr	r3, [pc, #24]	; (ef4 <_ZN4LoRa14LoRaControllerD1Ev+0x20>)
     eda:	4798      	blx	r3
LoRa::LoRaController::~LoRaController(void)
     edc:	0020      	movs	r0, r4
     ede:	3051      	adds	r0, #81	; 0x51
     ee0:	30ff      	adds	r0, #255	; 0xff
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <_ZN4LoRa14LoRaControllerD1Ev+0x24>)
     ee4:	4798      	blx	r3
     ee6:	0020      	movs	r0, r4
     ee8:	3011      	adds	r0, #17
     eea:	30ff      	adds	r0, #255	; 0xff
     eec:	4b03      	ldr	r3, [pc, #12]	; (efc <_ZN4LoRa14LoRaControllerD1Ev+0x28>)
     eee:	4798      	blx	r3
}
     ef0:	0020      	movs	r0, r4
     ef2:	bd10      	pop	{r4, pc}
     ef4:	00000e91 	.word	0x00000e91
     ef8:	000030e5 	.word	0x000030e5
     efc:	00003cd5 	.word	0x00003cd5

00000f00 <main>:
#include "sam.h"
#include "example_state_machine.h"


int main(void)
{
     f00:	b500      	push	{lr}
     f02:	b089      	sub	sp, #36	; 0x24
    StateMachine::STT_MACHINE example_state_machine;
	ExampleStateMachine::GetExampleStateMachine(&example_state_machine);
     f04:	4668      	mov	r0, sp
     f06:	4b03      	ldr	r3, [pc, #12]	; (f14 <main+0x14>)
     f08:	4798      	blx	r3
    while (1) 
    {
		StateMachine::ExecuteAction(&example_state_machine);
     f0a:	4668      	mov	r0, sp
     f0c:	4b02      	ldr	r3, [pc, #8]	; (f18 <main+0x18>)
     f0e:	4798      	blx	r3
     f10:	e7fb      	b.n	f0a <main+0xa>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00000491 	.word	0x00000491
     f18:	0000457d 	.word	0x0000457d

00000f1c <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUSB_MEM_SECTION static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
     f1c:	b570      	push	{r4, r5, r6, lr}
     f1e:	0004      	movs	r4, r0
  uint8_t const rhport = 0;
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
     f20:	0005      	movs	r5, r0
     f22:	3510      	adds	r5, #16
     f24:	0028      	movs	r0, r5
     f26:	4b0f      	ldr	r3, [pc, #60]	; (f64 <_prep_out_transaction+0x48>)
     f28:	4798      	blx	r3

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
     f2a:	283f      	cmp	r0, #63	; 0x3f
     f2c:	d801      	bhi.n	f32 <_prep_out_transaction+0x16>
     f2e:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);

    return false;
  }
}
     f30:	bd70      	pop	{r4, r5, r6, pc}
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
     f32:	78e1      	ldrb	r1, [r4, #3]
     f34:	2000      	movs	r0, #0
     f36:	4b0c      	ldr	r3, [pc, #48]	; (f68 <_prep_out_transaction+0x4c>)
     f38:	4798      	blx	r3
     f3a:	2800      	cmp	r0, #0
     f3c:	d0f8      	beq.n	f30 <_prep_out_transaction+0x14>
  available = tu_fifo_remaining(&p_cdc->rx_ff);
     f3e:	0028      	movs	r0, r5
     f40:	4b08      	ldr	r3, [pc, #32]	; (f64 <_prep_out_transaction+0x48>)
     f42:	4798      	blx	r3
  if ( available >= sizeof(p_cdc->epout_buf) )
     f44:	283f      	cmp	r0, #63	; 0x3f
     f46:	d805      	bhi.n	f54 <_prep_out_transaction+0x38>
    usbd_edpt_release(rhport, p_cdc->ep_out);
     f48:	78e1      	ldrb	r1, [r4, #3]
     f4a:	2000      	movs	r0, #0
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <_prep_out_transaction+0x50>)
     f4e:	4798      	blx	r3
    return false;
     f50:	2000      	movs	r0, #0
     f52:	e7ed      	b.n	f30 <_prep_out_transaction+0x14>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
     f54:	0022      	movs	r2, r4
     f56:	32b8      	adds	r2, #184	; 0xb8
     f58:	78e1      	ldrb	r1, [r4, #3]
     f5a:	2340      	movs	r3, #64	; 0x40
     f5c:	2000      	movs	r0, #0
     f5e:	4c04      	ldr	r4, [pc, #16]	; (f70 <_prep_out_transaction+0x54>)
     f60:	47a0      	blx	r4
     f62:	e7e5      	b.n	f30 <_prep_out_transaction+0x14>
     f64:	000019d5 	.word	0x000019d5
     f68:	000021a1 	.word	0x000021a1
     f6c:	000021c9 	.word	0x000021c9
     f70:	000021f1 	.word	0x000021f1

00000f74 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
     f74:	b510      	push	{r4, lr}
     f76:	0003      	movs	r3, r0
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
     f78:	209c      	movs	r0, #156	; 0x9c
     f7a:	0040      	lsls	r0, r0, #1
     f7c:	4358      	muls	r0, r3
     f7e:	3010      	adds	r0, #16
     f80:	4b02      	ldr	r3, [pc, #8]	; (f8c <tud_cdc_n_available+0x18>)
     f82:	1818      	adds	r0, r3, r0
     f84:	4b02      	ldr	r3, [pc, #8]	; (f90 <tud_cdc_n_available+0x1c>)
     f86:	4798      	blx	r3
}
     f88:	bd10      	pop	{r4, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000828 	.word	0x20000828
     f90:	000019a3 	.word	0x000019a3

00000f94 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
     f94:	b570      	push	{r4, r5, r6, lr}
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
     f96:	4c08      	ldr	r4, [pc, #32]	; (fb8 <tud_cdc_n_read+0x24>)
     f98:	239c      	movs	r3, #156	; 0x9c
     f9a:	005b      	lsls	r3, r3, #1
     f9c:	4358      	muls	r0, r3
     f9e:	1825      	adds	r5, r4, r0
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) bufsize);
     fa0:	b292      	uxth	r2, r2
     fa2:	3010      	adds	r0, #16
     fa4:	1820      	adds	r0, r4, r0
     fa6:	4b05      	ldr	r3, [pc, #20]	; (fbc <tud_cdc_n_read+0x28>)
     fa8:	4798      	blx	r3
     faa:	0004      	movs	r4, r0
  _prep_out_transaction(p_cdc);
     fac:	0028      	movs	r0, r5
     fae:	4b04      	ldr	r3, [pc, #16]	; (fc0 <tud_cdc_n_read+0x2c>)
     fb0:	4798      	blx	r3
  return num_read;
}
     fb2:	0020      	movs	r0, r4
     fb4:	bd70      	pop	{r4, r5, r6, pc}
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	20000828 	.word	0x20000828
     fbc:	00001a21 	.word	0x00001a21
     fc0:	00000f1d 	.word	0x00000f1d

00000fc4 <tud_cdc_n_write_flush>:

  return ret;
}

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
     fc4:	b570      	push	{r4, r5, r6, lr}
     fc6:	0005      	movs	r5, r0

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void)
{
  return tud_mounted() && !tud_suspended();
     fc8:	4b2a      	ldr	r3, [pc, #168]	; (1074 <tud_cdc_n_write_flush+0xb0>)
     fca:	4798      	blx	r3
     fcc:	2800      	cmp	r0, #0
     fce:	d104      	bne.n	fda <tud_cdc_n_write_flush+0x16>
     fd0:	2300      	movs	r3, #0
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
     fd2:	2b00      	cmp	r3, #0
     fd4:	d109      	bne.n	fea <tud_cdc_n_write_flush+0x26>
     fd6:	2000      	movs	r0, #0
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
    return 0;
  }
}
     fd8:	bd70      	pop	{r4, r5, r6, pc}
     fda:	4b27      	ldr	r3, [pc, #156]	; (1078 <tud_cdc_n_write_flush+0xb4>)
     fdc:	4798      	blx	r3
     fde:	2800      	cmp	r0, #0
     fe0:	d101      	bne.n	fe6 <tud_cdc_n_write_flush+0x22>
     fe2:	2301      	movs	r3, #1
     fe4:	e7f5      	b.n	fd2 <tud_cdc_n_write_flush+0xe>
     fe6:	2300      	movs	r3, #0
     fe8:	e7f3      	b.n	fd2 <tud_cdc_n_write_flush+0xe>
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
     fea:	249c      	movs	r4, #156	; 0x9c
     fec:	0064      	lsls	r4, r4, #1
     fee:	436c      	muls	r4, r5
     ff0:	3420      	adds	r4, #32
     ff2:	4b22      	ldr	r3, [pc, #136]	; (107c <tud_cdc_n_write_flush+0xb8>)
     ff4:	191c      	adds	r4, r3, r4
     ff6:	3404      	adds	r4, #4
     ff8:	0020      	movs	r0, r4
     ffa:	4b21      	ldr	r3, [pc, #132]	; (1080 <tud_cdc_n_write_flush+0xbc>)
     ffc:	4798      	blx	r3
     ffe:	2800      	cmp	r0, #0
    1000:	d101      	bne.n	1006 <tud_cdc_n_write_flush+0x42>
    1002:	2000      	movs	r0, #0
    1004:	e7e8      	b.n	fd8 <tud_cdc_n_write_flush+0x14>
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
    1006:	229c      	movs	r2, #156	; 0x9c
    1008:	0052      	lsls	r2, r2, #1
    100a:	436a      	muls	r2, r5
    100c:	4b1b      	ldr	r3, [pc, #108]	; (107c <tud_cdc_n_write_flush+0xb8>)
    100e:	189b      	adds	r3, r3, r2
    1010:	7899      	ldrb	r1, [r3, #2]
    1012:	2000      	movs	r0, #0
    1014:	4b1b      	ldr	r3, [pc, #108]	; (1084 <tud_cdc_n_write_flush+0xc0>)
    1016:	4798      	blx	r3
    1018:	2800      	cmp	r0, #0
    101a:	d101      	bne.n	1020 <tud_cdc_n_write_flush+0x5c>
    101c:	2000      	movs	r0, #0
    101e:	e7db      	b.n	fd8 <tud_cdc_n_write_flush+0x14>
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
    1020:	239c      	movs	r3, #156	; 0x9c
    1022:	005b      	lsls	r3, r3, #1
    1024:	436b      	muls	r3, r5
    1026:	33f8      	adds	r3, #248	; 0xf8
    1028:	4e14      	ldr	r6, [pc, #80]	; (107c <tud_cdc_n_write_flush+0xb8>)
    102a:	18f6      	adds	r6, r6, r3
    102c:	2240      	movs	r2, #64	; 0x40
    102e:	0031      	movs	r1, r6
    1030:	0020      	movs	r0, r4
    1032:	4b15      	ldr	r3, [pc, #84]	; (1088 <tud_cdc_n_write_flush+0xc4>)
    1034:	4798      	blx	r3
    1036:	1e04      	subs	r4, r0, #0
  if ( count )
    1038:	d00e      	beq.n	1058 <tud_cdc_n_write_flush+0x94>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
    103a:	239c      	movs	r3, #156	; 0x9c
    103c:	005b      	lsls	r3, r3, #1
    103e:	436b      	muls	r3, r5
    1040:	4d0e      	ldr	r5, [pc, #56]	; (107c <tud_cdc_n_write_flush+0xb8>)
    1042:	18ed      	adds	r5, r5, r3
    1044:	78a9      	ldrb	r1, [r5, #2]
    1046:	0003      	movs	r3, r0
    1048:	0032      	movs	r2, r6
    104a:	2000      	movs	r0, #0
    104c:	4d0f      	ldr	r5, [pc, #60]	; (108c <tud_cdc_n_write_flush+0xc8>)
    104e:	47a8      	blx	r5
    1050:	2800      	cmp	r0, #0
    1052:	d00c      	beq.n	106e <tud_cdc_n_write_flush+0xaa>
    return count;
    1054:	0020      	movs	r0, r4
    1056:	e7bf      	b.n	fd8 <tud_cdc_n_write_flush+0x14>
    usbd_edpt_release(rhport, p_cdc->ep_in);
    1058:	239c      	movs	r3, #156	; 0x9c
    105a:	005b      	lsls	r3, r3, #1
    105c:	436b      	muls	r3, r5
    105e:	4d07      	ldr	r5, [pc, #28]	; (107c <tud_cdc_n_write_flush+0xb8>)
    1060:	18ed      	adds	r5, r5, r3
    1062:	78a9      	ldrb	r1, [r5, #2]
    1064:	2000      	movs	r0, #0
    1066:	4b0a      	ldr	r3, [pc, #40]	; (1090 <tud_cdc_n_write_flush+0xcc>)
    1068:	4798      	blx	r3
    return 0;
    106a:	2000      	movs	r0, #0
    106c:	e7b4      	b.n	fd8 <tud_cdc_n_write_flush+0x14>
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
    106e:	2000      	movs	r0, #0
    1070:	e7b2      	b.n	fd8 <tud_cdc_n_write_flush+0x14>
    1072:	46c0      	nop			; (mov r8, r8)
    1074:	00001e21 	.word	0x00001e21
    1078:	00001e31 	.word	0x00001e31
    107c:	20000828 	.word	0x20000828
    1080:	000019a3 	.word	0x000019a3
    1084:	000021a1 	.word	0x000021a1
    1088:	00001a21 	.word	0x00001a21
    108c:	000021f1 	.word	0x000021f1
    1090:	000021c9 	.word	0x000021c9

00001094 <tud_cdc_n_write>:
{
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0005      	movs	r5, r0
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) bufsize);
    1098:	249c      	movs	r4, #156	; 0x9c
    109a:	0064      	lsls	r4, r4, #1
    109c:	4344      	muls	r4, r0
    109e:	3420      	adds	r4, #32
    10a0:	4b09      	ldr	r3, [pc, #36]	; (10c8 <tud_cdc_n_write+0x34>)
    10a2:	191c      	adds	r4, r3, r4
    10a4:	3404      	adds	r4, #4
    10a6:	b292      	uxth	r2, r2
    10a8:	0020      	movs	r0, r4
    10aa:	4b08      	ldr	r3, [pc, #32]	; (10cc <tud_cdc_n_write+0x38>)
    10ac:	4798      	blx	r3
    10ae:	0006      	movs	r6, r0
  if ( tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE )
    10b0:	0020      	movs	r0, r4
    10b2:	4b07      	ldr	r3, [pc, #28]	; (10d0 <tud_cdc_n_write+0x3c>)
    10b4:	4798      	blx	r3
    10b6:	283f      	cmp	r0, #63	; 0x3f
    10b8:	d801      	bhi.n	10be <tud_cdc_n_write+0x2a>
}
    10ba:	0030      	movs	r0, r6
    10bc:	bd70      	pop	{r4, r5, r6, pc}
    tud_cdc_n_write_flush(itf);
    10be:	0028      	movs	r0, r5
    10c0:	4b04      	ldr	r3, [pc, #16]	; (10d4 <tud_cdc_n_write+0x40>)
    10c2:	4798      	blx	r3
    10c4:	e7f9      	b.n	10ba <tud_cdc_n_write+0x26>
    10c6:	46c0      	nop			; (mov r8, r8)
    10c8:	20000828 	.word	0x20000828
    10cc:	00001a91 	.word	0x00001a91
    10d0:	000019a3 	.word	0x000019a3
    10d4:	00000fc5 	.word	0x00000fc5

000010d8 <tud_cdc_n_write_clear>:
{
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
}

bool tud_cdc_n_write_clear (uint8_t itf)
{
    10d8:	b510      	push	{r4, lr}
  return tu_fifo_clear(&_cdcd_itf[itf].tx_ff);
    10da:	239c      	movs	r3, #156	; 0x9c
    10dc:	005b      	lsls	r3, r3, #1
    10de:	4343      	muls	r3, r0
    10e0:	3320      	adds	r3, #32
    10e2:	4803      	ldr	r0, [pc, #12]	; (10f0 <tud_cdc_n_write_clear+0x18>)
    10e4:	18c0      	adds	r0, r0, r3
    10e6:	3004      	adds	r0, #4
    10e8:	4b02      	ldr	r3, [pc, #8]	; (10f4 <tud_cdc_n_write_clear+0x1c>)
    10ea:	4798      	blx	r3
}
    10ec:	bd10      	pop	{r4, pc}
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	20000828 	.word	0x20000828
    10f4:	00001aa1 	.word	0x00001aa1

000010f8 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
    10f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fa:	b083      	sub	sp, #12
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
    10fc:	229c      	movs	r2, #156	; 0x9c
    10fe:	0052      	lsls	r2, r2, #1
    1100:	2100      	movs	r1, #0
    1102:	4819      	ldr	r0, [pc, #100]	; (1168 <cdcd_init+0x70>)
    1104:	4b19      	ldr	r3, [pc, #100]	; (116c <cdcd_init+0x74>)
    1106:	4798      	blx	r3

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
    1108:	2600      	movs	r6, #0
    110a:	2e00      	cmp	r6, #0
    110c:	d001      	beq.n	1112 <cdcd_init+0x1a>
#if CFG_FIFO_MUTEX
    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
#endif
  }
}
    110e:	b003      	add	sp, #12
    1110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_cdc->wanted_char = (char) -1;
    1112:	4c15      	ldr	r4, [pc, #84]	; (1168 <cdcd_init+0x70>)
    1114:	259c      	movs	r5, #156	; 0x9c
    1116:	006d      	lsls	r5, r5, #1
    1118:	4375      	muls	r5, r6
    111a:	1963      	adds	r3, r4, r5
    111c:	22ff      	movs	r2, #255	; 0xff
    111e:	715a      	strb	r2, [r3, #5]
    p_cdc->line_coding.bit_rate  = 115200;
    1120:	2200      	movs	r2, #0
    1122:	4913      	ldr	r1, [pc, #76]	; (1170 <cdcd_init+0x78>)
    1124:	80d9      	strh	r1, [r3, #6]
    1126:	2101      	movs	r1, #1
    1128:	8119      	strh	r1, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
    112a:	729a      	strb	r2, [r3, #10]
    p_cdc->line_coding.parity    = 0;
    112c:	72da      	strb	r2, [r3, #11]
    p_cdc->line_coding.data_bits = 8;
    112e:	2208      	movs	r2, #8
    1130:	731a      	strb	r2, [r3, #12]
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
    1132:	0029      	movs	r1, r5
    1134:	3138      	adds	r1, #56	; 0x38
    1136:	1861      	adds	r1, r4, r1
    1138:	0028      	movs	r0, r5
    113a:	3010      	adds	r0, #16
    113c:	1820      	adds	r0, r4, r0
    113e:	2300      	movs	r3, #0
    1140:	9300      	str	r3, [sp, #0]
    1142:	3301      	adds	r3, #1
    1144:	3238      	adds	r2, #56	; 0x38
    1146:	4f0b      	ldr	r7, [pc, #44]	; (1174 <cdcd_init+0x7c>)
    1148:	47b8      	blx	r7
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
    114a:	0029      	movs	r1, r5
    114c:	3178      	adds	r1, #120	; 0x78
    114e:	1861      	adds	r1, r4, r1
    1150:	0028      	movs	r0, r5
    1152:	3020      	adds	r0, #32
    1154:	1820      	adds	r0, r4, r0
    1156:	3004      	adds	r0, #4
    1158:	2301      	movs	r3, #1
    115a:	9300      	str	r3, [sp, #0]
    115c:	2240      	movs	r2, #64	; 0x40
    115e:	47b8      	blx	r7
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
    1160:	3601      	adds	r6, #1
    1162:	b2f6      	uxtb	r6, r6
    1164:	e7d1      	b.n	110a <cdcd_init+0x12>
    1166:	46c0      	nop			; (mov r8, r8)
    1168:	20000828 	.word	0x20000828
    116c:	000049e5 	.word	0x000049e5
    1170:	ffffc200 	.word	0xffffc200
    1174:	00001971 	.word	0x00001971

00001178 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
    1178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
    117a:	2500      	movs	r5, #0
    117c:	2d00      	cmp	r5, #0
    117e:	d000      	beq.n	1182 <cdcd_reset+0xa>
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
    tu_fifo_clear(&p_cdc->rx_ff);
    tu_fifo_clear(&p_cdc->tx_ff);
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
  }
}
    1180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
    1182:	4c0d      	ldr	r4, [pc, #52]	; (11b8 <cdcd_reset+0x40>)
    1184:	269c      	movs	r6, #156	; 0x9c
    1186:	0076      	lsls	r6, r6, #1
    1188:	436e      	muls	r6, r5
    118a:	19a0      	adds	r0, r4, r6
    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
    118c:	2205      	movs	r2, #5
    118e:	2100      	movs	r1, #0
    1190:	4b0a      	ldr	r3, [pc, #40]	; (11bc <cdcd_reset+0x44>)
    1192:	4798      	blx	r3
    tu_fifo_clear(&p_cdc->rx_ff);
    1194:	0030      	movs	r0, r6
    1196:	3010      	adds	r0, #16
    1198:	1820      	adds	r0, r4, r0
    119a:	4f09      	ldr	r7, [pc, #36]	; (11c0 <cdcd_reset+0x48>)
    119c:	47b8      	blx	r7
    tu_fifo_clear(&p_cdc->tx_ff);
    119e:	3620      	adds	r6, #32
    11a0:	19a4      	adds	r4, r4, r6
    11a2:	3404      	adds	r4, #4
    11a4:	0020      	movs	r0, r4
    11a6:	47b8      	blx	r7
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
    11a8:	2101      	movs	r1, #1
    11aa:	0020      	movs	r0, r4
    11ac:	4b05      	ldr	r3, [pc, #20]	; (11c4 <cdcd_reset+0x4c>)
    11ae:	4798      	blx	r3
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
    11b0:	3501      	adds	r5, #1
    11b2:	b2ed      	uxtb	r5, r5
    11b4:	e7e2      	b.n	117c <cdcd_reset+0x4>
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	20000828 	.word	0x20000828
    11bc:	000049e5 	.word	0x000049e5
    11c0:	00001aa1 	.word	0x00001aa1
    11c4:	00001abb 	.word	0x00001abb

000011c8 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
    11c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ca:	b083      	sub	sp, #12
    11cc:	0005      	movs	r5, r0
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
    11ce:	794b      	ldrb	r3, [r1, #5]
    11d0:	2b02      	cmp	r3, #2
    11d2:	d003      	beq.n	11dc <cdcd_open+0x14>
    11d4:	2400      	movs	r4, #0

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);

  return drv_len;
}
    11d6:	0020      	movs	r0, r4
    11d8:	b003      	add	sp, #12
    11da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
    11dc:	798b      	ldrb	r3, [r1, #6]
    11de:	2b02      	cmp	r3, #2
    11e0:	d001      	beq.n	11e6 <cdcd_open+0x1e>
    11e2:	2400      	movs	r4, #0
    11e4:	e7f7      	b.n	11d6 <cdcd_open+0xe>
    11e6:	2300      	movs	r3, #0
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
    11e8:	2b00      	cmp	r3, #0
    11ea:	d111      	bne.n	1210 <cdcd_open+0x48>
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
    11ec:	0018      	movs	r0, r3
    11ee:	269c      	movs	r6, #156	; 0x9c
    11f0:	0076      	lsls	r6, r6, #1
    11f2:	435e      	muls	r6, r3
    11f4:	4c28      	ldr	r4, [pc, #160]	; (1298 <cdcd_open+0xd0>)
    11f6:	19a4      	adds	r4, r4, r6
    11f8:	78a4      	ldrb	r4, [r4, #2]
    11fa:	2c00      	cmp	r4, #0
    11fc:	d002      	beq.n	1204 <cdcd_open+0x3c>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
    11fe:	3301      	adds	r3, #1
    1200:	b2db      	uxtb	r3, r3
    1202:	e7f1      	b.n	11e8 <cdcd_open+0x20>
      p_cdc = &_cdcd_itf[cdc_id];
    1204:	269c      	movs	r6, #156	; 0x9c
    1206:	0076      	lsls	r6, r6, #1
    1208:	4370      	muls	r0, r6
    120a:	4e23      	ldr	r6, [pc, #140]	; (1298 <cdcd_open+0xd0>)
    120c:	1836      	adds	r6, r6, r0
      break;
    120e:	e000      	b.n	1212 <cdcd_open+0x4a>
  cdcd_interface_t * p_cdc = NULL;
    1210:	2600      	movs	r6, #0
  TU_ASSERT(p_cdc, 0);
    1212:	2e00      	cmp	r6, #0
    1214:	d039      	beq.n	128a <cdcd_open+0xc2>
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
    1216:	788b      	ldrb	r3, [r1, #2]
    1218:	7033      	strb	r3, [r6, #0]
// Descriptor helper
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
  return desc8 + desc8[DESC_OFFSET_LEN];
    121a:	780f      	ldrb	r7, [r1, #0]
    121c:	19cf      	adds	r7, r1, r7
  uint16_t drv_len = sizeof(tusb_desc_interface_t);
    121e:	2409      	movs	r4, #9
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    1220:	787b      	ldrb	r3, [r7, #1]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
    1222:	2b24      	cmp	r3, #36	; 0x24
    1224:	d106      	bne.n	1234 <cdcd_open+0x6c>
    1226:	4294      	cmp	r4, r2
    1228:	d804      	bhi.n	1234 <cdcd_open+0x6c>
}

TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
    122a:	783b      	ldrb	r3, [r7, #0]
    drv_len += tu_desc_len(p_desc);
    122c:	191c      	adds	r4, r3, r4
    122e:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
    1230:	18ff      	adds	r7, r7, r3
    1232:	e7f5      	b.n	1220 <cdcd_open+0x58>
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
    1234:	2b05      	cmp	r3, #5
    1236:	d006      	beq.n	1246 <cdcd_open+0x7e>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    1238:	787b      	ldrb	r3, [r7, #1]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
    123a:	2b04      	cmp	r3, #4
    123c:	d010      	beq.n	1260 <cdcd_open+0x98>
  _prep_out_transaction(p_cdc);
    123e:	0030      	movs	r0, r6
    1240:	4b16      	ldr	r3, [pc, #88]	; (129c <cdcd_open+0xd4>)
    1242:	4798      	blx	r3
  return drv_len;
    1244:	e7c7      	b.n	11d6 <cdcd_open+0xe>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
    1246:	0039      	movs	r1, r7
    1248:	0028      	movs	r0, r5
    124a:	4b15      	ldr	r3, [pc, #84]	; (12a0 <cdcd_open+0xd8>)
    124c:	4798      	blx	r3
    124e:	2800      	cmp	r0, #0
    1250:	d01d      	beq.n	128e <cdcd_open+0xc6>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
    1252:	78bb      	ldrb	r3, [r7, #2]
    1254:	7073      	strb	r3, [r6, #1]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
    1256:	783b      	ldrb	r3, [r7, #0]
    drv_len += tu_desc_len(p_desc);
    1258:	191c      	adds	r4, r3, r4
    125a:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
    125c:	18ff      	adds	r7, r7, r3
    125e:	e7eb      	b.n	1238 <cdcd_open+0x70>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
    1260:	797b      	ldrb	r3, [r7, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
    1262:	2b0a      	cmp	r3, #10
    1264:	d1eb      	bne.n	123e <cdcd_open+0x76>
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
    1266:	7839      	ldrb	r1, [r7, #0]
    drv_len += tu_desc_len(p_desc);
    1268:	190c      	adds	r4, r1, r4
    126a:	b2a4      	uxth	r4, r4
  return desc8 + desc8[DESC_OFFSET_LEN];
    126c:	1879      	adds	r1, r7, r1
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
    126e:	1cb3      	adds	r3, r6, #2
    1270:	9301      	str	r3, [sp, #4]
    1272:	1cf3      	adds	r3, r6, #3
    1274:	9300      	str	r3, [sp, #0]
    1276:	2302      	movs	r3, #2
    1278:	2202      	movs	r2, #2
    127a:	0028      	movs	r0, r5
    127c:	4d09      	ldr	r5, [pc, #36]	; (12a4 <cdcd_open+0xdc>)
    127e:	47a8      	blx	r5
    1280:	2800      	cmp	r0, #0
    1282:	d006      	beq.n	1292 <cdcd_open+0xca>
    drv_len += 2*sizeof(tusb_desc_endpoint_t);
    1284:	340e      	adds	r4, #14
    1286:	b2a4      	uxth	r4, r4
    1288:	e7d9      	b.n	123e <cdcd_open+0x76>
  TU_ASSERT(p_cdc, 0);
    128a:	2400      	movs	r4, #0
    128c:	e7a3      	b.n	11d6 <cdcd_open+0xe>
    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
    128e:	2400      	movs	r4, #0
    1290:	e7a1      	b.n	11d6 <cdcd_open+0xe>
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
    1292:	2400      	movs	r4, #0
    1294:	e79f      	b.n	11d6 <cdcd_open+0xe>
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	20000828 	.word	0x20000828
    129c:	00000f1d 	.word	0x00000f1d
    12a0:	000020f9 	.word	0x000020f9
    12a4:	00002139 	.word	0x00002139

000012a8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
    12a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12aa:	0015      	movs	r5, r2
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
    12ac:	7812      	ldrb	r2, [r2, #0]
    12ae:	2360      	movs	r3, #96	; 0x60
    12b0:	4013      	ands	r3, r2
    12b2:	2b20      	cmp	r3, #32
    12b4:	d001      	beq.n	12ba <cdcd_control_xfer_cb+0x12>
    12b6:	2000      	movs	r0, #0

    default: return false; // stall unsupported request
  }

  return true;
}
    12b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12ba:	4a40      	ldr	r2, [pc, #256]	; (13bc <cdcd_control_xfer_cb+0x114>)
    12bc:	2400      	movs	r4, #0
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
    12be:	2c00      	cmp	r4, #0
    12c0:	d172      	bne.n	13a8 <cdcd_control_xfer_cb+0x100>
    if ( p_cdc->itf_num == request->wIndex ) break;
    12c2:	7816      	ldrb	r6, [r2, #0]
    12c4:	792f      	ldrb	r7, [r5, #4]
    12c6:	796b      	ldrb	r3, [r5, #5]
    12c8:	021b      	lsls	r3, r3, #8
    12ca:	433b      	orrs	r3, r7
    12cc:	429e      	cmp	r6, r3
    12ce:	d004      	beq.n	12da <cdcd_control_xfer_cb+0x32>
  for ( ; ; itf++, p_cdc++)
    12d0:	3401      	adds	r4, #1
    12d2:	b2e4      	uxtb	r4, r4
    12d4:	3239      	adds	r2, #57	; 0x39
    12d6:	32ff      	adds	r2, #255	; 0xff
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
    12d8:	e7f1      	b.n	12be <cdcd_control_xfer_cb+0x16>
  switch ( request->bRequest )
    12da:	786b      	ldrb	r3, [r5, #1]
    12dc:	2b21      	cmp	r3, #33	; 0x21
    12de:	d021      	beq.n	1324 <cdcd_control_xfer_cb+0x7c>
    12e0:	d909      	bls.n	12f6 <cdcd_control_xfer_cb+0x4e>
    12e2:	2b22      	cmp	r3, #34	; 0x22
    12e4:	d029      	beq.n	133a <cdcd_control_xfer_cb+0x92>
    12e6:	2b23      	cmp	r3, #35	; 0x23
    12e8:	d160      	bne.n	13ac <cdcd_control_xfer_cb+0x104>
      if (stage == CONTROL_STAGE_SETUP)
    12ea:	2901      	cmp	r1, #1
    12ec:	d04b      	beq.n	1386 <cdcd_control_xfer_cb+0xde>
      else if (stage == CONTROL_STAGE_ACK)
    12ee:	2903      	cmp	r1, #3
    12f0:	d04e      	beq.n	1390 <cdcd_control_xfer_cb+0xe8>
  return true;
    12f2:	2001      	movs	r0, #1
    12f4:	e7e0      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
  switch ( request->bRequest )
    12f6:	2b20      	cmp	r3, #32
    12f8:	d158      	bne.n	13ac <cdcd_control_xfer_cb+0x104>
      if (stage == CONTROL_STAGE_SETUP)
    12fa:	2901      	cmp	r1, #1
    12fc:	d003      	beq.n	1306 <cdcd_control_xfer_cb+0x5e>
      else if ( stage == CONTROL_STAGE_ACK)
    12fe:	2903      	cmp	r1, #3
    1300:	d008      	beq.n	1314 <cdcd_control_xfer_cb+0x6c>
  return true;
    1302:	2001      	movs	r0, #1
    1304:	e7d8      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
    1306:	3206      	adds	r2, #6
    1308:	2307      	movs	r3, #7
    130a:	0029      	movs	r1, r5
    130c:	4c2c      	ldr	r4, [pc, #176]	; (13c0 <cdcd_control_xfer_cb+0x118>)
    130e:	47a0      	blx	r4
  return true;
    1310:	2001      	movs	r0, #1
    1312:	e7d1      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
    1314:	4b2b      	ldr	r3, [pc, #172]	; (13c4 <cdcd_control_xfer_cb+0x11c>)
    1316:	2b00      	cmp	r3, #0
    1318:	d04a      	beq.n	13b0 <cdcd_control_xfer_cb+0x108>
    131a:	1d91      	adds	r1, r2, #6
    131c:	0020      	movs	r0, r4
    131e:	4798      	blx	r3
  return true;
    1320:	2001      	movs	r0, #1
    1322:	e7c9      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
      if (stage == CONTROL_STAGE_SETUP)
    1324:	2901      	cmp	r1, #1
    1326:	d001      	beq.n	132c <cdcd_control_xfer_cb+0x84>
  return true;
    1328:	2001      	movs	r0, #1
    132a:	e7c5      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
    132c:	3206      	adds	r2, #6
    132e:	2307      	movs	r3, #7
    1330:	0029      	movs	r1, r5
    1332:	4c23      	ldr	r4, [pc, #140]	; (13c0 <cdcd_control_xfer_cb+0x118>)
    1334:	47a0      	blx	r4
  return true;
    1336:	2001      	movs	r0, #1
    1338:	e7be      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
      if (stage == CONTROL_STAGE_SETUP)
    133a:	2901      	cmp	r1, #1
    133c:	d003      	beq.n	1346 <cdcd_control_xfer_cb+0x9e>
      else if (stage == CONTROL_STAGE_ACK)
    133e:	2903      	cmp	r1, #3
    1340:	d006      	beq.n	1350 <cdcd_control_xfer_cb+0xa8>
  return true;
    1342:	2001      	movs	r0, #1
    1344:	e7b8      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        tud_control_status(rhport, request);
    1346:	0029      	movs	r1, r5
    1348:	4b1f      	ldr	r3, [pc, #124]	; (13c8 <cdcd_control_xfer_cb+0x120>)
    134a:	4798      	blx	r3
  return true;
    134c:	2001      	movs	r0, #1
    134e:	e7b3      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        bool const dtr = tu_bit_test(request->wValue, 0);
    1350:	78ab      	ldrb	r3, [r5, #2]
    1352:	78e9      	ldrb	r1, [r5, #3]
    1354:	0209      	lsls	r1, r1, #8
    1356:	4319      	orrs	r1, r3
    1358:	2301      	movs	r3, #1
    135a:	400b      	ands	r3, r1
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
    135c:	001d      	movs	r5, r3
    135e:	0848      	lsrs	r0, r1, #1
    1360:	2601      	movs	r6, #1
    1362:	4006      	ands	r6, r0
        p_cdc->line_state = (uint8_t) request->wValue;
    1364:	7111      	strb	r1, [r2, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
    1366:	4259      	negs	r1, r3
    1368:	4159      	adcs	r1, r3
    136a:	b2c9      	uxtb	r1, r1
    136c:	3224      	adds	r2, #36	; 0x24
    136e:	0010      	movs	r0, r2
    1370:	4b16      	ldr	r3, [pc, #88]	; (13cc <cdcd_control_xfer_cb+0x124>)
    1372:	4798      	blx	r3
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
    1374:	4b16      	ldr	r3, [pc, #88]	; (13d0 <cdcd_control_xfer_cb+0x128>)
    1376:	2b00      	cmp	r3, #0
    1378:	d01c      	beq.n	13b4 <cdcd_control_xfer_cb+0x10c>
    137a:	0032      	movs	r2, r6
    137c:	0029      	movs	r1, r5
    137e:	0020      	movs	r0, r4
    1380:	4798      	blx	r3
  return true;
    1382:	2001      	movs	r0, #1
    1384:	e798      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        tud_control_status(rhport, request);
    1386:	0029      	movs	r1, r5
    1388:	4b0f      	ldr	r3, [pc, #60]	; (13c8 <cdcd_control_xfer_cb+0x120>)
    138a:	4798      	blx	r3
  return true;
    138c:	2001      	movs	r0, #1
    138e:	e793      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
    1390:	4b10      	ldr	r3, [pc, #64]	; (13d4 <cdcd_control_xfer_cb+0x12c>)
    1392:	2b00      	cmp	r3, #0
    1394:	d010      	beq.n	13b8 <cdcd_control_xfer_cb+0x110>
    1396:	78ab      	ldrb	r3, [r5, #2]
    1398:	78e9      	ldrb	r1, [r5, #3]
    139a:	0209      	lsls	r1, r1, #8
    139c:	4319      	orrs	r1, r3
    139e:	0020      	movs	r0, r4
    13a0:	4b0c      	ldr	r3, [pc, #48]	; (13d4 <cdcd_control_xfer_cb+0x12c>)
    13a2:	4798      	blx	r3
  return true;
    13a4:	2001      	movs	r0, #1
    13a6:	e787      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
    13a8:	2000      	movs	r0, #0
    13aa:	e785      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
    default: return false; // stall unsupported request
    13ac:	2000      	movs	r0, #0
    13ae:	e783      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
  return true;
    13b0:	2001      	movs	r0, #1
    13b2:	e781      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
    13b4:	2001      	movs	r0, #1
    13b6:	e77f      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
    13b8:	2001      	movs	r0, #1
    13ba:	e77d      	b.n	12b8 <cdcd_control_xfer_cb+0x10>
    13bc:	20000828 	.word	0x20000828
    13c0:	00002929 	.word	0x00002929
    13c4:	00000000 	.word	0x00000000
    13c8:	000028e5 	.word	0x000028e5
    13cc:	00001abb 	.word	0x00001abb
	...

000013d8 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46d6      	mov	lr, sl
    13dc:	b500      	push	{lr}
    13de:	b082      	sub	sp, #8
    13e0:	9000      	str	r0, [sp, #0]
    13e2:	468a      	mov	sl, r1
    13e4:	001d      	movs	r5, r3

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
    13e6:	2600      	movs	r6, #0
    13e8:	2e00      	cmp	r6, #0
    13ea:	d009      	beq.n	1400 <cdcd_xfer_cb+0x28>
  {
    p_cdc = &_cdcd_itf[itf];
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
    13ec:	2e00      	cmp	r6, #0
    13ee:	d172      	bne.n	14d6 <cdcd_xfer_cb+0xfe>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
    13f0:	78fb      	ldrb	r3, [r7, #3]
    13f2:	459a      	cmp	sl, r3
    13f4:	d012      	beq.n	141c <cdcd_xfer_cb+0x44>
  }
  
  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
    13f6:	78bb      	ldrb	r3, [r7, #2]
    13f8:	459a      	cmp	sl, r3
    13fa:	d045      	beq.n	1488 <cdcd_xfer_cb+0xb0>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
    13fc:	2401      	movs	r4, #1
    13fe:	e06b      	b.n	14d8 <cdcd_xfer_cb+0x100>
    p_cdc = &_cdcd_itf[itf];
    1400:	279c      	movs	r7, #156	; 0x9c
    1402:	007f      	lsls	r7, r7, #1
    1404:	4377      	muls	r7, r6
    1406:	4b39      	ldr	r3, [pc, #228]	; (14ec <cdcd_xfer_cb+0x114>)
    1408:	19df      	adds	r7, r3, r7
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
    140a:	78fb      	ldrb	r3, [r7, #3]
    140c:	4553      	cmp	r3, sl
    140e:	d0ed      	beq.n	13ec <cdcd_xfer_cb+0x14>
    1410:	78bb      	ldrb	r3, [r7, #2]
    1412:	459a      	cmp	sl, r3
    1414:	d0ea      	beq.n	13ec <cdcd_xfer_cb+0x14>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
    1416:	3601      	adds	r6, #1
    1418:	b2f6      	uxtb	r6, r6
    141a:	e7e5      	b.n	13e8 <cdcd_xfer_cb+0x10>
    tu_fifo_write_n(&p_cdc->rx_ff, &p_cdc->epout_buf, (uint16_t) xferred_bytes);
    141c:	2310      	movs	r3, #16
    141e:	469c      	mov	ip, r3
    1420:	44bc      	add	ip, r7
    1422:	4663      	mov	r3, ip
    1424:	9301      	str	r3, [sp, #4]
    1426:	0039      	movs	r1, r7
    1428:	31b8      	adds	r1, #184	; 0xb8
    142a:	b2aa      	uxth	r2, r5
    142c:	4660      	mov	r0, ip
    142e:	4b30      	ldr	r3, [pc, #192]	; (14f0 <cdcd_xfer_cb+0x118>)
    1430:	4798      	blx	r3
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
    1432:	4b30      	ldr	r3, [pc, #192]	; (14f4 <cdcd_xfer_cb+0x11c>)
    1434:	2b00      	cmp	r3, #0
    1436:	d017      	beq.n	1468 <cdcd_xfer_cb+0x90>
    1438:	797b      	ldrb	r3, [r7, #5]
    143a:	2bff      	cmp	r3, #255	; 0xff
    143c:	d014      	beq.n	1468 <cdcd_xfer_cb+0x90>
    143e:	2400      	movs	r4, #0
    1440:	e000      	b.n	1444 <cdcd_xfer_cb+0x6c>
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
    1442:	3401      	adds	r4, #1
    1444:	42ac      	cmp	r4, r5
    1446:	d20f      	bcs.n	1468 <cdcd_xfer_cb+0x90>
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
    1448:	797a      	ldrb	r2, [r7, #5]
    144a:	193b      	adds	r3, r7, r4
    144c:	33b8      	adds	r3, #184	; 0xb8
    144e:	781b      	ldrb	r3, [r3, #0]
    1450:	429a      	cmp	r2, r3
    1452:	d1f6      	bne.n	1442 <cdcd_xfer_cb+0x6a>
    1454:	9801      	ldr	r0, [sp, #4]
    1456:	4b28      	ldr	r3, [pc, #160]	; (14f8 <cdcd_xfer_cb+0x120>)
    1458:	4798      	blx	r3
    145a:	2800      	cmp	r0, #0
    145c:	d1f1      	bne.n	1442 <cdcd_xfer_cb+0x6a>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
    145e:	7979      	ldrb	r1, [r7, #5]
    1460:	0030      	movs	r0, r6
    1462:	4b24      	ldr	r3, [pc, #144]	; (14f4 <cdcd_xfer_cb+0x11c>)
    1464:	4798      	blx	r3
    1466:	e7ec      	b.n	1442 <cdcd_xfer_cb+0x6a>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
    1468:	4b24      	ldr	r3, [pc, #144]	; (14fc <cdcd_xfer_cb+0x124>)
    146a:	2b00      	cmp	r3, #0
    146c:	d004      	beq.n	1478 <cdcd_xfer_cb+0xa0>
    146e:	9801      	ldr	r0, [sp, #4]
    1470:	4b21      	ldr	r3, [pc, #132]	; (14f8 <cdcd_xfer_cb+0x120>)
    1472:	4798      	blx	r3
    1474:	2800      	cmp	r0, #0
    1476:	d003      	beq.n	1480 <cdcd_xfer_cb+0xa8>
    _prep_out_transaction(p_cdc);
    1478:	0038      	movs	r0, r7
    147a:	4b21      	ldr	r3, [pc, #132]	; (1500 <cdcd_xfer_cb+0x128>)
    147c:	4798      	blx	r3
    147e:	e7ba      	b.n	13f6 <cdcd_xfer_cb+0x1e>
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
    1480:	0030      	movs	r0, r6
    1482:	4b1e      	ldr	r3, [pc, #120]	; (14fc <cdcd_xfer_cb+0x124>)
    1484:	4798      	blx	r3
    1486:	e7f7      	b.n	1478 <cdcd_xfer_cb+0xa0>
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
    1488:	4b1e      	ldr	r3, [pc, #120]	; (1504 <cdcd_xfer_cb+0x12c>)
    148a:	2b00      	cmp	r3, #0
    148c:	d001      	beq.n	1492 <cdcd_xfer_cb+0xba>
    148e:	0030      	movs	r0, r6
    1490:	4798      	blx	r3
    if ( 0 == tud_cdc_n_write_flush(itf) )
    1492:	0030      	movs	r0, r6
    1494:	4b1c      	ldr	r3, [pc, #112]	; (1508 <cdcd_xfer_cb+0x130>)
    1496:	4798      	blx	r3
    1498:	2800      	cmp	r0, #0
    149a:	d001      	beq.n	14a0 <cdcd_xfer_cb+0xc8>
  return true;
    149c:	2401      	movs	r4, #1
    149e:	e01b      	b.n	14d8 <cdcd_xfer_cb+0x100>
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
    14a0:	0038      	movs	r0, r7
    14a2:	3024      	adds	r0, #36	; 0x24
    14a4:	4b19      	ldr	r3, [pc, #100]	; (150c <cdcd_xfer_cb+0x134>)
    14a6:	4798      	blx	r3
    14a8:	2800      	cmp	r0, #0
    14aa:	d11a      	bne.n	14e2 <cdcd_xfer_cb+0x10a>
    14ac:	2d00      	cmp	r5, #0
    14ae:	d01a      	beq.n	14e6 <cdcd_xfer_cb+0x10e>
    14b0:	06ab      	lsls	r3, r5, #26
    14b2:	d001      	beq.n	14b8 <cdcd_xfer_cb+0xe0>
  return true;
    14b4:	2401      	movs	r4, #1
    14b6:	e00f      	b.n	14d8 <cdcd_xfer_cb+0x100>
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
    14b8:	78b9      	ldrb	r1, [r7, #2]
    14ba:	9800      	ldr	r0, [sp, #0]
    14bc:	4b14      	ldr	r3, [pc, #80]	; (1510 <cdcd_xfer_cb+0x138>)
    14be:	4798      	blx	r3
    14c0:	1e04      	subs	r4, r0, #0
    14c2:	d101      	bne.n	14c8 <cdcd_xfer_cb+0xf0>
  return true;
    14c4:	2401      	movs	r4, #1
    14c6:	e007      	b.n	14d8 <cdcd_xfer_cb+0x100>
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
    14c8:	78b9      	ldrb	r1, [r7, #2]
    14ca:	2300      	movs	r3, #0
    14cc:	2200      	movs	r2, #0
    14ce:	9800      	ldr	r0, [sp, #0]
    14d0:	4d10      	ldr	r5, [pc, #64]	; (1514 <cdcd_xfer_cb+0x13c>)
    14d2:	47a8      	blx	r5
    14d4:	e000      	b.n	14d8 <cdcd_xfer_cb+0x100>
  TU_ASSERT(itf < CFG_TUD_CDC);
    14d6:	2400      	movs	r4, #0
}
    14d8:	0020      	movs	r0, r4
    14da:	b002      	add	sp, #8
    14dc:	bc04      	pop	{r2}
    14de:	4692      	mov	sl, r2
    14e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return true;
    14e2:	2401      	movs	r4, #1
    14e4:	e7f8      	b.n	14d8 <cdcd_xfer_cb+0x100>
    14e6:	2401      	movs	r4, #1
    14e8:	e7f6      	b.n	14d8 <cdcd_xfer_cb+0x100>
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	20000828 	.word	0x20000828
    14f0:	00001a91 	.word	0x00001a91
    14f4:	00000000 	.word	0x00000000
    14f8:	000019c7 	.word	0x000019c7
    14fc:	00000000 	.word	0x00000000
    1500:	00000f1d 	.word	0x00000f1d
    1504:	00000000 	.word	0x00000000
    1508:	00000fc5 	.word	0x00000fc5
    150c:	000019a3 	.word	0x000019a3
    1510:	000021a1 	.word	0x000021a1
    1514:	000021f1 	.word	0x000021f1

00001518 <advance_pointer>:
static uint16_t advance_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p > (uint16_t)(p + offset)) || ((uint16_t)(p + offset) > f->max_pointer_idx))
    1518:	188a      	adds	r2, r1, r2
    151a:	b292      	uxth	r2, r2
    151c:	4291      	cmp	r1, r2
    151e:	d802      	bhi.n	1526 <advance_pointer+0xe>
    1520:	8983      	ldrh	r3, [r0, #12]
    1522:	429a      	cmp	r2, r3
    1524:	d902      	bls.n	152c <advance_pointer+0x14>
  {
    p = (uint16_t) ((p + offset) + f->non_used_index_space);
    1526:	8940      	ldrh	r0, [r0, #10]
    1528:	1812      	adds	r2, r2, r0
    152a:	b292      	uxth	r2, r2
  else
  {
    p += offset;
  }
  return p;
}
    152c:	0010      	movs	r0, r2
    152e:	4770      	bx	lr

00001530 <backward_pointer>:
static uint16_t backward_pointer(tu_fifo_t* f, uint16_t p, uint16_t offset)
{
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  if ((p < (uint16_t)(p - offset)) || ((uint16_t)(p - offset) > f->max_pointer_idx))
    1530:	1a8a      	subs	r2, r1, r2
    1532:	b292      	uxth	r2, r2
    1534:	4291      	cmp	r1, r2
    1536:	d302      	bcc.n	153e <backward_pointer+0xe>
    1538:	8983      	ldrh	r3, [r0, #12]
    153a:	429a      	cmp	r2, r3
    153c:	d902      	bls.n	1544 <backward_pointer+0x14>
  {
    p = (uint16_t) ((p - offset) - f->non_used_index_space);
    153e:	8940      	ldrh	r0, [r0, #10]
    1540:	1a12      	subs	r2, r2, r0
    1542:	b292      	uxth	r2, r2
  else
  {
    p -= offset;
  }
  return p;
}
    1544:	0010      	movs	r0, r2
    1546:	4770      	bx	lr

00001548 <get_relative_pointer>:

// get relative from absolute pointer
static uint16_t get_relative_pointer(tu_fifo_t* f, uint16_t p)
{
  return _ff_mod(p, f->depth);
    1548:	8883      	ldrh	r3, [r0, #4]
    154a:	e001      	b.n	1550 <get_relative_pointer+0x8>
  while ( idx >= depth) idx -= depth;
    154c:	1ac9      	subs	r1, r1, r3
    154e:	b289      	uxth	r1, r1
    1550:	428b      	cmp	r3, r1
    1552:	d9fb      	bls.n	154c <get_relative_pointer+0x4>
}
    1554:	0008      	movs	r0, r1
    1556:	4770      	bx	lr

00001558 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wAbs, uint16_t rAbs)
{
    1558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    155a:	0005      	movs	r5, r0
    155c:	000c      	movs	r4, r1
    155e:	0011      	movs	r1, r2
    1560:	001e      	movs	r6, r3
  uint16_t cnt = wAbs-rAbs;
    1562:	1ad3      	subs	r3, r2, r3
    1564:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1566:	42b2      	cmp	r2, r6
    1568:	d202      	bcs.n	1570 <_tu_fifo_peek+0x18>
    156a:	8942      	ldrh	r2, [r0, #10]
    156c:	1a9b      	subs	r3, r3, r2
    156e:	b29b      	uxth	r3, r3
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
    1570:	88af      	ldrh	r7, [r5, #4]
    1572:	429f      	cmp	r7, r3
    1574:	d205      	bcs.n	1582 <_tu_fifo_peek+0x2a>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
    1576:	003a      	movs	r2, r7
    1578:	0028      	movs	r0, r5
    157a:	4b0a      	ldr	r3, [pc, #40]	; (15a4 <_tu_fifo_peek+0x4c>)
    157c:	4798      	blx	r3
    157e:	8228      	strh	r0, [r5, #16]
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
    cnt = f->depth;
    1580:	003b      	movs	r3, r7
  }

  // Skip beginning of buffer
  if (cnt == 0) return false;
    1582:	2b00      	cmp	r3, #0
    1584:	d101      	bne.n	158a <_tu_fifo_peek+0x32>
    1586:	2000      	movs	r0, #0

  // Peek data
  _ff_pull(f, p_buffer, rRel);

  return true;
}
    1588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint16_t rRel = get_relative_pointer(f, rAbs);
    158a:	0031      	movs	r1, r6
    158c:	0028      	movs	r0, r5
    158e:	4b06      	ldr	r3, [pc, #24]	; (15a8 <_tu_fifo_peek+0x50>)
    1590:	4798      	blx	r3
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
    1592:	6829      	ldr	r1, [r5, #0]
    1594:	88ea      	ldrh	r2, [r5, #6]
    1596:	4350      	muls	r0, r2
    1598:	1809      	adds	r1, r1, r0
    159a:	0020      	movs	r0, r4
    159c:	4b03      	ldr	r3, [pc, #12]	; (15ac <_tu_fifo_peek+0x54>)
    159e:	4798      	blx	r3
  return true;
    15a0:	2001      	movs	r0, #1
    15a2:	e7f1      	b.n	1588 <_tu_fifo_peek+0x30>
    15a4:	00001531 	.word	0x00001531
    15a8:	00001549 	.word	0x00001549
    15ac:	00004961 	.word	0x00004961

000015b0 <_ff_pull_const_addr>:
{
    15b0:	b530      	push	{r4, r5, lr}
    15b2:	b083      	sub	sp, #12
    15b4:	0004      	movs	r4, r0
  uint16_t full_words = len >> 2;
    15b6:	0893      	lsrs	r3, r2, #2
  while(full_words--)
    15b8:	e00c      	b.n	15d4 <_ff_pull_const_addr+0x24>
typedef struct { uint32_t val; } TU_ATTR_PACKED tu_unaligned_uint32_t;

TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void* mem)
{
  tu_unaligned_uint32_t const* ua32 = (tu_unaligned_uint32_t const*) mem;
  return ua32->val;
    15ba:	780b      	ldrb	r3, [r1, #0]
    15bc:	7848      	ldrb	r0, [r1, #1]
    15be:	0200      	lsls	r0, r0, #8
    15c0:	4318      	orrs	r0, r3
    15c2:	788b      	ldrb	r3, [r1, #2]
    15c4:	041b      	lsls	r3, r3, #16
    15c6:	4318      	orrs	r0, r3
    15c8:	78cb      	ldrb	r3, [r1, #3]
    15ca:	061b      	lsls	r3, r3, #24
    15cc:	4303      	orrs	r3, r0
    *tx_fifo = tu_unaligned_read32(ff_buf);
    15ce:	6023      	str	r3, [r4, #0]
    ff_buf += 4;
    15d0:	3104      	adds	r1, #4
  while(full_words--)
    15d2:	002b      	movs	r3, r5
    15d4:	1e5d      	subs	r5, r3, #1
    15d6:	b2ad      	uxth	r5, r5
    15d8:	2b00      	cmp	r3, #0
    15da:	d1ee      	bne.n	15ba <_ff_pull_const_addr+0xa>
  uint8_t const bytes_rem = len & 0x03;
    15dc:	3303      	adds	r3, #3
    15de:	401a      	ands	r2, r3
  if ( bytes_rem )
    15e0:	d101      	bne.n	15e6 <_ff_pull_const_addr+0x36>
}
    15e2:	b003      	add	sp, #12
    15e4:	bd30      	pop	{r4, r5, pc}
    uint32_t tmp32 = 0;
    15e6:	2300      	movs	r3, #0
    15e8:	9301      	str	r3, [sp, #4]
    memcpy(&tmp32, ff_buf, bytes_rem);
    15ea:	a801      	add	r0, sp, #4
    15ec:	4b02      	ldr	r3, [pc, #8]	; (15f8 <_ff_pull_const_addr+0x48>)
    15ee:	4798      	blx	r3
    *tx_fifo = tmp32;
    15f0:	9b01      	ldr	r3, [sp, #4]
    15f2:	6023      	str	r3, [r4, #0]
}
    15f4:	e7f5      	b.n	15e2 <_ff_pull_const_addr+0x32>
    15f6:	46c0      	nop			; (mov r8, r8)
    15f8:	00004961 	.word	0x00004961

000015fc <_ff_pull_n>:
{
    15fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fe:	46ce      	mov	lr, r9
    1600:	4647      	mov	r7, r8
    1602:	b580      	push	{r7, lr}
    1604:	b085      	sub	sp, #20
    1606:	0007      	movs	r7, r0
    1608:	9101      	str	r1, [sp, #4]
    160a:	a90c      	add	r1, sp, #48	; 0x30
    160c:	7809      	ldrb	r1, [r1, #0]
  uint16_t const nLin = f->depth - rel;
    160e:	8884      	ldrh	r4, [r0, #4]
    1610:	1ae4      	subs	r4, r4, r3
    1612:	b2a4      	uxth	r4, r4
  uint16_t const nWrap = n - nLin; // only used if wrapped
    1614:	1b15      	subs	r5, r2, r4
    1616:	b2ad      	uxth	r5, r5
  uint16_t nLin_bytes = nLin * f->item_size;
    1618:	88c0      	ldrh	r0, [r0, #6]
    161a:	0006      	movs	r6, r0
    161c:	4366      	muls	r6, r4
    161e:	b2b6      	uxth	r6, r6
    1620:	46b0      	mov	r8, r6
  uint16_t nWrap_bytes = nWrap * f->item_size;
    1622:	4345      	muls	r5, r0
    1624:	b2ad      	uxth	r5, r5
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
    1626:	4343      	muls	r3, r0
    1628:	683e      	ldr	r6, [r7, #0]
    162a:	46b1      	mov	r9, r6
    162c:	4499      	add	r9, r3
  switch (copy_mode)
    162e:	2900      	cmp	r1, #0
    1630:	d006      	beq.n	1640 <_ff_pull_n+0x44>
    1632:	2901      	cmp	r1, #1
    1634:	d018      	beq.n	1668 <_ff_pull_n+0x6c>
}
    1636:	b005      	add	sp, #20
    1638:	bc0c      	pop	{r2, r3}
    163a:	4690      	mov	r8, r2
    163c:	4699      	mov	r9, r3
    163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( n <= nLin )
    1640:	4294      	cmp	r4, r2
    1642:	d305      	bcc.n	1650 <_ff_pull_n+0x54>
        memcpy(app_buf, ff_buf, n*f->item_size);
    1644:	4342      	muls	r2, r0
    1646:	4649      	mov	r1, r9
    1648:	9801      	ldr	r0, [sp, #4]
    164a:	4b2b      	ldr	r3, [pc, #172]	; (16f8 <_ff_pull_n+0xfc>)
    164c:	4798      	blx	r3
    164e:	e7f2      	b.n	1636 <_ff_pull_n+0x3a>
        memcpy(app_buf, ff_buf, nLin_bytes);
    1650:	4642      	mov	r2, r8
    1652:	4649      	mov	r1, r9
    1654:	9e01      	ldr	r6, [sp, #4]
    1656:	0030      	movs	r0, r6
    1658:	4c27      	ldr	r4, [pc, #156]	; (16f8 <_ff_pull_n+0xfc>)
    165a:	47a0      	blx	r4
        memcpy((uint8_t*) app_buf + nLin_bytes, f->buffer, nWrap_bytes);
    165c:	6839      	ldr	r1, [r7, #0]
    165e:	0030      	movs	r0, r6
    1660:	4440      	add	r0, r8
    1662:	002a      	movs	r2, r5
    1664:	47a0      	blx	r4
    1666:	e7e6      	b.n	1636 <_ff_pull_n+0x3a>
      if ( n <= nLin )
    1668:	4294      	cmp	r4, r2
    166a:	d21e      	bcs.n	16aa <_ff_pull_n+0xae>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
    166c:	2303      	movs	r3, #3
    166e:	4644      	mov	r4, r8
    1670:	439c      	bics	r4, r3
        _ff_pull_const_addr(app_buf, ff_buf, nLin_4n_bytes);
    1672:	0022      	movs	r2, r4
    1674:	4649      	mov	r1, r9
    1676:	9801      	ldr	r0, [sp, #4]
    1678:	4b20      	ldr	r3, [pc, #128]	; (16fc <_ff_pull_n+0x100>)
    167a:	4798      	blx	r3
        ff_buf += nLin_4n_bytes;
    167c:	0023      	movs	r3, r4
    167e:	444b      	add	r3, r9
        uint8_t rem = nLin_bytes & 0x03;
    1680:	2003      	movs	r0, #3
    1682:	4642      	mov	r2, r8
    1684:	4010      	ands	r0, r2
        if (rem > 0)
    1686:	d035      	beq.n	16f4 <_ff_pull_n+0xf8>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
    1688:	2204      	movs	r2, #4
    168a:	1a12      	subs	r2, r2, r0
    168c:	b292      	uxth	r2, r2
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
    168e:	1c29      	adds	r1, r5, #0
    1690:	4295      	cmp	r5, r2
    1692:	d900      	bls.n	1696 <_ff_pull_n+0x9a>
    1694:	1c11      	adds	r1, r2, #0
    1696:	b28c      	uxth	r4, r1
    1698:	b2e2      	uxtb	r2, r4
          nWrap_bytes -= remrem;
    169a:	21ff      	movs	r1, #255	; 0xff
    169c:	4021      	ands	r1, r4
    169e:	1a6d      	subs	r5, r5, r1
    16a0:	b2ad      	uxth	r5, r5
          uint32_t tmp32=0;
    16a2:	2100      	movs	r1, #0
    16a4:	9103      	str	r1, [sp, #12]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
    16a6:	ac03      	add	r4, sp, #12
          while(rem--) *dst_u8++ = *ff_buf++;
    16a8:	e00b      	b.n	16c2 <_ff_pull_n+0xc6>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
    16aa:	4342      	muls	r2, r0
    16ac:	b292      	uxth	r2, r2
    16ae:	4649      	mov	r1, r9
    16b0:	9801      	ldr	r0, [sp, #4]
    16b2:	4b12      	ldr	r3, [pc, #72]	; (16fc <_ff_pull_n+0x100>)
    16b4:	4798      	blx	r3
    16b6:	e7be      	b.n	1636 <_ff_pull_n+0x3a>
          while(rem--) *dst_u8++ = *ff_buf++;
    16b8:	7818      	ldrb	r0, [r3, #0]
    16ba:	7020      	strb	r0, [r4, #0]
    16bc:	3401      	adds	r4, #1
    16be:	0008      	movs	r0, r1
    16c0:	3301      	adds	r3, #1
    16c2:	1e41      	subs	r1, r0, #1
    16c4:	b2c9      	uxtb	r1, r1
    16c6:	2800      	cmp	r0, #0
    16c8:	d1f6      	bne.n	16b8 <_ff_pull_n+0xbc>
          ff_buf = f->buffer;
    16ca:	6839      	ldr	r1, [r7, #0]
          while(remrem--) *dst_u8++ = *ff_buf++;
    16cc:	e004      	b.n	16d8 <_ff_pull_n+0xdc>
    16ce:	780a      	ldrb	r2, [r1, #0]
    16d0:	7022      	strb	r2, [r4, #0]
    16d2:	3401      	adds	r4, #1
    16d4:	001a      	movs	r2, r3
    16d6:	3101      	adds	r1, #1
    16d8:	1e53      	subs	r3, r2, #1
    16da:	b2db      	uxtb	r3, r3
    16dc:	2a00      	cmp	r2, #0
    16de:	d1f6      	bne.n	16ce <_ff_pull_n+0xd2>
          *tx_fifo = tmp32;
    16e0:	9b01      	ldr	r3, [sp, #4]
    16e2:	9a03      	ldr	r2, [sp, #12]
    16e4:	601a      	str	r2, [r3, #0]
        if (nWrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, nWrap_bytes);
    16e6:	2d00      	cmp	r5, #0
    16e8:	d0a5      	beq.n	1636 <_ff_pull_n+0x3a>
    16ea:	002a      	movs	r2, r5
    16ec:	9801      	ldr	r0, [sp, #4]
    16ee:	4b03      	ldr	r3, [pc, #12]	; (16fc <_ff_pull_n+0x100>)
    16f0:	4798      	blx	r3
}
    16f2:	e7a0      	b.n	1636 <_ff_pull_n+0x3a>
          ff_buf = f->buffer; // wrap around to beginning
    16f4:	6839      	ldr	r1, [r7, #0]
    16f6:	e7f6      	b.n	16e6 <_ff_pull_n+0xea>
    16f8:	00004961 	.word	0x00004961
    16fc:	000015b1 	.word	0x000015b1

00001700 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wAbs, uint16_t rAbs, tu_fifo_copy_mode_t copy_mode)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	b085      	sub	sp, #20
    1704:	0005      	movs	r5, r0
    1706:	9102      	str	r1, [sp, #8]
    1708:	9203      	str	r2, [sp, #12]
    170a:	aa0a      	add	r2, sp, #40	; 0x28
    170c:	8811      	ldrh	r1, [r2, #0]
    170e:	aa0b      	add	r2, sp, #44	; 0x2c
    1710:	7817      	ldrb	r7, [r2, #0]
  uint16_t cnt = wAbs-rAbs;
    1712:	1a5c      	subs	r4, r3, r1
    1714:	b2a4      	uxth	r4, r4
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1716:	428b      	cmp	r3, r1
    1718:	d202      	bcs.n	1720 <_tu_fifo_peek_n+0x20>
    171a:	8942      	ldrh	r2, [r0, #10]
    171c:	1aa4      	subs	r4, r4, r2
    171e:	b2a4      	uxth	r4, r4
  uint16_t cnt = _tu_fifo_count(f, wAbs, rAbs);

  // Check overflow and correct if required
  if (cnt > f->depth)
    1720:	88ae      	ldrh	r6, [r5, #4]
    1722:	42a6      	cmp	r6, r4
    1724:	d208      	bcs.n	1738 <_tu_fifo_peek_n+0x38>
  f->rd_idx = backward_pointer(f, wAbs, f->depth);
    1726:	0032      	movs	r2, r6
    1728:	0019      	movs	r1, r3
    172a:	0028      	movs	r0, r5
    172c:	4b0c      	ldr	r3, [pc, #48]	; (1760 <_tu_fifo_peek_n+0x60>)
    172e:	4798      	blx	r3
    1730:	8228      	strh	r0, [r5, #16]
  {
    _tu_fifo_correct_read_pointer(f, wAbs);
    rAbs = f->rd_idx;
    1732:	8a29      	ldrh	r1, [r5, #16]
    1734:	b289      	uxth	r1, r1
    cnt = f->depth;
    1736:	0034      	movs	r4, r6
  }

  // Skip beginning of buffer
  if (cnt == 0) return 0;
    1738:	2c00      	cmp	r4, #0
    173a:	d00d      	beq.n	1758 <_tu_fifo_peek_n+0x58>

  // Check if we can read something at and after offset - if too less is available we read what remains
  if (cnt < n) n = cnt;
    173c:	9a03      	ldr	r2, [sp, #12]
    173e:	4294      	cmp	r4, r2
    1740:	d300      	bcc.n	1744 <_tu_fifo_peek_n+0x44>
    1742:	0014      	movs	r4, r2

  uint16_t rRel = get_relative_pointer(f, rAbs);
    1744:	0028      	movs	r0, r5
    1746:	4b07      	ldr	r3, [pc, #28]	; (1764 <_tu_fifo_peek_n+0x64>)
    1748:	4798      	blx	r3
    174a:	0003      	movs	r3, r0

  // Peek data
  _ff_pull_n(f, p_buffer, n, rRel, copy_mode);
    174c:	9700      	str	r7, [sp, #0]
    174e:	0022      	movs	r2, r4
    1750:	9902      	ldr	r1, [sp, #8]
    1752:	0028      	movs	r0, r5
    1754:	4d04      	ldr	r5, [pc, #16]	; (1768 <_tu_fifo_peek_n+0x68>)
    1756:	47a8      	blx	r5

  return n;
}
    1758:	0020      	movs	r0, r4
    175a:	b005      	add	sp, #20
    175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00001531 	.word	0x00001531
    1764:	00001549 	.word	0x00001549
    1768:	000015fd 	.word	0x000015fd

0000176c <_tu_fifo_read_n>:

  return n;
}

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
    176c:	b530      	push	{r4, r5, lr}
    176e:	b083      	sub	sp, #12
    1770:	0004      	movs	r4, r0
    1772:	001d      	movs	r5, r3
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
    1774:	89c3      	ldrh	r3, [r0, #14]
    1776:	b29b      	uxth	r3, r3
    1778:	8a00      	ldrh	r0, [r0, #16]
    177a:	9501      	str	r5, [sp, #4]
    177c:	9000      	str	r0, [sp, #0]
    177e:	0020      	movs	r0, r4
    1780:	4d06      	ldr	r5, [pc, #24]	; (179c <_tu_fifo_read_n+0x30>)
    1782:	47a8      	blx	r5
    1784:	0005      	movs	r5, r0

  // Advance read pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, n);
    1786:	8a21      	ldrh	r1, [r4, #16]
    1788:	b289      	uxth	r1, r1
    178a:	0002      	movs	r2, r0
    178c:	0020      	movs	r0, r4
    178e:	4b04      	ldr	r3, [pc, #16]	; (17a0 <_tu_fifo_read_n+0x34>)
    1790:	4798      	blx	r3
    1792:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return n;
}
    1794:	0028      	movs	r0, r5
    1796:	b003      	add	sp, #12
    1798:	bd30      	pop	{r4, r5, pc}
    179a:	46c0      	nop			; (mov r8, r8)
    179c:	00001701 	.word	0x00001701
    17a0:	00001519 	.word	0x00001519

000017a4 <_ff_push_const_addr>:
{
    17a4:	b530      	push	{r4, r5, lr}
    17a6:	b083      	sub	sp, #12
  uint16_t full_words = len >> 2;
    17a8:	0895      	lsrs	r5, r2, #2
  while(full_words--)
    17aa:	e009      	b.n	17c0 <_ff_push_const_addr+0x1c>
    tu_unaligned_write32(ff_buf, *rx_fifo);
    17ac:	680b      	ldr	r3, [r1, #0]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void* mem, uint32_t value)
{
  tu_unaligned_uint32_t* ua32 = (tu_unaligned_uint32_t*) mem;
  ua32->val = value;
    17ae:	7003      	strb	r3, [r0, #0]
    17b0:	0a1d      	lsrs	r5, r3, #8
    17b2:	7045      	strb	r5, [r0, #1]
    17b4:	0c1d      	lsrs	r5, r3, #16
    17b6:	7085      	strb	r5, [r0, #2]
    17b8:	0e1b      	lsrs	r3, r3, #24
    17ba:	70c3      	strb	r3, [r0, #3]
    ff_buf += 4;
    17bc:	3004      	adds	r0, #4
  while(full_words--)
    17be:	0025      	movs	r5, r4
    17c0:	1e6c      	subs	r4, r5, #1
    17c2:	b2a4      	uxth	r4, r4
    17c4:	2d00      	cmp	r5, #0
    17c6:	d1f1      	bne.n	17ac <_ff_push_const_addr+0x8>
  uint8_t const bytes_rem = len & 0x03;
    17c8:	2303      	movs	r3, #3
    17ca:	401a      	ands	r2, r3
  if ( bytes_rem )
    17cc:	d101      	bne.n	17d2 <_ff_push_const_addr+0x2e>
}
    17ce:	b003      	add	sp, #12
    17d0:	bd30      	pop	{r4, r5, pc}
    uint32_t tmp32 = *rx_fifo;
    17d2:	680b      	ldr	r3, [r1, #0]
    17d4:	9301      	str	r3, [sp, #4]
    memcpy(ff_buf, &tmp32, bytes_rem);
    17d6:	a901      	add	r1, sp, #4
    17d8:	4b01      	ldr	r3, [pc, #4]	; (17e0 <_ff_push_const_addr+0x3c>)
    17da:	4798      	blx	r3
}
    17dc:	e7f7      	b.n	17ce <_ff_push_const_addr+0x2a>
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	00004961 	.word	0x00004961

000017e4 <_ff_push_n>:
{
    17e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e6:	46ce      	mov	lr, r9
    17e8:	4647      	mov	r7, r8
    17ea:	b580      	push	{r7, lr}
    17ec:	b085      	sub	sp, #20
    17ee:	0007      	movs	r7, r0
    17f0:	9101      	str	r1, [sp, #4]
    17f2:	a90c      	add	r1, sp, #48	; 0x30
    17f4:	7808      	ldrb	r0, [r1, #0]
  uint16_t const nLin = f->depth - rel;
    17f6:	88bc      	ldrh	r4, [r7, #4]
    17f8:	1ae4      	subs	r4, r4, r3
    17fa:	b2a4      	uxth	r4, r4
  uint16_t const nWrap = n - nLin;
    17fc:	1b15      	subs	r5, r2, r4
    17fe:	b2ad      	uxth	r5, r5
  uint16_t nLin_bytes = nLin * f->item_size;
    1800:	88f9      	ldrh	r1, [r7, #6]
    1802:	000e      	movs	r6, r1
    1804:	4366      	muls	r6, r4
    1806:	b2b6      	uxth	r6, r6
    1808:	46b0      	mov	r8, r6
  uint16_t nWrap_bytes = nWrap * f->item_size;
    180a:	434d      	muls	r5, r1
    180c:	b2ad      	uxth	r5, r5
  uint8_t* ff_buf = f->buffer + (rel * f->item_size);
    180e:	434b      	muls	r3, r1
    1810:	683e      	ldr	r6, [r7, #0]
    1812:	46b1      	mov	r9, r6
    1814:	4499      	add	r9, r3
  switch (copy_mode)
    1816:	2800      	cmp	r0, #0
    1818:	d006      	beq.n	1828 <_ff_push_n+0x44>
    181a:	2801      	cmp	r0, #1
    181c:	d018      	beq.n	1850 <_ff_push_n+0x6c>
}
    181e:	b005      	add	sp, #20
    1820:	bc0c      	pop	{r2, r3}
    1822:	4690      	mov	r8, r2
    1824:	4699      	mov	r9, r3
    1826:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(n <= nLin)
    1828:	4294      	cmp	r4, r2
    182a:	d305      	bcc.n	1838 <_ff_push_n+0x54>
        memcpy(ff_buf, app_buf, n*f->item_size);
    182c:	434a      	muls	r2, r1
    182e:	9901      	ldr	r1, [sp, #4]
    1830:	4648      	mov	r0, r9
    1832:	4b2a      	ldr	r3, [pc, #168]	; (18dc <_ff_push_n+0xf8>)
    1834:	4798      	blx	r3
    1836:	e7f2      	b.n	181e <_ff_push_n+0x3a>
        memcpy(ff_buf, app_buf, nLin_bytes);
    1838:	4642      	mov	r2, r8
    183a:	9e01      	ldr	r6, [sp, #4]
    183c:	0031      	movs	r1, r6
    183e:	4648      	mov	r0, r9
    1840:	4c26      	ldr	r4, [pc, #152]	; (18dc <_ff_push_n+0xf8>)
    1842:	47a0      	blx	r4
        memcpy(f->buffer, ((uint8_t const*) app_buf) + nLin_bytes, nWrap_bytes);
    1844:	6838      	ldr	r0, [r7, #0]
    1846:	0031      	movs	r1, r6
    1848:	4441      	add	r1, r8
    184a:	002a      	movs	r2, r5
    184c:	47a0      	blx	r4
    184e:	e7e6      	b.n	181e <_ff_push_n+0x3a>
      if(n <= nLin)
    1850:	4294      	cmp	r4, r2
    1852:	d21f      	bcs.n	1894 <_ff_push_n+0xb0>
        uint16_t nLin_4n_bytes = nLin_bytes & 0xFFFC;
    1854:	2303      	movs	r3, #3
    1856:	4644      	mov	r4, r8
    1858:	439c      	bics	r4, r3
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
    185a:	0022      	movs	r2, r4
    185c:	9901      	ldr	r1, [sp, #4]
    185e:	4648      	mov	r0, r9
    1860:	4b1f      	ldr	r3, [pc, #124]	; (18e0 <_ff_push_n+0xfc>)
    1862:	4798      	blx	r3
        ff_buf += nLin_4n_bytes;
    1864:	0023      	movs	r3, r4
    1866:	444b      	add	r3, r9
        uint8_t rem = nLin_bytes & 0x03;
    1868:	2103      	movs	r1, #3
    186a:	4642      	mov	r2, r8
    186c:	4011      	ands	r1, r2
        if (rem > 0)
    186e:	d033      	beq.n	18d8 <_ff_push_n+0xf4>
          uint8_t remrem = (uint8_t) tu_min16(nWrap_bytes, 4-rem);
    1870:	2204      	movs	r2, #4
    1872:	1a52      	subs	r2, r2, r1
    1874:	b292      	uxth	r2, r2
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
    1876:	1c28      	adds	r0, r5, #0
    1878:	4295      	cmp	r5, r2
    187a:	d900      	bls.n	187e <_ff_push_n+0x9a>
    187c:	1c10      	adds	r0, r2, #0
    187e:	b284      	uxth	r4, r0
    1880:	b2e2      	uxtb	r2, r4
          nWrap_bytes -= remrem;
    1882:	20ff      	movs	r0, #255	; 0xff
    1884:	4020      	ands	r0, r4
    1886:	1a2d      	subs	r5, r5, r0
    1888:	b2ad      	uxth	r5, r5
          uint32_t tmp32 = *rx_fifo;
    188a:	9801      	ldr	r0, [sp, #4]
    188c:	6800      	ldr	r0, [r0, #0]
    188e:	9003      	str	r0, [sp, #12]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
    1890:	ac03      	add	r4, sp, #12
          while(rem--) *ff_buf++ = *src_u8++;
    1892:	e00b      	b.n	18ac <_ff_push_n+0xc8>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
    1894:	434a      	muls	r2, r1
    1896:	b292      	uxth	r2, r2
    1898:	9901      	ldr	r1, [sp, #4]
    189a:	4648      	mov	r0, r9
    189c:	4b10      	ldr	r3, [pc, #64]	; (18e0 <_ff_push_n+0xfc>)
    189e:	4798      	blx	r3
    18a0:	e7bd      	b.n	181e <_ff_push_n+0x3a>
          while(rem--) *ff_buf++ = *src_u8++;
    18a2:	7821      	ldrb	r1, [r4, #0]
    18a4:	7019      	strb	r1, [r3, #0]
    18a6:	3401      	adds	r4, #1
    18a8:	0001      	movs	r1, r0
    18aa:	3301      	adds	r3, #1
    18ac:	1e48      	subs	r0, r1, #1
    18ae:	b2c0      	uxtb	r0, r0
    18b0:	2900      	cmp	r1, #0
    18b2:	d1f6      	bne.n	18a2 <_ff_push_n+0xbe>
          ff_buf = f->buffer;
    18b4:	6838      	ldr	r0, [r7, #0]
          while(remrem--) *ff_buf++ = *src_u8++;
    18b6:	e004      	b.n	18c2 <_ff_push_n+0xde>
    18b8:	7822      	ldrb	r2, [r4, #0]
    18ba:	7002      	strb	r2, [r0, #0]
    18bc:	3401      	adds	r4, #1
    18be:	001a      	movs	r2, r3
    18c0:	3001      	adds	r0, #1
    18c2:	1e53      	subs	r3, r2, #1
    18c4:	b2db      	uxtb	r3, r3
    18c6:	2a00      	cmp	r2, #0
    18c8:	d1f6      	bne.n	18b8 <_ff_push_n+0xd4>
        if (nWrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, nWrap_bytes);
    18ca:	2d00      	cmp	r5, #0
    18cc:	d0a7      	beq.n	181e <_ff_push_n+0x3a>
    18ce:	002a      	movs	r2, r5
    18d0:	9901      	ldr	r1, [sp, #4]
    18d2:	4b03      	ldr	r3, [pc, #12]	; (18e0 <_ff_push_n+0xfc>)
    18d4:	4798      	blx	r3
}
    18d6:	e7a2      	b.n	181e <_ff_push_n+0x3a>
          ff_buf = f->buffer; // wrap around to beginning
    18d8:	6838      	ldr	r0, [r7, #0]
    18da:	e7f6      	b.n	18ca <_ff_push_n+0xe6>
    18dc:	00004961 	.word	0x00004961
    18e0:	000017a5 	.word	0x000017a5

000018e4 <_tu_fifo_write_n>:
{
    18e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e6:	b085      	sub	sp, #20
    18e8:	0004      	movs	r4, r0
    18ea:	9303      	str	r3, [sp, #12]
  if ( n == 0 ) return 0;
    18ec:	2a00      	cmp	r2, #0
    18ee:	d037      	beq.n	1960 <_tu_fifo_write_n+0x7c>
  uint16_t w = f->wr_idx, r = f->rd_idx;
    18f0:	89c7      	ldrh	r7, [r0, #14]
    18f2:	b2bf      	uxth	r7, r7
    18f4:	8a03      	ldrh	r3, [r0, #16]
    18f6:	b29b      	uxth	r3, r3
  if (!f->overwritable)
    18f8:	7a00      	ldrb	r0, [r0, #8]
    18fa:	2800      	cmp	r0, #0
    18fc:	d124      	bne.n	1948 <_tu_fifo_write_n+0x64>
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    18fe:	88a0      	ldrh	r0, [r4, #4]
  uint16_t cnt = wAbs-rAbs;
    1900:	1afd      	subs	r5, r7, r3
    1902:	b2ad      	uxth	r5, r5
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1904:	429f      	cmp	r7, r3
    1906:	d202      	bcs.n	190e <_tu_fifo_write_n+0x2a>
    1908:	8963      	ldrh	r3, [r4, #10]
    190a:	1aed      	subs	r5, r5, r3
    190c:	b2ad      	uxth	r5, r5
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    190e:	1b43      	subs	r3, r0, r5
    1910:	b29b      	uxth	r3, r3
    1912:	1c15      	adds	r5, r2, #0
    1914:	429a      	cmp	r2, r3
    1916:	d900      	bls.n	191a <_tu_fifo_write_n+0x36>
    1918:	1c1d      	adds	r5, r3, #0
    191a:	b2ad      	uxth	r5, r5
  uint8_t const* buf8 = (uint8_t const*) data;
    191c:	000e      	movs	r6, r1
  uint16_t wRel = get_relative_pointer(f, w);
    191e:	0039      	movs	r1, r7
    1920:	0020      	movs	r0, r4
    1922:	4b10      	ldr	r3, [pc, #64]	; (1964 <_tu_fifo_write_n+0x80>)
    1924:	4798      	blx	r3
    1926:	0003      	movs	r3, r0
  _ff_push_n(f, buf8, n, wRel, copy_mode);
    1928:	9a03      	ldr	r2, [sp, #12]
    192a:	9200      	str	r2, [sp, #0]
    192c:	002a      	movs	r2, r5
    192e:	0031      	movs	r1, r6
    1930:	0020      	movs	r0, r4
    1932:	4e0d      	ldr	r6, [pc, #52]	; (1968 <_tu_fifo_write_n+0x84>)
    1934:	47b0      	blx	r6
  f->wr_idx = advance_pointer(f, w, n);
    1936:	002a      	movs	r2, r5
    1938:	0039      	movs	r1, r7
    193a:	0020      	movs	r0, r4
    193c:	4b0b      	ldr	r3, [pc, #44]	; (196c <_tu_fifo_write_n+0x88>)
    193e:	4798      	blx	r3
    1940:	81e0      	strh	r0, [r4, #14]
}
    1942:	0028      	movs	r0, r5
    1944:	b005      	add	sp, #20
    1946:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (n >= f->depth)
    1948:	88a5      	ldrh	r5, [r4, #4]
    194a:	42aa      	cmp	r2, r5
    194c:	d305      	bcc.n	195a <_tu_fifo_write_n+0x76>
    buf8 = buf8 + (n - f->depth) * f->item_size;
    194e:	1b52      	subs	r2, r2, r5
    1950:	88e6      	ldrh	r6, [r4, #6]
    1952:	4356      	muls	r6, r2
    1954:	198e      	adds	r6, r1, r6
    w = r;
    1956:	001f      	movs	r7, r3
    1958:	e7e1      	b.n	191e <_tu_fifo_write_n+0x3a>
  uint8_t const* buf8 = (uint8_t const*) data;
    195a:	000e      	movs	r6, r1
    195c:	0015      	movs	r5, r2
    195e:	e7de      	b.n	191e <_tu_fifo_write_n+0x3a>
  if ( n == 0 ) return 0;
    1960:	0015      	movs	r5, r2
    1962:	e7ee      	b.n	1942 <_tu_fifo_write_n+0x5e>
    1964:	00001549 	.word	0x00001549
    1968:	000017e5 	.word	0x000017e5
    196c:	00001519 	.word	0x00001519

00001970 <tu_fifo_config>:
{
    1970:	b530      	push	{r4, r5, lr}
    1972:	ac03      	add	r4, sp, #12
    1974:	7825      	ldrb	r5, [r4, #0]
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
    1976:	2480      	movs	r4, #128	; 0x80
    1978:	0224      	lsls	r4, r4, #8
    197a:	42a2      	cmp	r2, r4
    197c:	d80f      	bhi.n	199e <tu_fifo_config+0x2e>
  f->buffer = (uint8_t*) buffer;
    197e:	6001      	str	r1, [r0, #0]
  f->depth  = depth;
    1980:	8082      	strh	r2, [r0, #4]
  f->item_size = item_size;
    1982:	80c3      	strh	r3, [r0, #6]
  f->overwritable = overwritable;
    1984:	7205      	strb	r5, [r0, #8]
  f->max_pointer_idx = (uint16_t) (2*depth - 1);
    1986:	0052      	lsls	r2, r2, #1
    1988:	b292      	uxth	r2, r2
    198a:	3a01      	subs	r2, #1
    198c:	b292      	uxth	r2, r2
    198e:	8182      	strh	r2, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
    1990:	43d2      	mvns	r2, r2
    1992:	8142      	strh	r2, [r0, #10]
  f->rd_idx = f->wr_idx = 0;
    1994:	2300      	movs	r3, #0
    1996:	81c3      	strh	r3, [r0, #14]
    1998:	8203      	strh	r3, [r0, #16]
  return true;
    199a:	2001      	movs	r0, #1
}
    199c:	bd30      	pop	{r4, r5, pc}
  if (depth > 0x8000) return false;               // Maximum depth is 2^15 items
    199e:	2000      	movs	r0, #0
    19a0:	e7fc      	b.n	199c <tu_fifo_config+0x2c>

000019a2 <tu_fifo_count>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
    19a2:	89c1      	ldrh	r1, [r0, #14]
    19a4:	b289      	uxth	r1, r1
    19a6:	8a02      	ldrh	r2, [r0, #16]
    19a8:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
    19aa:	1a8b      	subs	r3, r1, r2
    19ac:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    19ae:	4291      	cmp	r1, r2
    19b0:	d202      	bcs.n	19b8 <tu_fifo_count+0x16>
    19b2:	8942      	ldrh	r2, [r0, #10]
    19b4:	1a9b      	subs	r3, r3, r2
    19b6:	b29b      	uxth	r3, r3
  return tu_min16(_tu_fifo_count(f, f->wr_idx, f->rd_idx), f->depth);
    19b8:	8882      	ldrh	r2, [r0, #4]
    19ba:	1c10      	adds	r0, r2, #0
    19bc:	429a      	cmp	r2, r3
    19be:	d900      	bls.n	19c2 <tu_fifo_count+0x20>
    19c0:	1c18      	adds	r0, r3, #0
    19c2:	b280      	uxth	r0, r0
}
    19c4:	4770      	bx	lr

000019c6 <tu_fifo_empty>:
    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
  return _tu_fifo_empty(f->wr_idx, f->rd_idx);
    19c6:	89c3      	ldrh	r3, [r0, #14]
    19c8:	8a00      	ldrh	r0, [r0, #16]
  return wAbs == rAbs;
    19ca:	1a18      	subs	r0, r3, r0
    19cc:	4243      	negs	r3, r0
    19ce:	4158      	adcs	r0, r3
    19d0:	b2c0      	uxtb	r0, r0
}
    19d2:	4770      	bx	lr

000019d4 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
    19d4:	b510      	push	{r4, lr}
  return _tu_fifo_remaining(f, f->wr_idx, f->rd_idx);
    19d6:	89c4      	ldrh	r4, [r0, #14]
    19d8:	b2a4      	uxth	r4, r4
    19da:	8a01      	ldrh	r1, [r0, #16]
    19dc:	b289      	uxth	r1, r1
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    19de:	8882      	ldrh	r2, [r0, #4]
  uint16_t cnt = wAbs-rAbs;
    19e0:	1a63      	subs	r3, r4, r1
    19e2:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    19e4:	428c      	cmp	r4, r1
    19e6:	d202      	bcs.n	19ee <tu_fifo_remaining+0x1a>
    19e8:	8940      	ldrh	r0, [r0, #10]
    19ea:	1a1b      	subs	r3, r3, r0
    19ec:	b29b      	uxth	r3, r3
  return f->depth - _tu_fifo_count(f, wAbs, rAbs);
    19ee:	1ad0      	subs	r0, r2, r3
    19f0:	b280      	uxth	r0, r0
}
    19f2:	bd10      	pop	{r4, pc}

000019f4 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
    19f4:	b570      	push	{r4, r5, r6, lr}
    19f6:	0004      	movs	r4, r0
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
    19f8:	89c2      	ldrh	r2, [r0, #14]
    19fa:	b292      	uxth	r2, r2
    19fc:	8a03      	ldrh	r3, [r0, #16]
    19fe:	b29b      	uxth	r3, r3
    1a00:	4d05      	ldr	r5, [pc, #20]	; (1a18 <tu_fifo_read+0x24>)
    1a02:	47a8      	blx	r5
    1a04:	0005      	movs	r5, r0

  // Advance pointer
  f->rd_idx = advance_pointer(f, f->rd_idx, ret);
    1a06:	8a21      	ldrh	r1, [r4, #16]
    1a08:	b289      	uxth	r1, r1
    1a0a:	b282      	uxth	r2, r0
    1a0c:	0020      	movs	r0, r4
    1a0e:	4b03      	ldr	r3, [pc, #12]	; (1a1c <tu_fifo_read+0x28>)
    1a10:	4798      	blx	r3
    1a12:	8220      	strh	r0, [r4, #16]

  _ff_unlock(f->mutex_rd);
  return ret;
}
    1a14:	0028      	movs	r0, r5
    1a16:	bd70      	pop	{r4, r5, r6, pc}
    1a18:	00001559 	.word	0x00001559
    1a1c:	00001519 	.word	0x00001519

00001a20 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
    1a20:	b510      	push	{r4, lr}
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
    1a22:	2300      	movs	r3, #0
    1a24:	4c01      	ldr	r4, [pc, #4]	; (1a2c <tu_fifo_read_n+0xc>)
    1a26:	47a0      	blx	r4
}
    1a28:	bd10      	pop	{r4, pc}
    1a2a:	46c0      	nop			; (mov r8, r8)
    1a2c:	0000176d 	.word	0x0000176d

00001a30 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
    1a30:	b570      	push	{r4, r5, r6, lr}
    1a32:	0004      	movs	r4, r0
    1a34:	000e      	movs	r6, r1
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const w = f->wr_idx;
    1a36:	89c5      	ldrh	r5, [r0, #14]
    1a38:	b2ad      	uxth	r5, r5

  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1a3a:	8a02      	ldrh	r2, [r0, #16]
    1a3c:	b292      	uxth	r2, r2
  uint16_t cnt = wAbs-rAbs;
    1a3e:	1aab      	subs	r3, r5, r2
    1a40:	b29b      	uxth	r3, r3
  if (rAbs > wAbs) cnt -= f->non_used_index_space;
    1a42:	4295      	cmp	r5, r2
    1a44:	d202      	bcs.n	1a4c <tu_fifo_write+0x1c>
    1a46:	8942      	ldrh	r2, [r0, #10]
    1a48:	1a9b      	subs	r3, r3, r2
    1a4a:	b29b      	uxth	r3, r3
  return (_tu_fifo_count(f, wAbs, rAbs) == f->depth);
    1a4c:	88a2      	ldrh	r2, [r4, #4]
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1a4e:	429a      	cmp	r2, r3
    1a50:	d013      	beq.n	1a7a <tu_fifo_write+0x4a>
  {
    ret = false;
  }else
  {
    uint16_t wRel = get_relative_pointer(f, w);
    1a52:	0029      	movs	r1, r5
    1a54:	0020      	movs	r0, r4
    1a56:	4b0b      	ldr	r3, [pc, #44]	; (1a84 <tu_fifo_write+0x54>)
    1a58:	4798      	blx	r3
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
    1a5a:	88e2      	ldrh	r2, [r4, #6]
    1a5c:	4350      	muls	r0, r2
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	469c      	mov	ip, r3
    1a62:	4460      	add	r0, ip
    1a64:	0031      	movs	r1, r6
    1a66:	4b08      	ldr	r3, [pc, #32]	; (1a88 <tu_fifo_write+0x58>)
    1a68:	4798      	blx	r3

    // Write data
    _ff_push(f, data, wRel);

    // Advance pointer
    f->wr_idx = advance_pointer(f, w, 1);
    1a6a:	2201      	movs	r2, #1
    1a6c:	0029      	movs	r1, r5
    1a6e:	0020      	movs	r0, r4
    1a70:	4b06      	ldr	r3, [pc, #24]	; (1a8c <tu_fifo_write+0x5c>)
    1a72:	4798      	blx	r3
    1a74:	81e0      	strh	r0, [r4, #14]

    ret = true;
    1a76:	2001      	movs	r0, #1
  }

  _ff_unlock(f->mutex_wr);

  return ret;
}
    1a78:	bd70      	pop	{r4, r5, r6, pc}
  if ( _tu_fifo_full(f, w, f->rd_idx) && !f->overwritable )
    1a7a:	7a20      	ldrb	r0, [r4, #8]
    1a7c:	2800      	cmp	r0, #0
    1a7e:	d1e8      	bne.n	1a52 <tu_fifo_write+0x22>
    1a80:	e7fa      	b.n	1a78 <tu_fifo_write+0x48>
    1a82:	46c0      	nop			; (mov r8, r8)
    1a84:	00001549 	.word	0x00001549
    1a88:	00004961 	.word	0x00004961
    1a8c:	00001519 	.word	0x00001519

00001a90 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
    1a90:	b510      	push	{r4, lr}
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
    1a92:	2300      	movs	r3, #0
    1a94:	4c01      	ldr	r4, [pc, #4]	; (1a9c <tu_fifo_write_n+0xc>)
    1a96:	47a0      	blx	r4
}
    1a98:	bd10      	pop	{r4, pc}
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	000018e5 	.word	0x000018e5

00001aa0 <tu_fifo_clear>:
bool tu_fifo_clear(tu_fifo_t *f)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = f->wr_idx = 0;
    1aa0:	2300      	movs	r3, #0
    1aa2:	81c3      	strh	r3, [r0, #14]
    1aa4:	8203      	strh	r3, [r0, #16]
  f->max_pointer_idx = (uint16_t) (2*f->depth-1);
    1aa6:	8883      	ldrh	r3, [r0, #4]
    1aa8:	005b      	lsls	r3, r3, #1
    1aaa:	b29b      	uxth	r3, r3
    1aac:	3b01      	subs	r3, #1
    1aae:	b29b      	uxth	r3, r3
    1ab0:	8183      	strh	r3, [r0, #12]
  f->non_used_index_space = UINT16_MAX - f->max_pointer_idx;
    1ab2:	43db      	mvns	r3, r3
    1ab4:	8143      	strh	r3, [r0, #10]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
}
    1ab6:	2001      	movs	r0, #1
    1ab8:	4770      	bx	lr

00001aba <tu_fifo_set_overwritable>:
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
    1aba:	7201      	strb	r1, [r0, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
}
    1abc:	2001      	movs	r0, #1
    1abe:	4770      	bx	lr

00001ac0 <configuration_reset>:

  return true;
}

static void configuration_reset(uint8_t rhport)
{
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	0005      	movs	r5, r0
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    1ac4:	2400      	movs	r4, #0
    1ac6:	e00f      	b.n	1ae8 <configuration_reset+0x28>
    drvid -= _app_driver_count;
    1ac8:	1ae3      	subs	r3, r4, r3
    1aca:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1acc:	2b00      	cmp	r3, #0
    1ace:	d11e      	bne.n	1b0e <configuration_reset+0x4e>
    1ad0:	005a      	lsls	r2, r3, #1
    1ad2:	18d3      	adds	r3, r2, r3
    1ad4:	00da      	lsls	r2, r3, #3
    1ad6:	4b18      	ldr	r3, [pc, #96]	; (1b38 <configuration_reset+0x78>)
    1ad8:	189b      	adds	r3, r3, r2
  {
    usbd_class_driver_t const * driver = get_driver(i);
    TU_ASSERT(driver, );
    1ada:	2b00      	cmp	r3, #0
    1adc:	d02a      	beq.n	1b34 <configuration_reset+0x74>
    driver->reset(rhport);
    1ade:	685b      	ldr	r3, [r3, #4]
    1ae0:	0028      	movs	r0, r5
    1ae2:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
    1ae4:	3401      	adds	r4, #1
    1ae6:	b2e4      	uxtb	r4, r4
    1ae8:	4b14      	ldr	r3, [pc, #80]	; (1b3c <configuration_reset+0x7c>)
    1aea:	791b      	ldrb	r3, [r3, #4]
    1aec:	1c5a      	adds	r2, r3, #1
    1aee:	4294      	cmp	r4, r2
    1af0:	da0f      	bge.n	1b12 <configuration_reset+0x52>
  if ( usbd_app_driver_get_cb )
    1af2:	4a13      	ldr	r2, [pc, #76]	; (1b40 <configuration_reset+0x80>)
    1af4:	2a00      	cmp	r2, #0
    1af6:	d008      	beq.n	1b0a <configuration_reset+0x4a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1af8:	429c      	cmp	r4, r3
    1afa:	d2e5      	bcs.n	1ac8 <configuration_reset+0x8>
    1afc:	0062      	lsls	r2, r4, #1
    1afe:	1912      	adds	r2, r2, r4
    1b00:	00d1      	lsls	r1, r2, #3
    1b02:	4b0e      	ldr	r3, [pc, #56]	; (1b3c <configuration_reset+0x7c>)
    1b04:	681b      	ldr	r3, [r3, #0]
    1b06:	185b      	adds	r3, r3, r1
    1b08:	e7e7      	b.n	1ada <configuration_reset+0x1a>
  if ( usbd_app_driver_get_cb )
    1b0a:	0023      	movs	r3, r4
    1b0c:	e7de      	b.n	1acc <configuration_reset+0xc>
  return NULL;
    1b0e:	2300      	movs	r3, #0
    1b10:	e7e3      	b.n	1ada <configuration_reset+0x1a>
  }

  tu_varclr(&_usbd_dev);
    1b12:	4c0a      	ldr	r4, [pc, #40]	; (1b3c <configuration_reset+0x7c>)
    1b14:	0020      	movs	r0, r4
    1b16:	3008      	adds	r0, #8
    1b18:	2233      	movs	r2, #51	; 0x33
    1b1a:	2100      	movs	r1, #0
    1b1c:	4d09      	ldr	r5, [pc, #36]	; (1b44 <configuration_reset+0x84>)
    1b1e:	47a8      	blx	r5
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
    1b20:	0020      	movs	r0, r4
    1b22:	300b      	adds	r0, #11
    1b24:	2210      	movs	r2, #16
    1b26:	21ff      	movs	r1, #255	; 0xff
    1b28:	47a8      	blx	r5
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
    1b2a:	0020      	movs	r0, r4
    1b2c:	301b      	adds	r0, #27
    1b2e:	2210      	movs	r2, #16
    1b30:	21ff      	movs	r1, #255	; 0xff
    1b32:	47a8      	blx	r5
}
    1b34:	bd70      	pop	{r4, r5, r6, pc}
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	00004edc 	.word	0x00004edc
    1b3c:	20000960 	.word	0x20000960
    1b40:	00000000 	.word	0x00000000
    1b44:	000049e5 	.word	0x000049e5

00001b48 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
    1b48:	b510      	push	{r4, lr}
  configuration_reset(rhport);
    1b4a:	4b02      	ldr	r3, [pc, #8]	; (1b54 <usbd_reset+0xc>)
    1b4c:	4798      	blx	r3
  usbd_control_reset();
    1b4e:	4b02      	ldr	r3, [pc, #8]	; (1b58 <usbd_reset+0x10>)
    1b50:	4798      	blx	r3
}
    1b52:	bd10      	pop	{r4, pc}
    1b54:	00001ac1 	.word	0x00001ac1
    1b58:	000029ad 	.word	0x000029ad

00001b5c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
    1b5e:	0005      	movs	r5, r0
    1b60:	000c      	movs	r4, r1
    1b62:	0016      	movs	r6, r2
  usbd_control_set_complete_callback(driver->control_xfer_cb);
    1b64:	68c8      	ldr	r0, [r1, #12]
    1b66:	4b04      	ldr	r3, [pc, #16]	; (1b78 <invoke_class_control+0x1c>)
    1b68:	4798      	blx	r3
  TU_LOG(USBD_DBG, "  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
    1b6a:	68e3      	ldr	r3, [r4, #12]
    1b6c:	0032      	movs	r2, r6
    1b6e:	2101      	movs	r1, #1
    1b70:	0028      	movs	r0, r5
    1b72:	4798      	blx	r3
}
    1b74:	bd70      	pop	{r4, r5, r6, pc}
    1b76:	46c0      	nop			; (mov r8, r8)
    1b78:	000029c5 	.word	0x000029c5

00001b7c <process_set_config>:
}

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	46de      	mov	lr, fp
    1b80:	4657      	mov	r7, sl
    1b82:	b580      	push	{r7, lr}
    1b84:	b085      	sub	sp, #20
    1b86:	9002      	str	r0, [sp, #8]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
    1b88:	3901      	subs	r1, #1
    1b8a:	b2c8      	uxtb	r0, r1
    1b8c:	4b56      	ldr	r3, [pc, #344]	; (1ce8 <process_set_config+0x16c>)
    1b8e:	4798      	blx	r3
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1b90:	2800      	cmp	r0, #0
    1b92:	d100      	bne.n	1b96 <process_set_config+0x1a>
    1b94:	e09d      	b.n	1cd2 <process_set_config+0x156>
    1b96:	7843      	ldrb	r3, [r0, #1]
    1b98:	2b02      	cmp	r3, #2
    1b9a:	d005      	beq.n	1ba8 <process_set_config+0x2c>
    1b9c:	2000      	movs	r0, #0

  // invoke callback
  if (tud_mount_cb) tud_mount_cb();

  return true;
}
    1b9e:	b005      	add	sp, #20
    1ba0:	bc0c      	pop	{r2, r3}
    1ba2:	4692      	mov	sl, r2
    1ba4:	469b      	mov	fp, r3
    1ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    1ba8:	79c1      	ldrb	r1, [r0, #7]
    1baa:	068b      	lsls	r3, r1, #26
    1bac:	d529      	bpl.n	1c02 <process_set_config+0x86>
    1bae:	2201      	movs	r2, #1
    1bb0:	4c4e      	ldr	r4, [pc, #312]	; (1cec <process_set_config+0x170>)
    1bb2:	0112      	lsls	r2, r2, #4
    1bb4:	7a23      	ldrb	r3, [r4, #8]
    1bb6:	2510      	movs	r5, #16
    1bb8:	43ab      	bics	r3, r5
    1bba:	4313      	orrs	r3, r2
    1bbc:	7223      	strb	r3, [r4, #8]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    1bbe:	064b      	lsls	r3, r1, #25
    1bc0:	d521      	bpl.n	1c06 <process_set_config+0x8a>
    1bc2:	2201      	movs	r2, #1
    1bc4:	4949      	ldr	r1, [pc, #292]	; (1cec <process_set_config+0x170>)
    1bc6:	0152      	lsls	r2, r2, #5
    1bc8:	7a0b      	ldrb	r3, [r1, #8]
    1bca:	2420      	movs	r4, #32
    1bcc:	43a3      	bics	r3, r4
    1bce:	4313      	orrs	r3, r2
    1bd0:	720b      	strb	r3, [r1, #8]
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
    1bd2:	0006      	movs	r6, r0
    1bd4:	3609      	adds	r6, #9
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
    1bd6:	7882      	ldrb	r2, [r0, #2]
    1bd8:	78c3      	ldrb	r3, [r0, #3]
    1bda:	021b      	lsls	r3, r3, #8
    1bdc:	4313      	orrs	r3, r2
    1bde:	4682      	mov	sl, r0
    1be0:	449a      	add	sl, r3
  while( p_desc < desc_end )
    1be2:	4556      	cmp	r6, sl
    1be4:	d26f      	bcs.n	1cc6 <process_set_config+0x14a>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    1be6:	7873      	ldrb	r3, [r6, #1]
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
    1be8:	2b0b      	cmp	r3, #11
    1bea:	d00e      	beq.n	1c0a <process_set_config+0x8e>
    uint8_t assoc_itf_count = 1;
    1bec:	2301      	movs	r3, #1
    1bee:	469b      	mov	fp, r3
    1bf0:	7873      	ldrb	r3, [r6, #1]
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    1bf2:	2b04      	cmp	r3, #4
    1bf4:	d16f      	bne.n	1cd6 <process_set_config+0x15a>
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
    1bf6:	4653      	mov	r3, sl
    1bf8:	1b9d      	subs	r5, r3, r6
    1bfa:	b2ab      	uxth	r3, r5
    1bfc:	9301      	str	r3, [sp, #4]
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    1bfe:	2400      	movs	r4, #0
    1c00:	e020      	b.n	1c44 <process_set_config+0xc8>
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
    1c02:	2200      	movs	r2, #0
    1c04:	e7d4      	b.n	1bb0 <process_set_config+0x34>
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
    1c06:	2200      	movs	r2, #0
    1c08:	e7dc      	b.n	1bc4 <process_set_config+0x48>
      assoc_itf_count = desc_iad->bInterfaceCount;
    1c0a:	78f3      	ldrb	r3, [r6, #3]
    1c0c:	469b      	mov	fp, r3
  return desc8 + desc8[DESC_OFFSET_LEN];
    1c0e:	7833      	ldrb	r3, [r6, #0]
    1c10:	18f6      	adds	r6, r6, r3
    1c12:	e7ed      	b.n	1bf0 <process_set_config+0x74>
    drvid -= _app_driver_count;
    1c14:	1ae3      	subs	r3, r4, r3
    1c16:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1c18:	2b00      	cmp	r3, #0
    1c1a:	d127      	bne.n	1c6c <process_set_config+0xf0>
    1c1c:	005a      	lsls	r2, r3, #1
    1c1e:	18d3      	adds	r3, r2, r3
    1c20:	00dd      	lsls	r5, r3, #3
    1c22:	4b33      	ldr	r3, [pc, #204]	; (1cf0 <process_set_config+0x174>)
    1c24:	195d      	adds	r5, r3, r5
      TU_ASSERT(driver);
    1c26:	2d00      	cmp	r5, #0
    1c28:	d057      	beq.n	1cda <process_set_config+0x15e>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
    1c2a:	9a01      	ldr	r2, [sp, #4]
    1c2c:	0031      	movs	r1, r6
    1c2e:	9802      	ldr	r0, [sp, #8]
    1c30:	68af      	ldr	r7, [r5, #8]
    1c32:	47b8      	blx	r7
    1c34:	0007      	movs	r7, r0
      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
    1c36:	2808      	cmp	r0, #8
    1c38:	d902      	bls.n	1c40 <process_set_config+0xc4>
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	4283      	cmp	r3, r0
    1c3e:	d217      	bcs.n	1c70 <process_set_config+0xf4>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
    1c40:	3401      	adds	r4, #1
    1c42:	b2e4      	uxtb	r4, r4
    1c44:	9403      	str	r4, [sp, #12]
    1c46:	4b29      	ldr	r3, [pc, #164]	; (1cec <process_set_config+0x170>)
    1c48:	791b      	ldrb	r3, [r3, #4]
    1c4a:	1c5a      	adds	r2, r3, #1
    1c4c:	4294      	cmp	r4, r2
    1c4e:	da32      	bge.n	1cb6 <process_set_config+0x13a>
  if ( usbd_app_driver_get_cb )
    1c50:	4a28      	ldr	r2, [pc, #160]	; (1cf4 <process_set_config+0x178>)
    1c52:	2a00      	cmp	r2, #0
    1c54:	d008      	beq.n	1c68 <process_set_config+0xec>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1c56:	429c      	cmp	r4, r3
    1c58:	d2dc      	bcs.n	1c14 <process_set_config+0x98>
    1c5a:	0063      	lsls	r3, r4, #1
    1c5c:	191b      	adds	r3, r3, r4
    1c5e:	00dd      	lsls	r5, r3, #3
    1c60:	4b22      	ldr	r3, [pc, #136]	; (1cec <process_set_config+0x170>)
    1c62:	681b      	ldr	r3, [r3, #0]
    1c64:	195d      	adds	r5, r3, r5
    1c66:	e7de      	b.n	1c26 <process_set_config+0xaa>
  if ( usbd_app_driver_get_cb )
    1c68:	0023      	movs	r3, r4
    1c6a:	e7d5      	b.n	1c18 <process_set_config+0x9c>
  return NULL;
    1c6c:	2500      	movs	r5, #0
    1c6e:	e7da      	b.n	1c26 <process_set_config+0xaa>
        if ( assoc_itf_count == 1)
    1c70:	465b      	mov	r3, fp
    1c72:	2b01      	cmp	r3, #1
    1c74:	d010      	beq.n	1c98 <process_set_config+0x11c>
        for(uint8_t i=0; i<assoc_itf_count; i++)
    1c76:	2200      	movs	r2, #0
    1c78:	4593      	cmp	fp, r2
    1c7a:	d914      	bls.n	1ca6 <process_set_config+0x12a>
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
    1c7c:	78b3      	ldrb	r3, [r6, #2]
    1c7e:	18d3      	adds	r3, r2, r3
    1c80:	b2db      	uxtb	r3, r3
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    1c82:	491a      	ldr	r1, [pc, #104]	; (1cec <process_set_config+0x170>)
    1c84:	18c9      	adds	r1, r1, r3
    1c86:	7ac9      	ldrb	r1, [r1, #11]
    1c88:	29ff      	cmp	r1, #255	; 0xff
    1c8a:	d128      	bne.n	1cde <process_set_config+0x162>
          _usbd_dev.itf2drv[itf_num] = drv_id;
    1c8c:	4917      	ldr	r1, [pc, #92]	; (1cec <process_set_config+0x170>)
    1c8e:	18cb      	adds	r3, r1, r3
    1c90:	72dc      	strb	r4, [r3, #11]
        for(uint8_t i=0; i<assoc_itf_count; i++)
    1c92:	3201      	adds	r2, #1
    1c94:	b2d2      	uxtb	r2, r2
    1c96:	e7ef      	b.n	1c78 <process_set_config+0xfc>
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
    1c98:	68aa      	ldr	r2, [r5, #8]
    1c9a:	4b17      	ldr	r3, [pc, #92]	; (1cf8 <process_set_config+0x17c>)
    1c9c:	429a      	cmp	r2, r3
    1c9e:	d1ea      	bne.n	1c76 <process_set_config+0xfa>
    1ca0:	2302      	movs	r3, #2
    1ca2:	469b      	mov	fp, r3
    1ca4:	e7e7      	b.n	1c76 <process_set_config+0xfa>
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
    1ca6:	4811      	ldr	r0, [pc, #68]	; (1cec <process_set_config+0x170>)
    1ca8:	301b      	adds	r0, #27
    1caa:	0023      	movs	r3, r4
    1cac:	003a      	movs	r2, r7
    1cae:	0031      	movs	r1, r6
    1cb0:	4c12      	ldr	r4, [pc, #72]	; (1cfc <process_set_config+0x180>)
    1cb2:	47a0      	blx	r4
        p_desc += drv_len;
    1cb4:	19f6      	adds	r6, r6, r7
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
    1cb6:	4b0d      	ldr	r3, [pc, #52]	; (1cec <process_set_config+0x170>)
    1cb8:	791b      	ldrb	r3, [r3, #4]
    1cba:	3301      	adds	r3, #1
    1cbc:	9a03      	ldr	r2, [sp, #12]
    1cbe:	429a      	cmp	r2, r3
    1cc0:	db8f      	blt.n	1be2 <process_set_config+0x66>
    1cc2:	2000      	movs	r0, #0
    1cc4:	e76b      	b.n	1b9e <process_set_config+0x22>
  if (tud_mount_cb) tud_mount_cb();
    1cc6:	4b0e      	ldr	r3, [pc, #56]	; (1d00 <process_set_config+0x184>)
    1cc8:	2b00      	cmp	r3, #0
    1cca:	d00a      	beq.n	1ce2 <process_set_config+0x166>
    1ccc:	4798      	blx	r3
  return true;
    1cce:	2001      	movs	r0, #1
    1cd0:	e765      	b.n	1b9e <process_set_config+0x22>
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
    1cd2:	2000      	movs	r0, #0
    1cd4:	e763      	b.n	1b9e <process_set_config+0x22>
    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
    1cd6:	2000      	movs	r0, #0
    1cd8:	e761      	b.n	1b9e <process_set_config+0x22>
      TU_ASSERT(driver);
    1cda:	2000      	movs	r0, #0
    1cdc:	e75f      	b.n	1b9e <process_set_config+0x22>
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
    1cde:	2000      	movs	r0, #0
    1ce0:	e75d      	b.n	1b9e <process_set_config+0x22>
  return true;
    1ce2:	2001      	movs	r0, #1
    1ce4:	e75b      	b.n	1b9e <process_set_config+0x22>
    1ce6:	46c0      	nop			; (mov r8, r8)
    1ce8:	00004509 	.word	0x00004509
    1cec:	20000960 	.word	0x20000960
    1cf0:	00004edc 	.word	0x00004edc
    1cf4:	00000000 	.word	0x00000000
    1cf8:	000011c9 	.word	0x000011c9
    1cfc:	000044d9 	.word	0x000044d9
    1d00:	00000000 	.word	0x00000000

00001d04 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
    1d04:	b570      	push	{r4, r5, r6, lr}
    1d06:	0004      	movs	r4, r0
    1d08:	000d      	movs	r5, r1
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
    1d0a:	788b      	ldrb	r3, [r1, #2]
    1d0c:	78c8      	ldrb	r0, [r1, #3]
    1d0e:	0200      	lsls	r0, r0, #8
    1d10:	4318      	orrs	r0, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
    1d12:	0a02      	lsrs	r2, r0, #8
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    1d14:	b2c0      	uxtb	r0, r0
  uint8_t const desc_index = tu_u16_low( p_request->wValue );

  switch(desc_type)
    1d16:	2a0f      	cmp	r2, #15
    1d18:	d851      	bhi.n	1dbe <process_get_descriptor+0xba>
    1d1a:	0093      	lsls	r3, r2, #2
    1d1c:	492e      	ldr	r1, [pc, #184]	; (1dd8 <process_get_descriptor+0xd4>)
    1d1e:	58cb      	ldr	r3, [r1, r3]
    1d20:	469f      	mov	pc, r3
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG(USBD_DBG, " Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
    1d22:	4b2e      	ldr	r3, [pc, #184]	; (1ddc <process_get_descriptor+0xd8>)
    1d24:	4798      	blx	r3
    1d26:	0002      	movs	r2, r0
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
    1d28:	2312      	movs	r3, #18
    1d2a:	0029      	movs	r1, r5
    1d2c:	0020      	movs	r0, r4
    1d2e:	4c2c      	ldr	r4, [pc, #176]	; (1de0 <process_get_descriptor+0xdc>)
    1d30:	47a0      	blx	r4
    }
    // break; // unreachable

    default: return false;
  }
}
    1d32:	bd70      	pop	{r4, r5, r6, pc}
      if (!tud_descriptor_bos_cb) return false;
    1d34:	4b2b      	ldr	r3, [pc, #172]	; (1de4 <process_get_descriptor+0xe0>)
    1d36:	2b00      	cmp	r3, #0
    1d38:	d043      	beq.n	1dc2 <process_get_descriptor+0xbe>
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
    1d3a:	4798      	blx	r3
      TU_ASSERT(desc_bos);
    1d3c:	2800      	cmp	r0, #0
    1d3e:	d101      	bne.n	1d44 <process_get_descriptor+0x40>
    1d40:	2000      	movs	r0, #0
    1d42:	e7f6      	b.n	1d32 <process_get_descriptor+0x2e>
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void* mem)
{
  tu_unaligned_uint16_t const* ua16 = (tu_unaligned_uint16_t const*) mem;
  return ua16->val;
    1d44:	7882      	ldrb	r2, [r0, #2]
    1d46:	78c3      	ldrb	r3, [r0, #3]
    1d48:	021b      	lsls	r3, r3, #8
    1d4a:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
    1d4c:	0002      	movs	r2, r0
    1d4e:	0029      	movs	r1, r5
    1d50:	0020      	movs	r0, r4
    1d52:	4c23      	ldr	r4, [pc, #140]	; (1de0 <process_get_descriptor+0xdc>)
    1d54:	47a0      	blx	r4
    1d56:	e7ec      	b.n	1d32 <process_get_descriptor+0x2e>
      if ( desc_type == TUSB_DESC_CONFIGURATION )
    1d58:	2a02      	cmp	r2, #2
    1d5a:	d007      	beq.n	1d6c <process_get_descriptor+0x68>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    1d5c:	4b22      	ldr	r3, [pc, #136]	; (1de8 <process_get_descriptor+0xe4>)
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d031      	beq.n	1dc6 <process_get_descriptor+0xc2>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
    1d62:	4798      	blx	r3
      TU_ASSERT(desc_config);
    1d64:	2800      	cmp	r0, #0
    1d66:	d104      	bne.n	1d72 <process_get_descriptor+0x6e>
    1d68:	2000      	movs	r0, #0
    1d6a:	e7e2      	b.n	1d32 <process_get_descriptor+0x2e>
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
    1d6c:	4b1f      	ldr	r3, [pc, #124]	; (1dec <process_get_descriptor+0xe8>)
    1d6e:	4798      	blx	r3
    1d70:	e7f8      	b.n	1d64 <process_get_descriptor+0x60>
    1d72:	7882      	ldrb	r2, [r0, #2]
    1d74:	78c3      	ldrb	r3, [r0, #3]
    1d76:	021b      	lsls	r3, r3, #8
    1d78:	4313      	orrs	r3, r2
      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
    1d7a:	0002      	movs	r2, r0
    1d7c:	0029      	movs	r1, r5
    1d7e:	0020      	movs	r0, r4
    1d80:	4c17      	ldr	r4, [pc, #92]	; (1de0 <process_get_descriptor+0xdc>)
    1d82:	47a0      	blx	r4
    1d84:	e7d5      	b.n	1d32 <process_get_descriptor+0x2e>
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
    1d86:	792b      	ldrb	r3, [r5, #4]
    1d88:	7969      	ldrb	r1, [r5, #5]
    1d8a:	0209      	lsls	r1, r1, #8
    1d8c:	4319      	orrs	r1, r3
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <process_get_descriptor+0xec>)
    1d90:	4798      	blx	r3
      TU_VERIFY(desc_str);
    1d92:	2800      	cmp	r0, #0
    1d94:	d019      	beq.n	1dca <process_get_descriptor+0xc6>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
    1d96:	7803      	ldrb	r3, [r0, #0]
    1d98:	0002      	movs	r2, r0
    1d9a:	0029      	movs	r1, r5
    1d9c:	0020      	movs	r0, r4
    1d9e:	4c10      	ldr	r4, [pc, #64]	; (1de0 <process_get_descriptor+0xdc>)
    1da0:	47a0      	blx	r4
    1da2:	e7c6      	b.n	1d32 <process_get_descriptor+0x2e>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    1da4:	4b13      	ldr	r3, [pc, #76]	; (1df4 <process_get_descriptor+0xf0>)
    1da6:	2b00      	cmp	r3, #0
    1da8:	d011      	beq.n	1dce <process_get_descriptor+0xca>
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
    1daa:	4798      	blx	r3
      TU_VERIFY(desc_qualifier);
    1dac:	2800      	cmp	r0, #0
    1dae:	d010      	beq.n	1dd2 <process_get_descriptor+0xce>
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
    1db0:	7803      	ldrb	r3, [r0, #0]
    1db2:	0002      	movs	r2, r0
    1db4:	0029      	movs	r1, r5
    1db6:	0020      	movs	r0, r4
    1db8:	4c09      	ldr	r4, [pc, #36]	; (1de0 <process_get_descriptor+0xdc>)
    1dba:	47a0      	blx	r4
    1dbc:	e7b9      	b.n	1d32 <process_get_descriptor+0x2e>
    default: return false;
    1dbe:	2000      	movs	r0, #0
    1dc0:	e7b7      	b.n	1d32 <process_get_descriptor+0x2e>
      if (!tud_descriptor_bos_cb) return false;
    1dc2:	2000      	movs	r0, #0
    1dc4:	e7b5      	b.n	1d32 <process_get_descriptor+0x2e>
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
    1dc6:	2000      	movs	r0, #0
    1dc8:	e7b3      	b.n	1d32 <process_get_descriptor+0x2e>
      TU_VERIFY(desc_str);
    1dca:	2000      	movs	r0, #0
    1dcc:	e7b1      	b.n	1d32 <process_get_descriptor+0x2e>
      TU_VERIFY( tud_descriptor_device_qualifier_cb );
    1dce:	2000      	movs	r0, #0
    1dd0:	e7af      	b.n	1d32 <process_get_descriptor+0x2e>
      TU_VERIFY(desc_qualifier);
    1dd2:	2000      	movs	r0, #0
    1dd4:	e7ad      	b.n	1d32 <process_get_descriptor+0x2e>
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	00004e50 	.word	0x00004e50
    1ddc:	00004501 	.word	0x00004501
    1de0:	00002929 	.word	0x00002929
	...
    1dec:	00004509 	.word	0x00004509
    1df0:	00004515 	.word	0x00004515
    1df4:	00000000 	.word	0x00000000

00001df8 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
    1df8:	b510      	push	{r4, lr}
  if (enabled)
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d104      	bne.n	1e08 <usbd_int_set+0x10>
  {
    dcd_int_enable(_usbd_rhport);
  }else
  {
    dcd_int_disable(_usbd_rhport);
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <usbd_int_set+0x1c>)
    1e00:	7818      	ldrb	r0, [r3, #0]
    1e02:	4b05      	ldr	r3, [pc, #20]	; (1e18 <usbd_int_set+0x20>)
    1e04:	4798      	blx	r3
  }
}
    1e06:	bd10      	pop	{r4, pc}
    dcd_int_enable(_usbd_rhport);
    1e08:	4b02      	ldr	r3, [pc, #8]	; (1e14 <usbd_int_set+0x1c>)
    1e0a:	7818      	ldrb	r0, [r3, #0]
    1e0c:	4b03      	ldr	r3, [pc, #12]	; (1e1c <usbd_int_set+0x24>)
    1e0e:	4798      	blx	r3
    1e10:	e7f9      	b.n	1e06 <usbd_int_set+0xe>
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	20000010 	.word	0x20000010
    1e18:	00002bdd 	.word	0x00002bdd
    1e1c:	00002bd1 	.word	0x00002bd1

00001e20 <tud_mounted>:
  return _usbd_dev.cfg_num ? true : false;
    1e20:	4b02      	ldr	r3, [pc, #8]	; (1e2c <tud_mounted+0xc>)
    1e22:	7a58      	ldrb	r0, [r3, #9]
    1e24:	1e43      	subs	r3, r0, #1
    1e26:	4198      	sbcs	r0, r3
    1e28:	b2c0      	uxtb	r0, r0
}
    1e2a:	4770      	bx	lr
    1e2c:	20000960 	.word	0x20000960

00001e30 <tud_suspended>:
  return _usbd_dev.suspended;
    1e30:	4b02      	ldr	r3, [pc, #8]	; (1e3c <tud_suspended+0xc>)
    1e32:	7a18      	ldrb	r0, [r3, #8]
    1e34:	0740      	lsls	r0, r0, #29
    1e36:	0fc0      	lsrs	r0, r0, #31
}
    1e38:	4770      	bx	lr
    1e3a:	46c0      	nop			; (mov r8, r8)
    1e3c:	20000960 	.word	0x20000960

00001e40 <tud_disconnect>:
{
    1e40:	b510      	push	{r4, lr}
  TU_VERIFY(dcd_disconnect);
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <tud_disconnect+0x18>)
    1e44:	2b00      	cmp	r3, #0
    1e46:	d005      	beq.n	1e54 <tud_disconnect+0x14>
  dcd_disconnect(_usbd_rhport);
    1e48:	4b04      	ldr	r3, [pc, #16]	; (1e5c <tud_disconnect+0x1c>)
    1e4a:	7818      	ldrb	r0, [r3, #0]
    1e4c:	4b02      	ldr	r3, [pc, #8]	; (1e58 <tud_disconnect+0x18>)
    1e4e:	4798      	blx	r3
  return true;
    1e50:	2001      	movs	r0, #1
}
    1e52:	bd10      	pop	{r4, pc}
  TU_VERIFY(dcd_disconnect);
    1e54:	2000      	movs	r0, #0
    1e56:	e7fc      	b.n	1e52 <tud_disconnect+0x12>
    1e58:	00002bf1 	.word	0x00002bf1
    1e5c:	20000010 	.word	0x20000010

00001e60 <tud_connect>:
{
    1e60:	b510      	push	{r4, lr}
  TU_VERIFY(dcd_connect);
    1e62:	4b05      	ldr	r3, [pc, #20]	; (1e78 <tud_connect+0x18>)
    1e64:	2b00      	cmp	r3, #0
    1e66:	d005      	beq.n	1e74 <tud_connect+0x14>
  dcd_connect(_usbd_rhport);
    1e68:	4b04      	ldr	r3, [pc, #16]	; (1e7c <tud_connect+0x1c>)
    1e6a:	7818      	ldrb	r0, [r3, #0]
    1e6c:	4b02      	ldr	r3, [pc, #8]	; (1e78 <tud_connect+0x18>)
    1e6e:	4798      	blx	r3
  return true;
    1e70:	2001      	movs	r0, #1
}
    1e72:	bd10      	pop	{r4, pc}
  TU_VERIFY(dcd_connect);
    1e74:	2000      	movs	r0, #0
    1e76:	e7fc      	b.n	1e72 <tud_connect+0x12>
    1e78:	00002c05 	.word	0x00002c05
    1e7c:	20000010 	.word	0x20000010

00001e80 <tud_inited>:
  return _usbd_rhport != RHPORT_INVALID;
    1e80:	4b03      	ldr	r3, [pc, #12]	; (1e90 <tud_inited+0x10>)
    1e82:	7818      	ldrb	r0, [r3, #0]
    1e84:	38ff      	subs	r0, #255	; 0xff
    1e86:	1e43      	subs	r3, r0, #1
    1e88:	4198      	sbcs	r0, r3
    1e8a:	b2c0      	uxtb	r0, r0
}
    1e8c:	4770      	bx	lr
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	20000010 	.word	0x20000010

00001e94 <tud_init>:
{
    1e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e96:	0006      	movs	r6, r0
  if ( tud_inited() ) return true;
    1e98:	4b24      	ldr	r3, [pc, #144]	; (1f2c <tud_init+0x98>)
    1e9a:	4798      	blx	r3
    1e9c:	1e05      	subs	r5, r0, #0
    1e9e:	d001      	beq.n	1ea4 <tud_init+0x10>
}
    1ea0:	0028      	movs	r0, r5
    1ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tu_varclr(&_usbd_dev);
    1ea4:	4f22      	ldr	r7, [pc, #136]	; (1f30 <tud_init+0x9c>)
    1ea6:	0038      	movs	r0, r7
    1ea8:	3008      	adds	r0, #8
    1eaa:	2233      	movs	r2, #51	; 0x33
    1eac:	2100      	movs	r1, #0
    1eae:	4b21      	ldr	r3, [pc, #132]	; (1f34 <tud_init+0xa0>)
    1eb0:	4798      	blx	r3
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef)
{
  tu_fifo_clear(&qdef->ff);
    1eb2:	4c21      	ldr	r4, [pc, #132]	; (1f38 <tud_init+0xa4>)
    1eb4:	3404      	adds	r4, #4
    1eb6:	1d20      	adds	r0, r4, #4
    1eb8:	4b20      	ldr	r3, [pc, #128]	; (1f3c <tud_init+0xa8>)
    1eba:	4798      	blx	r3
  _usbd_q = osal_queue_create(&_usbd_qdef);
    1ebc:	63fc      	str	r4, [r7, #60]	; 0x3c
  if ( usbd_app_driver_get_cb )
    1ebe:	4b20      	ldr	r3, [pc, #128]	; (1f40 <tud_init+0xac>)
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d003      	beq.n	1ecc <tud_init+0x38>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
    1ec4:	4c1a      	ldr	r4, [pc, #104]	; (1f30 <tud_init+0x9c>)
    1ec6:	1d20      	adds	r0, r4, #4
    1ec8:	4798      	blx	r3
    1eca:	6020      	str	r0, [r4, #0]
  return NULL;
    1ecc:	2400      	movs	r4, #0
    1ece:	e00e      	b.n	1eee <tud_init+0x5a>
    drvid -= _app_driver_count;
    1ed0:	1ae3      	subs	r3, r4, r3
    1ed2:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d11d      	bne.n	1f14 <tud_init+0x80>
    1ed8:	005a      	lsls	r2, r3, #1
    1eda:	18d3      	adds	r3, r2, r3
    1edc:	00da      	lsls	r2, r3, #3
    1ede:	4b19      	ldr	r3, [pc, #100]	; (1f44 <tud_init+0xb0>)
    1ee0:	189b      	adds	r3, r3, r2
    TU_ASSERT(driver);
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	d0dc      	beq.n	1ea0 <tud_init+0xc>
    driver->init();
    1ee6:	681b      	ldr	r3, [r3, #0]
    1ee8:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    1eea:	3401      	adds	r4, #1
    1eec:	b2e4      	uxtb	r4, r4
    1eee:	4b10      	ldr	r3, [pc, #64]	; (1f30 <tud_init+0x9c>)
    1ef0:	791b      	ldrb	r3, [r3, #4]
    1ef2:	1c5a      	adds	r2, r3, #1
    1ef4:	4294      	cmp	r4, r2
    1ef6:	da0f      	bge.n	1f18 <tud_init+0x84>
  if ( usbd_app_driver_get_cb )
    1ef8:	4a11      	ldr	r2, [pc, #68]	; (1f40 <tud_init+0xac>)
    1efa:	2a00      	cmp	r2, #0
    1efc:	d008      	beq.n	1f10 <tud_init+0x7c>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    1efe:	429c      	cmp	r4, r3
    1f00:	d2e6      	bcs.n	1ed0 <tud_init+0x3c>
    1f02:	0062      	lsls	r2, r4, #1
    1f04:	1912      	adds	r2, r2, r4
    1f06:	00d1      	lsls	r1, r2, #3
    1f08:	4b09      	ldr	r3, [pc, #36]	; (1f30 <tud_init+0x9c>)
    1f0a:	681b      	ldr	r3, [r3, #0]
    1f0c:	185b      	adds	r3, r3, r1
    1f0e:	e7e8      	b.n	1ee2 <tud_init+0x4e>
  if ( usbd_app_driver_get_cb )
    1f10:	0023      	movs	r3, r4
    1f12:	e7df      	b.n	1ed4 <tud_init+0x40>
  return NULL;
    1f14:	2300      	movs	r3, #0
    1f16:	e7e4      	b.n	1ee2 <tud_init+0x4e>
  _usbd_rhport = rhport;
    1f18:	4b07      	ldr	r3, [pc, #28]	; (1f38 <tud_init+0xa4>)
    1f1a:	701e      	strb	r6, [r3, #0]
  dcd_init(rhport);
    1f1c:	0030      	movs	r0, r6
    1f1e:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <tud_init+0xb4>)
    1f20:	4798      	blx	r3
  dcd_int_enable(rhport);
    1f22:	0030      	movs	r0, r6
    1f24:	4b09      	ldr	r3, [pc, #36]	; (1f4c <tud_init+0xb8>)
    1f26:	4798      	blx	r3
  return true;
    1f28:	2501      	movs	r5, #1
    1f2a:	e7b9      	b.n	1ea0 <tud_init+0xc>
    1f2c:	00001e81 	.word	0x00001e81
    1f30:	20000960 	.word	0x20000960
    1f34:	000049e5 	.word	0x000049e5
    1f38:	20000010 	.word	0x20000010
    1f3c:	00001aa1 	.word	0x00001aa1
    1f40:	00000000 	.word	0x00000000
    1f44:	00004edc 	.word	0x00004edc
    1f48:	00002b35 	.word	0x00002b35
    1f4c:	00002bd1 	.word	0x00002bd1

00001f50 <dcd_event_handler>:
{
    1f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f52:	b085      	sub	sp, #20
    1f54:	0005      	movs	r5, r0
    1f56:	000e      	movs	r6, r1
  switch (event->event_id)
    1f58:	7843      	ldrb	r3, [r0, #1]
    1f5a:	2b03      	cmp	r3, #3
    1f5c:	d100      	bne.n	1f60 <dcd_event_handler+0x10>
    1f5e:	e086      	b.n	206e <STACK_SIZE+0x6e>
    1f60:	d91c      	bls.n	1f9c <dcd_event_handler+0x4c>
    1f62:	2b04      	cmp	r3, #4
    1f64:	d03d      	beq.n	1fe2 <dcd_event_handler+0x92>
    1f66:	2b05      	cmp	r3, #5
    1f68:	d000      	beq.n	1f6c <dcd_event_handler+0x1c>
    1f6a:	e0a6      	b.n	20ba <STACK_SIZE+0xba>
      if ( _usbd_dev.connected )
    1f6c:	4b5d      	ldr	r3, [pc, #372]	; (20e4 <STACK_SIZE+0xe4>)
    1f6e:	7a1b      	ldrb	r3, [r3, #8]
    1f70:	07db      	lsls	r3, r3, #31
    1f72:	d400      	bmi.n	1f76 <dcd_event_handler+0x26>
    1f74:	e0ab      	b.n	20ce <STACK_SIZE+0xce>
        _usbd_dev.suspended = 0;
    1f76:	4b5b      	ldr	r3, [pc, #364]	; (20e4 <STACK_SIZE+0xe4>)
    1f78:	7a1a      	ldrb	r2, [r3, #8]
    1f7a:	2104      	movs	r1, #4
    1f7c:	438a      	bics	r2, r1
    1f7e:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    1f80:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  return success;
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const * data, bool in_isr)
{
  if (!in_isr) {
    1f82:	2e00      	cmp	r6, #0
    1f84:	d047      	beq.n	2016 <STACK_SIZE+0x16>
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
    1f86:	1d20      	adds	r0, r4, #4
    1f88:	0029      	movs	r1, r5
    1f8a:	4b57      	ldr	r3, [pc, #348]	; (20e8 <STACK_SIZE+0xe8>)
    1f8c:	4798      	blx	r3

  if (!in_isr) {
    1f8e:	2e00      	cmp	r6, #0
    1f90:	d000      	beq.n	1f94 <dcd_event_handler+0x44>
    1f92:	e09c      	b.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(true);
    1f94:	6823      	ldr	r3, [r4, #0]
    1f96:	2001      	movs	r0, #1
    1f98:	4798      	blx	r3
    1f9a:	e098      	b.n	20ce <STACK_SIZE+0xce>
  switch (event->event_id)
    1f9c:	2b02      	cmp	r3, #2
    1f9e:	d000      	beq.n	1fa2 <dcd_event_handler+0x52>
    1fa0:	e08b      	b.n	20ba <STACK_SIZE+0xba>
      _usbd_dev.connected  = 0;
    1fa2:	4b50      	ldr	r3, [pc, #320]	; (20e4 <STACK_SIZE+0xe4>)
    1fa4:	7a1a      	ldrb	r2, [r3, #8]
    1fa6:	2101      	movs	r1, #1
    1fa8:	438a      	bics	r2, r1
    1faa:	721a      	strb	r2, [r3, #8]
      _usbd_dev.addressed  = 0;
    1fac:	7a1a      	ldrb	r2, [r3, #8]
    1fae:	3101      	adds	r1, #1
    1fb0:	438a      	bics	r2, r1
    1fb2:	721a      	strb	r2, [r3, #8]
      _usbd_dev.cfg_num    = 0;
    1fb4:	2200      	movs	r2, #0
    1fb6:	725a      	strb	r2, [r3, #9]
      _usbd_dev.suspended  = 0;
    1fb8:	7a1a      	ldrb	r2, [r3, #8]
    1fba:	3102      	adds	r1, #2
    1fbc:	438a      	bics	r2, r1
    1fbe:	721a      	strb	r2, [r3, #8]
      osal_queue_send(_usbd_q, event, in_isr);
    1fc0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    1fc2:	2e00      	cmp	r6, #0
    1fc4:	d009      	beq.n	1fda <dcd_event_handler+0x8a>
  bool success = tu_fifo_write(&qhdl->ff, data);
    1fc6:	1d20      	adds	r0, r4, #4
    1fc8:	0029      	movs	r1, r5
    1fca:	4b47      	ldr	r3, [pc, #284]	; (20e8 <STACK_SIZE+0xe8>)
    1fcc:	4798      	blx	r3
  if (!in_isr) {
    1fce:	2e00      	cmp	r6, #0
    1fd0:	d17d      	bne.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(true);
    1fd2:	6823      	ldr	r3, [r4, #0]
    1fd4:	2001      	movs	r0, #1
    1fd6:	4798      	blx	r3
    1fd8:	e079      	b.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(false);
    1fda:	2000      	movs	r0, #0
    1fdc:	6823      	ldr	r3, [r4, #0]
    1fde:	4798      	blx	r3
    1fe0:	e7f1      	b.n	1fc6 <dcd_event_handler+0x76>
      if ( _usbd_dev.connected )
    1fe2:	4b40      	ldr	r3, [pc, #256]	; (20e4 <STACK_SIZE+0xe4>)
    1fe4:	7a1b      	ldrb	r3, [r3, #8]
    1fe6:	07db      	lsls	r3, r3, #31
    1fe8:	d571      	bpl.n	20ce <STACK_SIZE+0xce>
        _usbd_dev.suspended = 1;
    1fea:	4b3e      	ldr	r3, [pc, #248]	; (20e4 <STACK_SIZE+0xe4>)
    1fec:	7a1a      	ldrb	r2, [r3, #8]
    1fee:	2104      	movs	r1, #4
    1ff0:	430a      	orrs	r2, r1
    1ff2:	721a      	strb	r2, [r3, #8]
        osal_queue_send(_usbd_q, event, in_isr);
    1ff4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    1ff6:	2e00      	cmp	r6, #0
    1ff8:	d009      	beq.n	200e <STACK_SIZE+0xe>
  bool success = tu_fifo_write(&qhdl->ff, data);
    1ffa:	1d20      	adds	r0, r4, #4
    1ffc:	0029      	movs	r1, r5
    1ffe:	4b3a      	ldr	r3, [pc, #232]	; (20e8 <STACK_SIZE+0xe8>)
    2000:	4798      	blx	r3
  if (!in_isr) {
    2002:	2e00      	cmp	r6, #0
    2004:	d163      	bne.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(true);
    2006:	6823      	ldr	r3, [r4, #0]
    2008:	2001      	movs	r0, #1
    200a:	4798      	blx	r3
    200c:	e05f      	b.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(false);
    200e:	2000      	movs	r0, #0
    2010:	6823      	ldr	r3, [r4, #0]
    2012:	4798      	blx	r3
    2014:	e7f1      	b.n	1ffa <dcd_event_handler+0xaa>
    2016:	2000      	movs	r0, #0
    2018:	6823      	ldr	r3, [r4, #0]
    201a:	4798      	blx	r3
    201c:	e7b3      	b.n	1f86 <dcd_event_handler+0x36>
    drvid -= _app_driver_count;
    201e:	1ae3      	subs	r3, r4, r3
    2020:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    2022:	2b00      	cmp	r3, #0
    2024:	d121      	bne.n	206a <STACK_SIZE+0x6a>
    2026:	005a      	lsls	r2, r3, #1
    2028:	18d3      	adds	r3, r2, r3
    202a:	00da      	lsls	r2, r3, #3
    202c:	4b2f      	ldr	r3, [pc, #188]	; (20ec <STACK_SIZE+0xec>)
    202e:	189b      	adds	r3, r3, r2
        if (driver && driver->sof)
    2030:	2b00      	cmp	r3, #0
    2032:	d005      	beq.n	2040 <STACK_SIZE+0x40>
    2034:	695b      	ldr	r3, [r3, #20]
    2036:	2b00      	cmp	r3, #0
    2038:	d002      	beq.n	2040 <STACK_SIZE+0x40>
          driver->sof(event->rhport, event->sof.frame_count);
    203a:	7828      	ldrb	r0, [r5, #0]
    203c:	6869      	ldr	r1, [r5, #4]
    203e:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
    2040:	3401      	adds	r4, #1
    2042:	b2e4      	uxtb	r4, r4
    2044:	4b27      	ldr	r3, [pc, #156]	; (20e4 <STACK_SIZE+0xe4>)
    2046:	791b      	ldrb	r3, [r3, #4]
    2048:	1c5a      	adds	r2, r3, #1
    204a:	4294      	cmp	r4, r2
    204c:	da11      	bge.n	2072 <STACK_SIZE+0x72>
  if ( usbd_app_driver_get_cb )
    204e:	4a28      	ldr	r2, [pc, #160]	; (20f0 <STACK_SIZE+0xf0>)
    2050:	2a00      	cmp	r2, #0
    2052:	d008      	beq.n	2066 <STACK_SIZE+0x66>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    2054:	429c      	cmp	r4, r3
    2056:	d2e2      	bcs.n	201e <STACK_SIZE+0x1e>
    2058:	0062      	lsls	r2, r4, #1
    205a:	1912      	adds	r2, r2, r4
    205c:	00d1      	lsls	r1, r2, #3
    205e:	4b21      	ldr	r3, [pc, #132]	; (20e4 <STACK_SIZE+0xe4>)
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	185b      	adds	r3, r3, r1
    2064:	e7e4      	b.n	2030 <STACK_SIZE+0x30>
  if ( usbd_app_driver_get_cb )
    2066:	0023      	movs	r3, r4
    2068:	e7db      	b.n	2022 <STACK_SIZE+0x22>
  return NULL;
    206a:	2300      	movs	r3, #0
    206c:	e7e0      	b.n	2030 <STACK_SIZE+0x30>
  switch (event->event_id)
    206e:	2400      	movs	r4, #0
    2070:	e7e8      	b.n	2044 <STACK_SIZE+0x44>
      if ( _usbd_dev.suspended )
    2072:	4b1c      	ldr	r3, [pc, #112]	; (20e4 <STACK_SIZE+0xe4>)
    2074:	7a1b      	ldrb	r3, [r3, #8]
    2076:	075b      	lsls	r3, r3, #29
    2078:	d529      	bpl.n	20ce <STACK_SIZE+0xce>
        _usbd_dev.suspended = 0;
    207a:	4c1a      	ldr	r4, [pc, #104]	; (20e4 <STACK_SIZE+0xe4>)
    207c:	7a23      	ldrb	r3, [r4, #8]
    207e:	2204      	movs	r2, #4
    2080:	4393      	bics	r3, r2
    2082:	7223      	strb	r3, [r4, #8]
        dcd_event_t const event_resume = { .rhport = event->rhport, .event_id = DCD_EVENT_RESUME };
    2084:	af01      	add	r7, sp, #4
    2086:	3208      	adds	r2, #8
    2088:	2100      	movs	r1, #0
    208a:	0038      	movs	r0, r7
    208c:	4b19      	ldr	r3, [pc, #100]	; (20f4 <STACK_SIZE+0xf4>)
    208e:	4798      	blx	r3
    2090:	782b      	ldrb	r3, [r5, #0]
    2092:	703b      	strb	r3, [r7, #0]
    2094:	2305      	movs	r3, #5
    2096:	707b      	strb	r3, [r7, #1]
        osal_queue_send(_usbd_q, &event_resume, in_isr);
    2098:	6be4      	ldr	r4, [r4, #60]	; 0x3c
  if (!in_isr) {
    209a:	2e00      	cmp	r6, #0
    209c:	d009      	beq.n	20b2 <STACK_SIZE+0xb2>
  bool success = tu_fifo_write(&qhdl->ff, data);
    209e:	1d20      	adds	r0, r4, #4
    20a0:	a901      	add	r1, sp, #4
    20a2:	4b11      	ldr	r3, [pc, #68]	; (20e8 <STACK_SIZE+0xe8>)
    20a4:	4798      	blx	r3
  if (!in_isr) {
    20a6:	2e00      	cmp	r6, #0
    20a8:	d111      	bne.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(true);
    20aa:	6823      	ldr	r3, [r4, #0]
    20ac:	2001      	movs	r0, #1
    20ae:	4798      	blx	r3
    20b0:	e00d      	b.n	20ce <STACK_SIZE+0xce>
  qhdl->interrupt_set(false);
    20b2:	2000      	movs	r0, #0
    20b4:	6823      	ldr	r3, [r4, #0]
    20b6:	4798      	blx	r3
    20b8:	e7f1      	b.n	209e <STACK_SIZE+0x9e>
      osal_queue_send(_usbd_q, event, in_isr);
    20ba:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <STACK_SIZE+0xe4>)
    20bc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (!in_isr) {
    20be:	2e00      	cmp	r6, #0
    20c0:	d007      	beq.n	20d2 <STACK_SIZE+0xd2>
  bool success = tu_fifo_write(&qhdl->ff, data);
    20c2:	1d20      	adds	r0, r4, #4
    20c4:	0029      	movs	r1, r5
    20c6:	4b08      	ldr	r3, [pc, #32]	; (20e8 <STACK_SIZE+0xe8>)
    20c8:	4798      	blx	r3
  if (!in_isr) {
    20ca:	2e00      	cmp	r6, #0
    20cc:	d005      	beq.n	20da <STACK_SIZE+0xda>
}
    20ce:	b005      	add	sp, #20
    20d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  qhdl->interrupt_set(false);
    20d2:	2000      	movs	r0, #0
    20d4:	6823      	ldr	r3, [r4, #0]
    20d6:	4798      	blx	r3
    20d8:	e7f3      	b.n	20c2 <STACK_SIZE+0xc2>
  qhdl->interrupt_set(true);
    20da:	6823      	ldr	r3, [r4, #0]
    20dc:	2001      	movs	r0, #1
    20de:	4798      	blx	r3
    20e0:	e7f5      	b.n	20ce <STACK_SIZE+0xce>
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	20000960 	.word	0x20000960
    20e8:	00001a31 	.word	0x00001a31
    20ec:	00004edc 	.word	0x00004edc
    20f0:	00000000 	.word	0x00000000
    20f4:	000049e5 	.word	0x000049e5

000020f8 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
    20f8:	b570      	push	{r4, r5, r6, lr}
    20fa:	000c      	movs	r4, r1
  rhport = _usbd_rhport;
    20fc:	4b0a      	ldr	r3, [pc, #40]	; (2128 <usbd_edpt_open+0x30>)
    20fe:	781d      	ldrb	r5, [r3, #0]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
    2100:	788a      	ldrb	r2, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2102:	237f      	movs	r3, #127	; 0x7f
    2104:	4013      	ands	r3, r2
    2106:	2b07      	cmp	r3, #7
    2108:	d901      	bls.n	210e <usbd_edpt_open+0x16>
    210a:	2000      	movs	r0, #0
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));

  return dcd_edpt_open(rhport, desc_ep);
}
    210c:	bd70      	pop	{r4, r5, r6, pc}
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
    210e:	4b07      	ldr	r3, [pc, #28]	; (212c <usbd_edpt_open+0x34>)
    2110:	7a99      	ldrb	r1, [r3, #10]
    2112:	0020      	movs	r0, r4
    2114:	4b06      	ldr	r3, [pc, #24]	; (2130 <usbd_edpt_open+0x38>)
    2116:	4798      	blx	r3
    2118:	2800      	cmp	r0, #0
    211a:	d0f7      	beq.n	210c <usbd_edpt_open+0x14>
  return dcd_edpt_open(rhport, desc_ep);
    211c:	0021      	movs	r1, r4
    211e:	0028      	movs	r0, r5
    2120:	4b04      	ldr	r3, [pc, #16]	; (2134 <usbd_edpt_open+0x3c>)
    2122:	4798      	blx	r3
    2124:	e7f2      	b.n	210c <usbd_edpt_open+0x14>
    2126:	46c0      	nop			; (mov r8, r8)
    2128:	20000010 	.word	0x20000010
    212c:	20000960 	.word	0x20000960
    2130:	00004465 	.word	0x00004465
    2134:	00002c5d 	.word	0x00002c5d

00002138 <usbd_open_edpt_pair>:
{
    2138:	b5f0      	push	{r4, r5, r6, r7, lr}
    213a:	46c6      	mov	lr, r8
    213c:	b500      	push	{lr}
    213e:	b082      	sub	sp, #8
    2140:	9001      	str	r0, [sp, #4]
    2142:	000c      	movs	r4, r1
    2144:	0016      	movs	r6, r2
    2146:	001d      	movs	r5, r3
    2148:	9b08      	ldr	r3, [sp, #32]
    214a:	4698      	mov	r8, r3
  for(int i=0; i<ep_count; i++)
    214c:	2700      	movs	r7, #0
    214e:	e004      	b.n	215a <usbd_open_edpt_pair+0x22>
      (*ep_in) = desc_ep->bEndpointAddress;
    2150:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2152:	7013      	strb	r3, [r2, #0]
  return desc8 + desc8[DESC_OFFSET_LEN];
    2154:	7823      	ldrb	r3, [r4, #0]
    2156:	18e4      	adds	r4, r4, r3
  for(int i=0; i<ep_count; i++)
    2158:	3701      	adds	r7, #1
    215a:	42b7      	cmp	r7, r6
    215c:	da14      	bge.n	2188 <usbd_open_edpt_pair+0x50>
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
    215e:	7863      	ldrb	r3, [r4, #1]
    2160:	2b05      	cmp	r3, #5
    2162:	d116      	bne.n	2192 <usbd_open_edpt_pair+0x5a>
    2164:	78e3      	ldrb	r3, [r4, #3]
    2166:	079b      	lsls	r3, r3, #30
    2168:	0f9b      	lsrs	r3, r3, #30
    216a:	42ab      	cmp	r3, r5
    216c:	d113      	bne.n	2196 <usbd_open_edpt_pair+0x5e>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
    216e:	0021      	movs	r1, r4
    2170:	9801      	ldr	r0, [sp, #4]
    2172:	4b0a      	ldr	r3, [pc, #40]	; (219c <usbd_open_edpt_pair+0x64>)
    2174:	4798      	blx	r3
    2176:	2800      	cmp	r0, #0
    2178:	d007      	beq.n	218a <usbd_open_edpt_pair+0x52>
    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
    217a:	78a3      	ldrb	r3, [r4, #2]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    217c:	b25a      	sxtb	r2, r3
    217e:	2a00      	cmp	r2, #0
    2180:	dbe6      	blt.n	2150 <usbd_open_edpt_pair+0x18>
      (*ep_out) = desc_ep->bEndpointAddress;
    2182:	4642      	mov	r2, r8
    2184:	7013      	strb	r3, [r2, #0]
    2186:	e7e5      	b.n	2154 <usbd_open_edpt_pair+0x1c>
  return true;
    2188:	2001      	movs	r0, #1
}
    218a:	b002      	add	sp, #8
    218c:	bc04      	pop	{r2}
    218e:	4690      	mov	r8, r2
    2190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
    2192:	2000      	movs	r0, #0
    2194:	e7f9      	b.n	218a <usbd_open_edpt_pair+0x52>
    2196:	2000      	movs	r0, #0
    2198:	e7f7      	b.n	218a <usbd_open_edpt_pair+0x52>
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	000020f9 	.word	0x000020f9

000021a0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
    21a0:	b510      	push	{r4, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    21a2:	207f      	movs	r0, #127	; 0x7f
    21a4:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    21a6:	09c9      	lsrs	r1, r1, #7
  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
  uint8_t const dir         = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
    21a8:	0040      	lsls	r0, r0, #1
    21aa:	1840      	adds	r0, r0, r1
    21ac:	3020      	adds	r0, #32
    21ae:	4904      	ldr	r1, [pc, #16]	; (21c0 <usbd_edpt_claim+0x20>)
    21b0:	3108      	adds	r1, #8
    21b2:	1808      	adds	r0, r1, r0
    21b4:	3003      	adds	r0, #3

#if TUSB_OPT_MUTEX
  return tu_edpt_claim(ep_state, _usbd_mutex);
#else
  return tu_edpt_claim(ep_state, NULL);
    21b6:	2100      	movs	r1, #0
    21b8:	4b02      	ldr	r3, [pc, #8]	; (21c4 <usbd_edpt_claim+0x24>)
    21ba:	4798      	blx	r3
#endif
}
    21bc:	bd10      	pop	{r4, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000960 	.word	0x20000960
    21c4:	00004419 	.word	0x00004419

000021c8 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
    21c8:	b510      	push	{r4, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    21ca:	207f      	movs	r0, #127	; 0x7f
    21cc:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    21ce:	09c9      	lsrs	r1, r1, #7
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
  uint8_t const dir         = tu_edpt_dir(ep_addr);
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
    21d0:	0040      	lsls	r0, r0, #1
    21d2:	1840      	adds	r0, r0, r1
    21d4:	3020      	adds	r0, #32
    21d6:	4904      	ldr	r1, [pc, #16]	; (21e8 <usbd_edpt_release+0x20>)
    21d8:	3108      	adds	r1, #8
    21da:	1808      	adds	r0, r1, r0
    21dc:	3003      	adds	r0, #3

#if TUSB_OPT_MUTEX
  return tu_edpt_release(ep_state, _usbd_mutex);
#else
  return tu_edpt_release(ep_state, NULL);
    21de:	2100      	movs	r1, #0
    21e0:	4b02      	ldr	r3, [pc, #8]	; (21ec <usbd_edpt_release+0x24>)
    21e2:	4798      	blx	r3
#endif
}
    21e4:	bd10      	pop	{r4, pc}
    21e6:	46c0      	nop			; (mov r8, r8)
    21e8:	20000960 	.word	0x20000960
    21ec:	0000443f 	.word	0x0000443f

000021f0 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    21f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21f2:	46ce      	mov	lr, r9
    21f4:	4647      	mov	r7, r8
    21f6:	b580      	push	{r7, lr}
  rhport = _usbd_rhport;
    21f8:	4819      	ldr	r0, [pc, #100]	; (2260 <usbd_edpt_xfer+0x70>)
    21fa:	7800      	ldrb	r0, [r0, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    21fc:	257f      	movs	r5, #127	; 0x7f
    21fe:	400d      	ands	r5, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2200:	09ce      	lsrs	r6, r1, #7
  // TU_VERIFY(tud_ready());

  TU_LOG(USBD_DBG, "  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
    2202:	006f      	lsls	r7, r5, #1
    2204:	4c17      	ldr	r4, [pc, #92]	; (2264 <usbd_edpt_xfer+0x74>)
    2206:	19e4      	adds	r4, r4, r7
    2208:	19a4      	adds	r4, r4, r6
    220a:	3428      	adds	r4, #40	; 0x28
    220c:	78e4      	ldrb	r4, [r4, #3]
    220e:	07e4      	lsls	r4, r4, #31
    2210:	d504      	bpl.n	221c <usbd_edpt_xfer+0x2c>
    2212:	2000      	movs	r0, #0
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    TU_LOG(USBD_DBG, "FAILED\r\n");
    TU_BREAKPOINT();
    return false;
  }
}
    2214:	bc0c      	pop	{r2, r3}
    2216:	4690      	mov	r8, r2
    2218:	4699      	mov	r9, r3
    221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  _usbd_dev.ep_status[epnum][dir].busy = true;
    221c:	4c11      	ldr	r4, [pc, #68]	; (2264 <usbd_edpt_xfer+0x74>)
    221e:	19e4      	adds	r4, r4, r7
    2220:	19a4      	adds	r4, r4, r6
    2222:	2728      	movs	r7, #40	; 0x28
    2224:	46b9      	mov	r9, r7
    2226:	44a1      	add	r9, r4
    2228:	464c      	mov	r4, r9
    222a:	78e4      	ldrb	r4, [r4, #3]
    222c:	2701      	movs	r7, #1
    222e:	46bc      	mov	ip, r7
    2230:	4667      	mov	r7, ip
    2232:	433c      	orrs	r4, r7
    2234:	0027      	movs	r7, r4
    2236:	464c      	mov	r4, r9
    2238:	70e7      	strb	r7, [r4, #3]
  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
    223a:	4c0b      	ldr	r4, [pc, #44]	; (2268 <usbd_edpt_xfer+0x78>)
    223c:	47a0      	blx	r4
    223e:	2800      	cmp	r0, #0
    2240:	d1e8      	bne.n	2214 <usbd_edpt_xfer+0x24>
    _usbd_dev.ep_status[epnum][dir].busy = false;
    2242:	006d      	lsls	r5, r5, #1
    2244:	4b07      	ldr	r3, [pc, #28]	; (2264 <usbd_edpt_xfer+0x74>)
    2246:	195d      	adds	r5, r3, r5
    2248:	19ae      	adds	r6, r5, r6
    224a:	3628      	adds	r6, #40	; 0x28
    224c:	78f3      	ldrb	r3, [r6, #3]
    224e:	2201      	movs	r2, #1
    2250:	4393      	bics	r3, r2
    2252:	70f3      	strb	r3, [r6, #3]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
    2254:	78f3      	ldrb	r3, [r6, #3]
    2256:	3203      	adds	r2, #3
    2258:	4393      	bics	r3, r2
    225a:	70f3      	strb	r3, [r6, #3]
    return false;
    225c:	e7da      	b.n	2214 <usbd_edpt_xfer+0x24>
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	20000010 	.word	0x20000010
    2264:	20000960 	.word	0x20000960
    2268:	00002d31 	.word	0x00002d31

0000226c <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
    226c:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    226e:	4b0f      	ldr	r3, [pc, #60]	; (22ac <usbd_edpt_stall+0x40>)
    2270:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2272:	247f      	movs	r4, #127	; 0x7f
    2274:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2276:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
    2278:	0062      	lsls	r2, r4, #1
    227a:	4b0d      	ldr	r3, [pc, #52]	; (22b0 <usbd_edpt_stall+0x44>)
    227c:	189b      	adds	r3, r3, r2
    227e:	195b      	adds	r3, r3, r5
    2280:	3328      	adds	r3, #40	; 0x28
    2282:	78db      	ldrb	r3, [r3, #3]
    2284:	079b      	lsls	r3, r3, #30
    2286:	d500      	bpl.n	228a <usbd_edpt_stall+0x1e>
    TU_LOG(USBD_DBG, "    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    _usbd_dev.ep_status[epnum][dir].busy = true;
  }
}
    2288:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_stall(rhport, ep_addr);
    228a:	4b0a      	ldr	r3, [pc, #40]	; (22b4 <usbd_edpt_stall+0x48>)
    228c:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = true;
    228e:	0063      	lsls	r3, r4, #1
    2290:	4c07      	ldr	r4, [pc, #28]	; (22b0 <usbd_edpt_stall+0x44>)
    2292:	18e4      	adds	r4, r4, r3
    2294:	1964      	adds	r4, r4, r5
    2296:	3428      	adds	r4, #40	; 0x28
    2298:	78e3      	ldrb	r3, [r4, #3]
    229a:	2202      	movs	r2, #2
    229c:	4313      	orrs	r3, r2
    229e:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = true;
    22a0:	78e3      	ldrb	r3, [r4, #3]
    22a2:	2201      	movs	r2, #1
    22a4:	4313      	orrs	r3, r2
    22a6:	70e3      	strb	r3, [r4, #3]
}
    22a8:	e7ee      	b.n	2288 <usbd_edpt_stall+0x1c>
    22aa:	46c0      	nop			; (mov r8, r8)
    22ac:	20000010 	.word	0x20000010
    22b0:	20000960 	.word	0x20000960
    22b4:	00002e0d 	.word	0x00002e0d

000022b8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
    22b8:	b570      	push	{r4, r5, r6, lr}
  rhport = _usbd_rhport;
    22ba:	4b0f      	ldr	r3, [pc, #60]	; (22f8 <usbd_edpt_clear_stall+0x40>)
    22bc:	7818      	ldrb	r0, [r3, #0]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    22be:	247f      	movs	r4, #127	; 0x7f
    22c0:	400c      	ands	r4, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    22c2:	09cd      	lsrs	r5, r1, #7

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
    22c4:	0062      	lsls	r2, r4, #1
    22c6:	4b0d      	ldr	r3, [pc, #52]	; (22fc <usbd_edpt_clear_stall+0x44>)
    22c8:	189b      	adds	r3, r3, r2
    22ca:	195b      	adds	r3, r3, r5
    22cc:	3328      	adds	r3, #40	; 0x28
    22ce:	78db      	ldrb	r3, [r3, #3]
    22d0:	079b      	lsls	r3, r3, #30
    22d2:	d400      	bmi.n	22d6 <usbd_edpt_clear_stall+0x1e>
    TU_LOG(USBD_DBG, "    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    _usbd_dev.ep_status[epnum][dir].busy = false;
  }
}
    22d4:	bd70      	pop	{r4, r5, r6, pc}
    dcd_edpt_clear_stall(rhport, ep_addr);
    22d6:	4b0a      	ldr	r3, [pc, #40]	; (2300 <usbd_edpt_clear_stall+0x48>)
    22d8:	4798      	blx	r3
    _usbd_dev.ep_status[epnum][dir].stalled = false;
    22da:	0063      	lsls	r3, r4, #1
    22dc:	4c07      	ldr	r4, [pc, #28]	; (22fc <usbd_edpt_clear_stall+0x44>)
    22de:	18e4      	adds	r4, r4, r3
    22e0:	1964      	adds	r4, r4, r5
    22e2:	3428      	adds	r4, #40	; 0x28
    22e4:	78e3      	ldrb	r3, [r4, #3]
    22e6:	2202      	movs	r2, #2
    22e8:	4393      	bics	r3, r2
    22ea:	70e3      	strb	r3, [r4, #3]
    _usbd_dev.ep_status[epnum][dir].busy = false;
    22ec:	78e3      	ldrb	r3, [r4, #3]
    22ee:	3a01      	subs	r2, #1
    22f0:	4393      	bics	r3, r2
    22f2:	70e3      	strb	r3, [r4, #3]
}
    22f4:	e7ee      	b.n	22d4 <usbd_edpt_clear_stall+0x1c>
    22f6:	46c0      	nop			; (mov r8, r8)
    22f8:	20000010 	.word	0x20000010
    22fc:	20000960 	.word	0x20000960
    2300:	00002e31 	.word	0x00002e31

00002304 <usbd_edpt_stalled>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2304:	237f      	movs	r3, #127	; 0x7f
    2306:	400b      	ands	r3, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2308:	09ca      	lsrs	r2, r1, #7
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  return _usbd_dev.ep_status[epnum][dir].stalled;
    230a:	005b      	lsls	r3, r3, #1
    230c:	4903      	ldr	r1, [pc, #12]	; (231c <usbd_edpt_stalled+0x18>)
    230e:	18c9      	adds	r1, r1, r3
    2310:	1889      	adds	r1, r1, r2
    2312:	3128      	adds	r1, #40	; 0x28
    2314:	78c8      	ldrb	r0, [r1, #3]
    2316:	0780      	lsls	r0, r0, #30
    2318:	0fc0      	lsrs	r0, r0, #31
}
    231a:	4770      	bx	lr
    231c:	20000960 	.word	0x20000960

00002320 <process_control_request>:
{
    2320:	b5f0      	push	{r4, r5, r6, r7, lr}
    2322:	46c6      	mov	lr, r8
    2324:	b500      	push	{lr}
    2326:	b082      	sub	sp, #8
    2328:	0004      	movs	r4, r0
    232a:	000d      	movs	r5, r1
  usbd_control_set_complete_callback(NULL);
    232c:	2000      	movs	r0, #0
    232e:	4bc9      	ldr	r3, [pc, #804]	; (2654 <process_control_request+0x334>)
    2330:	4798      	blx	r3
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    2332:	782b      	ldrb	r3, [r5, #0]
    2334:	065b      	lsls	r3, r3, #25
    2336:	0f9b      	lsrs	r3, r3, #30
    2338:	2b02      	cmp	r3, #2
    233a:	dd00      	ble.n	233e <process_control_request+0x1e>
    233c:	e1b4      	b.n	26a8 <process_control_request+0x388>
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
    233e:	782b      	ldrb	r3, [r5, #0]
    2340:	2260      	movs	r2, #96	; 0x60
    2342:	401a      	ands	r2, r3
    2344:	2a40      	cmp	r2, #64	; 0x40
    2346:	d00c      	beq.n	2362 <process_control_request+0x42>
  switch ( p_request->bmRequestType_bit.recipient )
    2348:	782b      	ldrb	r3, [r5, #0]
    234a:	06db      	lsls	r3, r3, #27
    234c:	0edb      	lsrs	r3, r3, #27
    234e:	2b01      	cmp	r3, #1
    2350:	d100      	bne.n	2354 <process_control_request+0x34>
    2352:	e0cc      	b.n	24ee <process_control_request+0x1ce>
    2354:	2b00      	cmp	r3, #0
    2356:	d011      	beq.n	237c <process_control_request+0x5c>
    2358:	2b02      	cmp	r3, #2
    235a:	d100      	bne.n	235e <process_control_request+0x3e>
    235c:	e112      	b.n	2584 <process_control_request+0x264>
    default: TU_BREAKPOINT(); return false;
    235e:	2000      	movs	r0, #0
    2360:	e1a3      	b.n	26aa <process_control_request+0x38a>
    TU_VERIFY(tud_vendor_control_xfer_cb);
    2362:	4bbd      	ldr	r3, [pc, #756]	; (2658 <process_control_request+0x338>)
    2364:	2b00      	cmp	r3, #0
    2366:	d100      	bne.n	236a <process_control_request+0x4a>
    2368:	e1a3      	b.n	26b2 <process_control_request+0x392>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
    236a:	001e      	movs	r6, r3
    236c:	0018      	movs	r0, r3
    236e:	4bb9      	ldr	r3, [pc, #740]	; (2654 <process_control_request+0x334>)
    2370:	4798      	blx	r3
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
    2372:	002a      	movs	r2, r5
    2374:	2101      	movs	r1, #1
    2376:	0020      	movs	r0, r4
    2378:	47b0      	blx	r6
    237a:	e196      	b.n	26aa <process_control_request+0x38a>
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
    237c:	2a20      	cmp	r2, #32
    237e:	d00a      	beq.n	2396 <process_control_request+0x76>
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    2380:	2a00      	cmp	r2, #0
    2382:	d000      	beq.n	2386 <process_control_request+0x66>
    2384:	e19b      	b.n	26be <process_control_request+0x39e>
      switch ( p_request->bRequest )
    2386:	786b      	ldrb	r3, [r5, #1]
    2388:	2b09      	cmp	r3, #9
    238a:	d900      	bls.n	238e <process_control_request+0x6e>
    238c:	e199      	b.n	26c2 <process_control_request+0x3a2>
    238e:	009b      	lsls	r3, r3, #2
    2390:	4ab2      	ldr	r2, [pc, #712]	; (265c <process_control_request+0x33c>)
    2392:	58d3      	ldr	r3, [r2, r3]
    2394:	469f      	mov	pc, r3
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
    2396:	792b      	ldrb	r3, [r5, #4]
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    2398:	2b0f      	cmp	r3, #15
    239a:	d900      	bls.n	239e <process_control_request+0x7e>
    239c:	e18b      	b.n	26b6 <process_control_request+0x396>
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    239e:	4ab0      	ldr	r2, [pc, #704]	; (2660 <process_control_request+0x340>)
    23a0:	18d3      	adds	r3, r2, r3
    23a2:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    23a4:	4aaf      	ldr	r2, [pc, #700]	; (2664 <process_control_request+0x344>)
    23a6:	2a00      	cmp	r2, #0
    23a8:	d013      	beq.n	23d2 <process_control_request+0xb2>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    23aa:	4aad      	ldr	r2, [pc, #692]	; (2660 <process_control_request+0x340>)
    23ac:	7912      	ldrb	r2, [r2, #4]
    23ae:	429a      	cmp	r2, r3
    23b0:	d90d      	bls.n	23ce <process_control_request+0xae>
    23b2:	005a      	lsls	r2, r3, #1
    23b4:	18d3      	adds	r3, r2, r3
    23b6:	00da      	lsls	r2, r3, #3
    23b8:	4ba9      	ldr	r3, [pc, #676]	; (2660 <process_control_request+0x340>)
    23ba:	6819      	ldr	r1, [r3, #0]
    23bc:	1889      	adds	r1, r1, r2
        TU_VERIFY(driver);
    23be:	2900      	cmp	r1, #0
    23c0:	d100      	bne.n	23c4 <process_control_request+0xa4>
    23c2:	e17a      	b.n	26ba <process_control_request+0x39a>
        return invoke_class_control(rhport, driver, p_request);
    23c4:	002a      	movs	r2, r5
    23c6:	0020      	movs	r0, r4
    23c8:	4ba7      	ldr	r3, [pc, #668]	; (2668 <process_control_request+0x348>)
    23ca:	4798      	blx	r3
    23cc:	e16d      	b.n	26aa <process_control_request+0x38a>
    drvid -= _app_driver_count;
    23ce:	1a9b      	subs	r3, r3, r2
    23d0:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    23d2:	2b00      	cmp	r3, #0
    23d4:	d105      	bne.n	23e2 <process_control_request+0xc2>
    23d6:	005a      	lsls	r2, r3, #1
    23d8:	18d3      	adds	r3, r2, r3
    23da:	00da      	lsls	r2, r3, #3
    23dc:	49a3      	ldr	r1, [pc, #652]	; (266c <process_control_request+0x34c>)
    23de:	1889      	adds	r1, r1, r2
    23e0:	e7ed      	b.n	23be <process_control_request+0x9e>
  return NULL;
    23e2:	2100      	movs	r1, #0
    23e4:	e7eb      	b.n	23be <process_control_request+0x9e>
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
    23e6:	0028      	movs	r0, r5
    23e8:	4ba1      	ldr	r3, [pc, #644]	; (2670 <process_control_request+0x350>)
    23ea:	4798      	blx	r3
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
    23ec:	78a9      	ldrb	r1, [r5, #2]
    23ee:	0020      	movs	r0, r4
    23f0:	4ba0      	ldr	r3, [pc, #640]	; (2674 <process_control_request+0x354>)
    23f2:	4798      	blx	r3
          _usbd_dev.addressed = 1;
    23f4:	4a9a      	ldr	r2, [pc, #616]	; (2660 <process_control_request+0x340>)
    23f6:	7a13      	ldrb	r3, [r2, #8]
    23f8:	2102      	movs	r1, #2
    23fa:	430b      	orrs	r3, r1
    23fc:	7213      	strb	r3, [r2, #8]
  return true;
    23fe:	2001      	movs	r0, #1
        break;
    2400:	e153      	b.n	26aa <process_control_request+0x38a>
          uint8_t cfg_num = _usbd_dev.cfg_num;
    2402:	4b97      	ldr	r3, [pc, #604]	; (2660 <process_control_request+0x340>)
    2404:	7a5b      	ldrb	r3, [r3, #9]
    2406:	466a      	mov	r2, sp
    2408:	3206      	adds	r2, #6
    240a:	7013      	strb	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
    240c:	2301      	movs	r3, #1
    240e:	0029      	movs	r1, r5
    2410:	0020      	movs	r0, r4
    2412:	4c99      	ldr	r4, [pc, #612]	; (2678 <process_control_request+0x358>)
    2414:	47a0      	blx	r4
  return true;
    2416:	2001      	movs	r0, #1
        break;
    2418:	e147      	b.n	26aa <process_control_request+0x38a>
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
    241a:	78ae      	ldrb	r6, [r5, #2]
          if (_usbd_dev.cfg_num != cfg_num)
    241c:	4b90      	ldr	r3, [pc, #576]	; (2660 <process_control_request+0x340>)
    241e:	7a5b      	ldrb	r3, [r3, #9]
    2420:	b2db      	uxtb	r3, r3
    2422:	429e      	cmp	r6, r3
    2424:	d005      	beq.n	2432 <process_control_request+0x112>
            if ( _usbd_dev.cfg_num )
    2426:	4b8e      	ldr	r3, [pc, #568]	; (2660 <process_control_request+0x340>)
    2428:	7a5b      	ldrb	r3, [r3, #9]
    242a:	2b00      	cmp	r3, #0
    242c:	d109      	bne.n	2442 <process_control_request+0x122>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    242e:	2e00      	cmp	r6, #0
    2430:	d113      	bne.n	245a <process_control_request+0x13a>
          _usbd_dev.cfg_num = cfg_num;
    2432:	4b8b      	ldr	r3, [pc, #556]	; (2660 <process_control_request+0x340>)
    2434:	725e      	strb	r6, [r3, #9]
          tud_control_status(rhport, p_request);
    2436:	0029      	movs	r1, r5
    2438:	0020      	movs	r0, r4
    243a:	4b90      	ldr	r3, [pc, #576]	; (267c <process_control_request+0x35c>)
    243c:	4798      	blx	r3
  return true;
    243e:	2001      	movs	r0, #1
        break;
    2440:	e133      	b.n	26aa <process_control_request+0x38a>
              dcd_edpt_close_all(rhport);
    2442:	0020      	movs	r0, r4
    2444:	4b8e      	ldr	r3, [pc, #568]	; (2680 <process_control_request+0x360>)
    2446:	4798      	blx	r3
              uint8_t const speed = _usbd_dev.speed;
    2448:	4f85      	ldr	r7, [pc, #532]	; (2660 <process_control_request+0x340>)
    244a:	7abb      	ldrb	r3, [r7, #10]
    244c:	4698      	mov	r8, r3
              configuration_reset(rhport);
    244e:	0020      	movs	r0, r4
    2450:	4b8c      	ldr	r3, [pc, #560]	; (2684 <process_control_request+0x364>)
    2452:	4798      	blx	r3
              _usbd_dev.speed = speed; // restore speed
    2454:	4643      	mov	r3, r8
    2456:	72bb      	strb	r3, [r7, #10]
    2458:	e7e9      	b.n	242e <process_control_request+0x10e>
            if ( cfg_num ) TU_ASSERT( process_set_config(rhport, cfg_num) );
    245a:	0031      	movs	r1, r6
    245c:	0020      	movs	r0, r4
    245e:	4b8a      	ldr	r3, [pc, #552]	; (2688 <process_control_request+0x368>)
    2460:	4798      	blx	r3
    2462:	2800      	cmp	r0, #0
    2464:	d100      	bne.n	2468 <process_control_request+0x148>
    2466:	e120      	b.n	26aa <process_control_request+0x38a>
    2468:	e7e3      	b.n	2432 <process_control_request+0x112>
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
    246a:	0029      	movs	r1, r5
    246c:	0020      	movs	r0, r4
    246e:	4b87      	ldr	r3, [pc, #540]	; (268c <process_control_request+0x36c>)
    2470:	4798      	blx	r3
    2472:	e11a      	b.n	26aa <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    2474:	78aa      	ldrb	r2, [r5, #2]
    2476:	78eb      	ldrb	r3, [r5, #3]
    2478:	021b      	lsls	r3, r3, #8
    247a:	4313      	orrs	r3, r2
    247c:	2b01      	cmp	r3, #1
    247e:	d001      	beq.n	2484 <process_control_request+0x164>
    2480:	2000      	movs	r0, #0
    2482:	e112      	b.n	26aa <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = true;
    2484:	4a76      	ldr	r2, [pc, #472]	; (2660 <process_control_request+0x340>)
    2486:	7a11      	ldrb	r1, [r2, #8]
    2488:	3307      	adds	r3, #7
    248a:	430b      	orrs	r3, r1
    248c:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    248e:	0029      	movs	r1, r5
    2490:	0020      	movs	r0, r4
    2492:	4b7a      	ldr	r3, [pc, #488]	; (267c <process_control_request+0x35c>)
    2494:	4798      	blx	r3
  return true;
    2496:	2001      	movs	r0, #1
        break;
    2498:	e107      	b.n	26aa <process_control_request+0x38a>
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
    249a:	78aa      	ldrb	r2, [r5, #2]
    249c:	78eb      	ldrb	r3, [r5, #3]
    249e:	021b      	lsls	r3, r3, #8
    24a0:	4313      	orrs	r3, r2
    24a2:	2b01      	cmp	r3, #1
    24a4:	d001      	beq.n	24aa <process_control_request+0x18a>
    24a6:	2000      	movs	r0, #0
    24a8:	e0ff      	b.n	26aa <process_control_request+0x38a>
          _usbd_dev.remote_wakeup_en = false;
    24aa:	4a6d      	ldr	r2, [pc, #436]	; (2660 <process_control_request+0x340>)
    24ac:	7a13      	ldrb	r3, [r2, #8]
    24ae:	2108      	movs	r1, #8
    24b0:	438b      	bics	r3, r1
    24b2:	7213      	strb	r3, [r2, #8]
          tud_control_status(rhport, p_request);
    24b4:	0029      	movs	r1, r5
    24b6:	0020      	movs	r0, r4
    24b8:	4b70      	ldr	r3, [pc, #448]	; (267c <process_control_request+0x35c>)
    24ba:	4798      	blx	r3
  return true;
    24bc:	2001      	movs	r0, #1
        break;
    24be:	e0f4      	b.n	26aa <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    24c0:	4b67      	ldr	r3, [pc, #412]	; (2660 <process_control_request+0x340>)
    24c2:	7a1a      	ldrb	r2, [r3, #8]
    24c4:	0693      	lsls	r3, r2, #26
    24c6:	d50e      	bpl.n	24e6 <process_control_request+0x1c6>
    24c8:	2301      	movs	r3, #1
    24ca:	0712      	lsls	r2, r2, #28
    24cc:	d40d      	bmi.n	24ea <process_control_request+0x1ca>
    24ce:	2200      	movs	r2, #0
    24d0:	4313      	orrs	r3, r2
    24d2:	466a      	mov	r2, sp
    24d4:	3206      	adds	r2, #6
    24d6:	8013      	strh	r3, [r2, #0]
          tud_control_xfer(rhport, p_request, &status, 2);
    24d8:	2302      	movs	r3, #2
    24da:	0029      	movs	r1, r5
    24dc:	0020      	movs	r0, r4
    24de:	4c66      	ldr	r4, [pc, #408]	; (2678 <process_control_request+0x358>)
    24e0:	47a0      	blx	r4
  return true;
    24e2:	2001      	movs	r0, #1
        break;
    24e4:	e0e1      	b.n	26aa <process_control_request+0x38a>
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
    24e6:	2300      	movs	r3, #0
    24e8:	e7ef      	b.n	24ca <process_control_request+0x1aa>
    24ea:	2202      	movs	r2, #2
    24ec:	e7f0      	b.n	24d0 <process_control_request+0x1b0>
    24ee:	792b      	ldrb	r3, [r5, #4]
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    24f0:	2b0f      	cmp	r3, #15
    24f2:	d900      	bls.n	24f6 <process_control_request+0x1d6>
    24f4:	e0e7      	b.n	26c6 <process_control_request+0x3a6>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
    24f6:	4a5a      	ldr	r2, [pc, #360]	; (2660 <process_control_request+0x340>)
    24f8:	18d3      	adds	r3, r2, r3
    24fa:	7adb      	ldrb	r3, [r3, #11]
  if ( usbd_app_driver_get_cb )
    24fc:	4a59      	ldr	r2, [pc, #356]	; (2664 <process_control_request+0x344>)
    24fe:	2a00      	cmp	r2, #0
    2500:	d02b      	beq.n	255a <process_control_request+0x23a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    2502:	4a57      	ldr	r2, [pc, #348]	; (2660 <process_control_request+0x340>)
    2504:	7912      	ldrb	r2, [r2, #4]
    2506:	4293      	cmp	r3, r2
    2508:	d225      	bcs.n	2556 <process_control_request+0x236>
    250a:	005a      	lsls	r2, r3, #1
    250c:	18d3      	adds	r3, r2, r3
    250e:	00da      	lsls	r2, r3, #3
    2510:	4b53      	ldr	r3, [pc, #332]	; (2660 <process_control_request+0x340>)
    2512:	6819      	ldr	r1, [r3, #0]
    2514:	1889      	adds	r1, r1, r2
      TU_VERIFY(driver);
    2516:	2900      	cmp	r1, #0
    2518:	d100      	bne.n	251c <process_control_request+0x1fc>
    251a:	e0d6      	b.n	26ca <process_control_request+0x3aa>
      if ( !invoke_class_control(rhport, driver, p_request) )
    251c:	002a      	movs	r2, r5
    251e:	0020      	movs	r0, r4
    2520:	4b51      	ldr	r3, [pc, #324]	; (2668 <process_control_request+0x348>)
    2522:	4798      	blx	r3
    2524:	2800      	cmp	r0, #0
    2526:	d000      	beq.n	252a <process_control_request+0x20a>
    2528:	e0bf      	b.n	26aa <process_control_request+0x38a>
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
    252a:	782b      	ldrb	r3, [r5, #0]
    252c:	2260      	movs	r2, #96	; 0x60
    252e:	421a      	tst	r2, r3
    2530:	d000      	beq.n	2534 <process_control_request+0x214>
    2532:	e0ba      	b.n	26aa <process_control_request+0x38a>
        switch(p_request->bRequest)
    2534:	786b      	ldrb	r3, [r5, #1]
    2536:	3b0a      	subs	r3, #10
    2538:	b2db      	uxtb	r3, r3
    253a:	2b01      	cmp	r3, #1
    253c:	d900      	bls.n	2540 <process_control_request+0x220>
    253e:	e0b4      	b.n	26aa <process_control_request+0x38a>
            usbd_control_set_complete_callback(NULL);
    2540:	4b44      	ldr	r3, [pc, #272]	; (2654 <process_control_request+0x334>)
    2542:	4798      	blx	r3
            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
    2544:	786b      	ldrb	r3, [r5, #1]
    2546:	2b0a      	cmp	r3, #10
    2548:	d011      	beq.n	256e <process_control_request+0x24e>
              tud_control_status(rhport, p_request);
    254a:	0029      	movs	r1, r5
    254c:	0020      	movs	r0, r4
    254e:	4b4b      	ldr	r3, [pc, #300]	; (267c <process_control_request+0x35c>)
    2550:	4798      	blx	r3
  return true;
    2552:	2001      	movs	r0, #1
    2554:	e0a9      	b.n	26aa <process_control_request+0x38a>
    drvid -= _app_driver_count;
    2556:	1a9b      	subs	r3, r3, r2
    2558:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    255a:	2b00      	cmp	r3, #0
    255c:	d105      	bne.n	256a <process_control_request+0x24a>
    255e:	005a      	lsls	r2, r3, #1
    2560:	18d3      	adds	r3, r2, r3
    2562:	00da      	lsls	r2, r3, #3
    2564:	4941      	ldr	r1, [pc, #260]	; (266c <process_control_request+0x34c>)
    2566:	1889      	adds	r1, r1, r2
    2568:	e7d5      	b.n	2516 <process_control_request+0x1f6>
  return NULL;
    256a:	2100      	movs	r1, #0
    256c:	e7d3      	b.n	2516 <process_control_request+0x1f6>
              uint8_t alternate = 0;
    256e:	466b      	mov	r3, sp
    2570:	1d9a      	adds	r2, r3, #6
    2572:	2300      	movs	r3, #0
    2574:	7013      	strb	r3, [r2, #0]
              tud_control_xfer(rhport, p_request, &alternate, 1);
    2576:	3301      	adds	r3, #1
    2578:	0029      	movs	r1, r5
    257a:	0020      	movs	r0, r4
    257c:	4c3e      	ldr	r4, [pc, #248]	; (2678 <process_control_request+0x358>)
    257e:	47a0      	blx	r4
  return true;
    2580:	2001      	movs	r0, #1
    2582:	e092      	b.n	26aa <process_control_request+0x38a>
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
    2584:	7929      	ldrb	r1, [r5, #4]
    2586:	796b      	ldrb	r3, [r5, #5]
    2588:	021b      	lsls	r3, r3, #8
    258a:	430b      	orrs	r3, r1
    258c:	b2d9      	uxtb	r1, r3
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    258e:	207f      	movs	r0, #127	; 0x7f
    2590:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2592:	09cb      	lsrs	r3, r1, #7
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    2594:	2807      	cmp	r0, #7
    2596:	d900      	bls.n	259a <process_control_request+0x27a>
    2598:	e099      	b.n	26ce <process_control_request+0x3ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
    259a:	0040      	lsls	r0, r0, #1
    259c:	4e30      	ldr	r6, [pc, #192]	; (2660 <process_control_request+0x340>)
    259e:	1830      	adds	r0, r6, r0
    25a0:	18c3      	adds	r3, r0, r3
    25a2:	7edb      	ldrb	r3, [r3, #27]
  if ( usbd_app_driver_get_cb )
    25a4:	482f      	ldr	r0, [pc, #188]	; (2664 <process_control_request+0x344>)
    25a6:	2800      	cmp	r0, #0
    25a8:	d014      	beq.n	25d4 <process_control_request+0x2b4>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    25aa:	7930      	ldrb	r0, [r6, #4]
    25ac:	4283      	cmp	r3, r0
    25ae:	d20f      	bcs.n	25d0 <process_control_request+0x2b0>
    25b0:	0058      	lsls	r0, r3, #1
    25b2:	18c3      	adds	r3, r0, r3
    25b4:	00d8      	lsls	r0, r3, #3
    25b6:	6836      	ldr	r6, [r6, #0]
    25b8:	1836      	adds	r6, r6, r0
      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
    25ba:	2a00      	cmp	r2, #0
    25bc:	d014      	beq.n	25e8 <process_control_request+0x2c8>
        TU_VERIFY(driver);
    25be:	2e00      	cmp	r6, #0
    25c0:	d100      	bne.n	25c4 <process_control_request+0x2a4>
    25c2:	e086      	b.n	26d2 <process_control_request+0x3b2>
        return invoke_class_control(rhport, driver, p_request);
    25c4:	002a      	movs	r2, r5
    25c6:	0031      	movs	r1, r6
    25c8:	0020      	movs	r0, r4
    25ca:	4b27      	ldr	r3, [pc, #156]	; (2668 <process_control_request+0x348>)
    25cc:	4798      	blx	r3
    25ce:	e06c      	b.n	26aa <process_control_request+0x38a>
    drvid -= _app_driver_count;
    25d0:	1a1b      	subs	r3, r3, r0
    25d2:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    25d4:	2b00      	cmp	r3, #0
    25d6:	d105      	bne.n	25e4 <process_control_request+0x2c4>
    25d8:	0058      	lsls	r0, r3, #1
    25da:	18c3      	adds	r3, r0, r3
    25dc:	00d8      	lsls	r0, r3, #3
    25de:	4e23      	ldr	r6, [pc, #140]	; (266c <process_control_request+0x34c>)
    25e0:	1836      	adds	r6, r6, r0
    25e2:	e7ea      	b.n	25ba <process_control_request+0x29a>
  return NULL;
    25e4:	2600      	movs	r6, #0
    25e6:	e7e8      	b.n	25ba <process_control_request+0x29a>
        switch ( p_request->bRequest )
    25e8:	786b      	ldrb	r3, [r5, #1]
    25ea:	2b01      	cmp	r3, #1
    25ec:	d012      	beq.n	2614 <process_control_request+0x2f4>
    25ee:	2b00      	cmp	r3, #0
    25f0:	d003      	beq.n	25fa <process_control_request+0x2da>
    25f2:	2b03      	cmp	r3, #3
    25f4:	d00e      	beq.n	2614 <process_control_request+0x2f4>
          default: TU_BREAKPOINT(); return false;
    25f6:	2000      	movs	r0, #0
    25f8:	e057      	b.n	26aa <process_control_request+0x38a>
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
    25fa:	0020      	movs	r0, r4
    25fc:	4b24      	ldr	r3, [pc, #144]	; (2690 <process_control_request+0x370>)
    25fe:	4798      	blx	r3
    2600:	466b      	mov	r3, sp
    2602:	1d9a      	adds	r2, r3, #6
    2604:	8010      	strh	r0, [r2, #0]
            tud_control_xfer(rhport, p_request, &status, 2);
    2606:	2302      	movs	r3, #2
    2608:	0029      	movs	r1, r5
    260a:	0020      	movs	r0, r4
    260c:	4c1a      	ldr	r4, [pc, #104]	; (2678 <process_control_request+0x358>)
    260e:	47a0      	blx	r4
  return true;
    2610:	2001      	movs	r0, #1
          break;
    2612:	e04a      	b.n	26aa <process_control_request+0x38a>
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
    2614:	78a8      	ldrb	r0, [r5, #2]
    2616:	78ea      	ldrb	r2, [r5, #3]
    2618:	0212      	lsls	r2, r2, #8
    261a:	4302      	orrs	r2, r0
    261c:	d104      	bne.n	2628 <process_control_request+0x308>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
    261e:	2b01      	cmp	r3, #1
    2620:	d013      	beq.n	264a <process_control_request+0x32a>
                usbd_edpt_stall(rhport, ep_addr);
    2622:	0020      	movs	r0, r4
    2624:	4b1b      	ldr	r3, [pc, #108]	; (2694 <process_control_request+0x374>)
    2626:	4798      	blx	r3
            if (driver)
    2628:	2e00      	cmp	r6, #0
    262a:	d054      	beq.n	26d6 <process_control_request+0x3b6>
              (void) invoke_class_control(rhport, driver, p_request);
    262c:	002a      	movs	r2, r5
    262e:	0031      	movs	r1, r6
    2630:	0020      	movs	r0, r4
    2632:	4b0d      	ldr	r3, [pc, #52]	; (2668 <process_control_request+0x348>)
    2634:	4798      	blx	r3
              usbd_control_set_complete_callback(NULL);
    2636:	2000      	movs	r0, #0
    2638:	4b06      	ldr	r3, [pc, #24]	; (2654 <process_control_request+0x334>)
    263a:	4798      	blx	r3
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    263c:	232c      	movs	r3, #44	; 0x2c
    263e:	4a08      	ldr	r2, [pc, #32]	; (2660 <process_control_request+0x340>)
    2640:	5cd3      	ldrb	r3, [r2, r3]
    2642:	07db      	lsls	r3, r3, #31
    2644:	d52a      	bpl.n	269c <process_control_request+0x37c>
  return true;
    2646:	2001      	movs	r0, #1
    2648:	e02f      	b.n	26aa <process_control_request+0x38a>
                usbd_edpt_clear_stall(rhport, ep_addr);
    264a:	0020      	movs	r0, r4
    264c:	4b12      	ldr	r3, [pc, #72]	; (2698 <process_control_request+0x378>)
    264e:	4798      	blx	r3
    2650:	e7ea      	b.n	2628 <process_control_request+0x308>
    2652:	46c0      	nop			; (mov r8, r8)
    2654:	000029c5 	.word	0x000029c5
    2658:	00000000 	.word	0x00000000
    265c:	00004e90 	.word	0x00004e90
    2660:	20000960 	.word	0x20000960
    2664:	00000000 	.word	0x00000000
    2668:	00001b5d 	.word	0x00001b5d
    266c:	00004edc 	.word	0x00004edc
    2670:	000029d1 	.word	0x000029d1
    2674:	00002ded 	.word	0x00002ded
    2678:	00002929 	.word	0x00002929
    267c:	000028e5 	.word	0x000028e5
    2680:	00002d2d 	.word	0x00002d2d
    2684:	00001ac1 	.word	0x00001ac1
    2688:	00001b7d 	.word	0x00001b7d
    268c:	00001d05 	.word	0x00001d05
    2690:	00002305 	.word	0x00002305
    2694:	0000226d 	.word	0x0000226d
    2698:	000022b9 	.word	0x000022b9
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
    269c:	0029      	movs	r1, r5
    269e:	0020      	movs	r0, r4
    26a0:	4b0e      	ldr	r3, [pc, #56]	; (26dc <process_control_request+0x3bc>)
    26a2:	4798      	blx	r3
  return true;
    26a4:	2001      	movs	r0, #1
    26a6:	e000      	b.n	26aa <process_control_request+0x38a>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
    26a8:	2000      	movs	r0, #0
}
    26aa:	b002      	add	sp, #8
    26ac:	bc04      	pop	{r2}
    26ae:	4690      	mov	r8, r2
    26b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TU_VERIFY(tud_vendor_control_xfer_cb);
    26b2:	2000      	movs	r0, #0
    26b4:	e7f9      	b.n	26aa <process_control_request+0x38a>
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    26b6:	2000      	movs	r0, #0
    26b8:	e7f7      	b.n	26aa <process_control_request+0x38a>
        TU_VERIFY(driver);
    26ba:	2000      	movs	r0, #0
    26bc:	e7f5      	b.n	26aa <process_control_request+0x38a>
        return false;
    26be:	2000      	movs	r0, #0
    26c0:	e7f3      	b.n	26aa <process_control_request+0x38a>
        default: TU_BREAKPOINT(); return false;
    26c2:	2000      	movs	r0, #0
    26c4:	e7f1      	b.n	26aa <process_control_request+0x38a>
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
    26c6:	2000      	movs	r0, #0
    26c8:	e7ef      	b.n	26aa <process_control_request+0x38a>
      TU_VERIFY(driver);
    26ca:	2000      	movs	r0, #0
    26cc:	e7ed      	b.n	26aa <process_control_request+0x38a>
      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
    26ce:	2000      	movs	r0, #0
    26d0:	e7eb      	b.n	26aa <process_control_request+0x38a>
        TU_VERIFY(driver);
    26d2:	2000      	movs	r0, #0
    26d4:	e7e9      	b.n	26aa <process_control_request+0x38a>
  return true;
    26d6:	2001      	movs	r0, #1
    26d8:	e7e7      	b.n	26aa <process_control_request+0x38a>
    26da:	46c0      	nop			; (mov r8, r8)
    26dc:	000028e5 	.word	0x000028e5

000026e0 <tud_task_ext>:
{
    26e0:	b530      	push	{r4, r5, lr}
    26e2:	b085      	sub	sp, #20
  if ( !tusb_inited() ) return;
    26e4:	4b5b      	ldr	r3, [pc, #364]	; (2854 <tud_task_ext+0x174>)
    26e6:	4798      	blx	r3
    26e8:	2800      	cmp	r0, #0
    26ea:	d108      	bne.n	26fe <tud_task_ext+0x1e>
}
    26ec:	b005      	add	sp, #20
    26ee:	bd30      	pop	{r4, r5, pc}
        usbd_reset(event.rhport);
    26f0:	ac01      	add	r4, sp, #4
    26f2:	7820      	ldrb	r0, [r4, #0]
    26f4:	4b58      	ldr	r3, [pc, #352]	; (2858 <tud_task_ext+0x178>)
    26f6:	4798      	blx	r3
        _usbd_dev.speed = event.bus_reset.speed;
    26f8:	7922      	ldrb	r2, [r4, #4]
    26fa:	4b58      	ldr	r3, [pc, #352]	; (285c <tud_task_ext+0x17c>)
    26fc:	729a      	strb	r2, [r3, #10]
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
    26fe:	4b57      	ldr	r3, [pc, #348]	; (285c <tud_task_ext+0x17c>)
    2700:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  qhdl->interrupt_set(false);
    2702:	002c      	movs	r4, r5
    2704:	cc08      	ldmia	r4!, {r3}
    2706:	2000      	movs	r0, #0
    2708:	4798      	blx	r3
  bool success = tu_fifo_read(&qhdl->ff, data);
    270a:	a901      	add	r1, sp, #4
    270c:	0020      	movs	r0, r4
    270e:	4b54      	ldr	r3, [pc, #336]	; (2860 <tud_task_ext+0x180>)
    2710:	4798      	blx	r3
    2712:	0004      	movs	r4, r0
  qhdl->interrupt_set(true);
    2714:	682b      	ldr	r3, [r5, #0]
    2716:	2001      	movs	r0, #1
    2718:	4798      	blx	r3
    271a:	2c00      	cmp	r4, #0
    271c:	d0e6      	beq.n	26ec <tud_task_ext+0xc>
    switch ( event.event_id )
    271e:	ab01      	add	r3, sp, #4
    2720:	785b      	ldrb	r3, [r3, #1]
    2722:	2b08      	cmp	r3, #8
    2724:	d8eb      	bhi.n	26fe <tud_task_ext+0x1e>
    2726:	009b      	lsls	r3, r3, #2
    2728:	4a4e      	ldr	r2, [pc, #312]	; (2864 <tud_task_ext+0x184>)
    272a:	58d3      	ldr	r3, [r2, r3]
    272c:	469f      	mov	pc, r3
        usbd_reset(event.rhport);
    272e:	ab01      	add	r3, sp, #4
    2730:	7818      	ldrb	r0, [r3, #0]
    2732:	4b49      	ldr	r3, [pc, #292]	; (2858 <tud_task_ext+0x178>)
    2734:	4798      	blx	r3
        if (tud_umount_cb) tud_umount_cb();
    2736:	4b4c      	ldr	r3, [pc, #304]	; (2868 <tud_task_ext+0x188>)
    2738:	2b00      	cmp	r3, #0
    273a:	d0e0      	beq.n	26fe <tud_task_ext+0x1e>
    273c:	4798      	blx	r3
    273e:	e7de      	b.n	26fe <tud_task_ext+0x1e>
        _usbd_dev.connected = 1;
    2740:	4b46      	ldr	r3, [pc, #280]	; (285c <tud_task_ext+0x17c>)
    2742:	7a1a      	ldrb	r2, [r3, #8]
    2744:	2401      	movs	r4, #1
    2746:	2101      	movs	r1, #1
    2748:	430a      	orrs	r2, r1
    274a:	721a      	strb	r2, [r3, #8]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = false;
    274c:	222b      	movs	r2, #43	; 0x2b
    274e:	5c99      	ldrb	r1, [r3, r2]
    2750:	43a1      	bics	r1, r4
    2752:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
    2754:	5c99      	ldrb	r1, [r3, r2]
    2756:	2004      	movs	r0, #4
    2758:	4381      	bics	r1, r0
    275a:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = false;
    275c:	3201      	adds	r2, #1
    275e:	5c99      	ldrb	r1, [r3, r2]
    2760:	43a1      	bics	r1, r4
    2762:	5499      	strb	r1, [r3, r2]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
    2764:	5c99      	ldrb	r1, [r3, r2]
    2766:	4381      	bics	r1, r0
    2768:	5499      	strb	r1, [r3, r2]
        if ( !process_control_request(event.rhport, &event.setup_received) )
    276a:	ab01      	add	r3, sp, #4
    276c:	7818      	ldrb	r0, [r3, #0]
    276e:	a902      	add	r1, sp, #8
    2770:	4b3e      	ldr	r3, [pc, #248]	; (286c <tud_task_ext+0x18c>)
    2772:	4798      	blx	r3
    2774:	2800      	cmp	r0, #0
    2776:	d1c2      	bne.n	26fe <tud_task_ext+0x1e>
          dcd_edpt_stall(event.rhport, 0);
    2778:	ad01      	add	r5, sp, #4
    277a:	7828      	ldrb	r0, [r5, #0]
    277c:	2100      	movs	r1, #0
    277e:	4c3c      	ldr	r4, [pc, #240]	; (2870 <tud_task_ext+0x190>)
    2780:	47a0      	blx	r4
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
    2782:	7828      	ldrb	r0, [r5, #0]
    2784:	2180      	movs	r1, #128	; 0x80
    2786:	47a0      	blx	r4
    2788:	e7b9      	b.n	26fe <tud_task_ext+0x1e>
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
    278a:	ab01      	add	r3, sp, #4
    278c:	7919      	ldrb	r1, [r3, #4]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    278e:	227f      	movs	r2, #127	; 0x7f
    2790:	400a      	ands	r2, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2792:	09cc      	lsrs	r4, r1, #7
        _usbd_dev.ep_status[epnum][ep_dir].busy = false;
    2794:	0050      	lsls	r0, r2, #1
    2796:	4b31      	ldr	r3, [pc, #196]	; (285c <tud_task_ext+0x17c>)
    2798:	181b      	adds	r3, r3, r0
    279a:	191b      	adds	r3, r3, r4
    279c:	3328      	adds	r3, #40	; 0x28
    279e:	78d8      	ldrb	r0, [r3, #3]
    27a0:	2501      	movs	r5, #1
    27a2:	43a8      	bics	r0, r5
    27a4:	70d8      	strb	r0, [r3, #3]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
    27a6:	78d8      	ldrb	r0, [r3, #3]
    27a8:	3503      	adds	r5, #3
    27aa:	43a8      	bics	r0, r5
    27ac:	70d8      	strb	r0, [r3, #3]
        if ( 0 == epnum )
    27ae:	2a00      	cmp	r2, #0
    27b0:	d012      	beq.n	27d8 <tud_task_ext+0xf8>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
    27b2:	0052      	lsls	r2, r2, #1
    27b4:	4b29      	ldr	r3, [pc, #164]	; (285c <tud_task_ext+0x17c>)
    27b6:	189a      	adds	r2, r3, r2
    27b8:	1912      	adds	r2, r2, r4
    27ba:	7ed3      	ldrb	r3, [r2, #27]
  if ( usbd_app_driver_get_cb )
    27bc:	4a2d      	ldr	r2, [pc, #180]	; (2874 <tud_task_ext+0x194>)
    27be:	2a00      	cmp	r2, #0
    27c0:	d013      	beq.n	27ea <tud_task_ext+0x10a>
    if ( drvid < _app_driver_count ) return &_app_driver[drvid];
    27c2:	4a26      	ldr	r2, [pc, #152]	; (285c <tud_task_ext+0x17c>)
    27c4:	7912      	ldrb	r2, [r2, #4]
    27c6:	4293      	cmp	r3, r2
    27c8:	d20d      	bcs.n	27e6 <tud_task_ext+0x106>
    27ca:	005a      	lsls	r2, r3, #1
    27cc:	18d3      	adds	r3, r2, r3
    27ce:	00da      	lsls	r2, r3, #3
    27d0:	4b22      	ldr	r3, [pc, #136]	; (285c <tud_task_ext+0x17c>)
    27d2:	681b      	ldr	r3, [r3, #0]
    27d4:	189b      	adds	r3, r3, r2
    27d6:	e00f      	b.n	27f8 <tud_task_ext+0x118>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    27d8:	a801      	add	r0, sp, #4
    27da:	7942      	ldrb	r2, [r0, #5]
    27dc:	9b03      	ldr	r3, [sp, #12]
    27de:	7800      	ldrb	r0, [r0, #0]
    27e0:	4c25      	ldr	r4, [pc, #148]	; (2878 <tud_task_ext+0x198>)
    27e2:	47a0      	blx	r4
    27e4:	e78b      	b.n	26fe <tud_task_ext+0x1e>
    drvid -= _app_driver_count;
    27e6:	1a9b      	subs	r3, r3, r2
    27e8:	b2db      	uxtb	r3, r3
  if (drvid < BUILTIN_DRIVER_COUNT) return &_usbd_driver[drvid];
    27ea:	2b00      	cmp	r3, #0
    27ec:	d10e      	bne.n	280c <tud_task_ext+0x12c>
    27ee:	005a      	lsls	r2, r3, #1
    27f0:	18d3      	adds	r3, r2, r3
    27f2:	00da      	lsls	r2, r3, #3
    27f4:	4b21      	ldr	r3, [pc, #132]	; (287c <tud_task_ext+0x19c>)
    27f6:	189b      	adds	r3, r3, r2
          TU_ASSERT(driver, );
    27f8:	2b00      	cmp	r3, #0
    27fa:	d100      	bne.n	27fe <tud_task_ext+0x11e>
    27fc:	e776      	b.n	26ec <tud_task_ext+0xc>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t)event.xfer_complete.result, event.xfer_complete.len);
    27fe:	691c      	ldr	r4, [r3, #16]
    2800:	a801      	add	r0, sp, #4
    2802:	7942      	ldrb	r2, [r0, #5]
    2804:	9b03      	ldr	r3, [sp, #12]
    2806:	7800      	ldrb	r0, [r0, #0]
    2808:	47a0      	blx	r4
    280a:	e778      	b.n	26fe <tud_task_ext+0x1e>
  return NULL;
    280c:	2300      	movs	r3, #0
    280e:	e7f3      	b.n	27f8 <tud_task_ext+0x118>
        if ( _usbd_dev.connected )
    2810:	4b12      	ldr	r3, [pc, #72]	; (285c <tud_task_ext+0x17c>)
    2812:	7a1b      	ldrb	r3, [r3, #8]
    2814:	07db      	lsls	r3, r3, #31
    2816:	d400      	bmi.n	281a <tud_task_ext+0x13a>
    2818:	e771      	b.n	26fe <tud_task_ext+0x1e>
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
    281a:	4b19      	ldr	r3, [pc, #100]	; (2880 <tud_task_ext+0x1a0>)
    281c:	2b00      	cmp	r3, #0
    281e:	d100      	bne.n	2822 <tud_task_ext+0x142>
    2820:	e76d      	b.n	26fe <tud_task_ext+0x1e>
    2822:	4b0e      	ldr	r3, [pc, #56]	; (285c <tud_task_ext+0x17c>)
    2824:	7a18      	ldrb	r0, [r3, #8]
    2826:	0700      	lsls	r0, r0, #28
    2828:	0fc0      	lsrs	r0, r0, #31
    282a:	4b15      	ldr	r3, [pc, #84]	; (2880 <tud_task_ext+0x1a0>)
    282c:	4798      	blx	r3
    282e:	e766      	b.n	26fe <tud_task_ext+0x1e>
        if ( _usbd_dev.connected )
    2830:	4b0a      	ldr	r3, [pc, #40]	; (285c <tud_task_ext+0x17c>)
    2832:	7a1b      	ldrb	r3, [r3, #8]
    2834:	07db      	lsls	r3, r3, #31
    2836:	d400      	bmi.n	283a <tud_task_ext+0x15a>
    2838:	e761      	b.n	26fe <tud_task_ext+0x1e>
          if (tud_resume_cb) tud_resume_cb();
    283a:	4b12      	ldr	r3, [pc, #72]	; (2884 <tud_task_ext+0x1a4>)
    283c:	2b00      	cmp	r3, #0
    283e:	d100      	bne.n	2842 <tud_task_ext+0x162>
    2840:	e75d      	b.n	26fe <tud_task_ext+0x1e>
    2842:	4798      	blx	r3
    2844:	e75b      	b.n	26fe <tud_task_ext+0x1e>
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
    2846:	9b02      	ldr	r3, [sp, #8]
    2848:	2b00      	cmp	r3, #0
    284a:	d100      	bne.n	284e <tud_task_ext+0x16e>
    284c:	e757      	b.n	26fe <tud_task_ext+0x1e>
    284e:	9803      	ldr	r0, [sp, #12]
    2850:	4798      	blx	r3
  {
    2852:	e754      	b.n	26fe <tud_task_ext+0x1e>
    2854:	00004405 	.word	0x00004405
    2858:	00001b49 	.word	0x00001b49
    285c:	20000960 	.word	0x20000960
    2860:	000019f5 	.word	0x000019f5
    2864:	00004eb8 	.word	0x00004eb8
    2868:	00000000 	.word	0x00000000
    286c:	00002321 	.word	0x00002321
    2870:	00002e0d 	.word	0x00002e0d
    2874:	00000000 	.word	0x00000000
    2878:	000029f5 	.word	0x000029f5
    287c:	00004edc 	.word	0x00004edc
	...

00002888 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
    2888:	b570      	push	{r4, r5, r6, lr}
    288a:	0004      	movs	r4, r0
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
    288c:	4b12      	ldr	r3, [pc, #72]	; (28d8 <_data_stage_xact+0x50>)
    288e:	3340      	adds	r3, #64	; 0x40
    2890:	8999      	ldrh	r1, [r3, #12]
    2892:	89db      	ldrh	r3, [r3, #14]
    2894:	1ac9      	subs	r1, r1, r3
    2896:	b289      	uxth	r1, r1
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
    2898:	1c0d      	adds	r5, r1, #0
    289a:	2940      	cmp	r1, #64	; 0x40
    289c:	d900      	bls.n	28a0 <_data_stage_xact+0x18>
    289e:	2540      	movs	r5, #64	; 0x40
    28a0:	b2ad      	uxth	r5, r5

  uint8_t ep_addr = EDPT_CTRL_OUT;

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
    28a2:	2340      	movs	r3, #64	; 0x40
    28a4:	4a0c      	ldr	r2, [pc, #48]	; (28d8 <_data_stage_xact+0x50>)
    28a6:	56d3      	ldrsb	r3, [r2, r3]
    28a8:	2b00      	cmp	r3, #0
    28aa:	db08      	blt.n	28be <_data_stage_xact+0x36>
  uint8_t ep_addr = EDPT_CTRL_OUT;
    28ac:	2100      	movs	r1, #0
  {
    ep_addr = EDPT_CTRL_IN;
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    28ae:	2d00      	cmp	r5, #0
    28b0:	d110      	bne.n	28d4 <_data_stage_xact+0x4c>
    28b2:	2200      	movs	r2, #0
    28b4:	002b      	movs	r3, r5
    28b6:	0020      	movs	r0, r4
    28b8:	4c08      	ldr	r4, [pc, #32]	; (28dc <_data_stage_xact+0x54>)
    28ba:	47a0      	blx	r4
}
    28bc:	bd70      	pop	{r4, r5, r6, pc}
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    28be:	2d00      	cmp	r5, #0
    28c0:	d101      	bne.n	28c6 <_data_stage_xact+0x3e>
    ep_addr = EDPT_CTRL_IN;
    28c2:	2180      	movs	r1, #128	; 0x80
    28c4:	e7f3      	b.n	28ae <_data_stage_xact+0x26>
    if ( xact_len ) memcpy(_usbd_ctrl_buf, _ctrl_xfer.buffer, xact_len);
    28c6:	0010      	movs	r0, r2
    28c8:	002a      	movs	r2, r5
    28ca:	6c81      	ldr	r1, [r0, #72]	; 0x48
    28cc:	4b04      	ldr	r3, [pc, #16]	; (28e0 <_data_stage_xact+0x58>)
    28ce:	4798      	blx	r3
    ep_addr = EDPT_CTRL_IN;
    28d0:	2180      	movs	r1, #128	; 0x80
    28d2:	e7ec      	b.n	28ae <_data_stage_xact+0x26>
  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
    28d4:	4a00      	ldr	r2, [pc, #0]	; (28d8 <_data_stage_xact+0x50>)
    28d6:	e7ed      	b.n	28b4 <_data_stage_xact+0x2c>
    28d8:	200009a0 	.word	0x200009a0
    28dc:	000021f1 	.word	0x000021f1
    28e0:	00004961 	.word	0x00004961

000028e4 <tud_control_status>:
{
    28e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28e6:	0006      	movs	r6, r0
    28e8:	000d      	movs	r5, r1
  _ctrl_xfer.request       = (*request);
    28ea:	4f0c      	ldr	r7, [pc, #48]	; (291c <tud_control_status+0x38>)
    28ec:	003c      	movs	r4, r7
    28ee:	3440      	adds	r4, #64	; 0x40
    28f0:	2208      	movs	r2, #8
    28f2:	0020      	movs	r0, r4
    28f4:	4b0a      	ldr	r3, [pc, #40]	; (2920 <tud_control_status+0x3c>)
    28f6:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    28f8:	2300      	movs	r3, #0
    28fa:	64bb      	str	r3, [r7, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    28fc:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    28fe:	81a3      	strh	r3, [r4, #12]
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2900:	2300      	movs	r3, #0
    2902:	56eb      	ldrsb	r3, [r5, r3]
    2904:	2b00      	cmp	r3, #0
    2906:	db06      	blt.n	2916 <tud_control_status+0x32>
    2908:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    290a:	2300      	movs	r3, #0
    290c:	2200      	movs	r2, #0
    290e:	0030      	movs	r0, r6
    2910:	4c04      	ldr	r4, [pc, #16]	; (2924 <tud_control_status+0x40>)
    2912:	47a0      	blx	r4
}
    2914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2916:	2100      	movs	r1, #0
    2918:	e7f7      	b.n	290a <tud_control_status+0x26>
    291a:	46c0      	nop			; (mov r8, r8)
    291c:	200009a0 	.word	0x200009a0
    2920:	00004961 	.word	0x00004961
    2924:	000021f1 	.word	0x000021f1

00002928 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
    2928:	b5f0      	push	{r4, r5, r6, r7, lr}
    292a:	b083      	sub	sp, #12
    292c:	9001      	str	r0, [sp, #4]
    292e:	000e      	movs	r6, r1
    2930:	0017      	movs	r7, r2
    2932:	9300      	str	r3, [sp, #0]
  _ctrl_xfer.request       = (*request);
    2934:	4c19      	ldr	r4, [pc, #100]	; (299c <tud_control_xfer+0x74>)
    2936:	0025      	movs	r5, r4
    2938:	3540      	adds	r5, #64	; 0x40
    293a:	2208      	movs	r2, #8
    293c:	0028      	movs	r0, r5
    293e:	4b18      	ldr	r3, [pc, #96]	; (29a0 <tud_control_xfer+0x78>)
    2940:	4798      	blx	r3
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
    2942:	64a7      	str	r7, [r4, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0U;
    2944:	2300      	movs	r3, #0
    2946:	81eb      	strh	r3, [r5, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
    2948:	79b2      	ldrb	r2, [r6, #6]
    294a:	79f3      	ldrb	r3, [r6, #7]
    294c:	021b      	lsls	r3, r3, #8
    294e:	4313      	orrs	r3, r2
    2950:	1c1a      	adds	r2, r3, #0
    2952:	9800      	ldr	r0, [sp, #0]
    2954:	4283      	cmp	r3, r0
    2956:	d900      	bls.n	295a <tud_control_xfer+0x32>
    2958:	1c02      	adds	r2, r0, #0
    295a:	b291      	uxth	r1, r2
    295c:	4b0f      	ldr	r3, [pc, #60]	; (299c <tud_control_xfer+0x74>)
    295e:	3340      	adds	r3, #64	; 0x40
    2960:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
    2962:	79b2      	ldrb	r2, [r6, #6]
    2964:	79f3      	ldrb	r3, [r6, #7]
    2966:	021b      	lsls	r3, r3, #8
    2968:	4313      	orrs	r3, r2
    296a:	d007      	beq.n	297c <tud_control_xfer+0x54>
  {
    if(_ctrl_xfer.data_len > 0U)
    296c:	2900      	cmp	r1, #0
    296e:	d001      	beq.n	2974 <tud_control_xfer+0x4c>
    {
      TU_ASSERT(buffer);
    2970:	2f00      	cmp	r7, #0
    2972:	d011      	beq.n	2998 <tud_control_xfer+0x70>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
    2974:	9801      	ldr	r0, [sp, #4]
    2976:	4b0b      	ldr	r3, [pc, #44]	; (29a4 <tud_control_xfer+0x7c>)
    2978:	4798      	blx	r3
    297a:	e009      	b.n	2990 <tud_control_xfer+0x68>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    297c:	2300      	movs	r3, #0
    297e:	56f3      	ldrsb	r3, [r6, r3]
    2980:	2b00      	cmp	r3, #0
    2982:	db07      	blt.n	2994 <tud_control_xfer+0x6c>
    2984:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    2986:	2300      	movs	r3, #0
    2988:	2200      	movs	r2, #0
    298a:	9801      	ldr	r0, [sp, #4]
    298c:	4c06      	ldr	r4, [pc, #24]	; (29a8 <tud_control_xfer+0x80>)
    298e:	47a0      	blx	r4
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
  }

  return true;
}
    2990:	b003      	add	sp, #12
    2992:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2994:	2100      	movs	r1, #0
    2996:	e7f6      	b.n	2986 <tud_control_xfer+0x5e>
      TU_ASSERT(buffer);
    2998:	2000      	movs	r0, #0
    299a:	e7f9      	b.n	2990 <tud_control_xfer+0x68>
    299c:	200009a0 	.word	0x200009a0
    29a0:	00004961 	.word	0x00004961
    29a4:	00002889 	.word	0x00002889
    29a8:	000021f1 	.word	0x000021f1

000029ac <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
    29ac:	b510      	push	{r4, lr}
  tu_varclr(&_ctrl_xfer);
    29ae:	2214      	movs	r2, #20
    29b0:	2100      	movs	r1, #0
    29b2:	4802      	ldr	r0, [pc, #8]	; (29bc <usbd_control_reset+0x10>)
    29b4:	3040      	adds	r0, #64	; 0x40
    29b6:	4b02      	ldr	r3, [pc, #8]	; (29c0 <usbd_control_reset+0x14>)
    29b8:	4798      	blx	r3
}
    29ba:	bd10      	pop	{r4, pc}
    29bc:	200009a0 	.word	0x200009a0
    29c0:	000049e5 	.word	0x000049e5

000029c4 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
  _ctrl_xfer.complete_cb = fp;
    29c4:	4b01      	ldr	r3, [pc, #4]	; (29cc <usbd_control_set_complete_callback+0x8>)
    29c6:	6518      	str	r0, [r3, #80]	; 0x50
}
    29c8:	4770      	bx	lr
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	200009a0 	.word	0x200009a0

000029d0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
    29d0:	b570      	push	{r4, r5, r6, lr}
    29d2:	0001      	movs	r1, r0
  _ctrl_xfer.request       = (*request);
    29d4:	4d05      	ldr	r5, [pc, #20]	; (29ec <usbd_control_set_request+0x1c>)
    29d6:	002c      	movs	r4, r5
    29d8:	3440      	adds	r4, #64	; 0x40
    29da:	2208      	movs	r2, #8
    29dc:	0020      	movs	r0, r4
    29de:	4b04      	ldr	r3, [pc, #16]	; (29f0 <usbd_control_set_request+0x20>)
    29e0:	4798      	blx	r3
  _ctrl_xfer.buffer        = NULL;
    29e2:	2300      	movs	r3, #0
    29e4:	64ab      	str	r3, [r5, #72]	; 0x48
  _ctrl_xfer.total_xferred = 0;
    29e6:	81e3      	strh	r3, [r4, #14]
  _ctrl_xfer.data_len      = 0;
    29e8:	81a3      	strh	r3, [r4, #12]
}
    29ea:	bd70      	pop	{r4, r5, r6, pc}
    29ec:	200009a0 	.word	0x200009a0
    29f0:	00004961 	.word	0x00004961

000029f4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
    29f4:	b570      	push	{r4, r5, r6, lr}
    29f6:	0004      	movs	r4, r0
    29f8:	001d      	movs	r5, r3
    29fa:	09c9      	lsrs	r1, r1, #7
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
    29fc:	2340      	movs	r3, #64	; 0x40
    29fe:	4a31      	ldr	r2, [pc, #196]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a00:	5cd3      	ldrb	r3, [r2, r3]
    2a02:	09db      	lsrs	r3, r3, #7
    2a04:	428b      	cmp	r3, r1
    2a06:	d012      	beq.n	2a2e <usbd_control_xfer_cb+0x3a>
  {
    TU_ASSERT(0 == xferred_bytes);
    2a08:	2d00      	cmp	r5, #0
    2a0a:	d155      	bne.n	2ab8 <usbd_control_xfer_cb+0xc4>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
    2a0c:	4b2e      	ldr	r3, [pc, #184]	; (2ac8 <usbd_control_xfer_cb+0xd4>)
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d002      	beq.n	2a18 <usbd_control_xfer_cb+0x24>
    2a12:	0011      	movs	r1, r2
    2a14:	3140      	adds	r1, #64	; 0x40
    2a16:	4798      	blx	r3

    if (_ctrl_xfer.complete_cb)
    2a18:	4b2a      	ldr	r3, [pc, #168]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2a1c:	2b00      	cmp	r3, #0
    2a1e:	d04d      	beq.n	2abc <usbd_control_xfer_cb+0xc8>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
    2a20:	4a28      	ldr	r2, [pc, #160]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a22:	3240      	adds	r2, #64	; 0x40
    2a24:	2103      	movs	r1, #3
    2a26:	0020      	movs	r0, r4
    2a28:	4798      	blx	r3
    }

    return true;
    2a2a:	2001      	movs	r0, #1
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
  }

  return true;
}
    2a2c:	bd70      	pop	{r4, r5, r6, pc}
  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
    2a2e:	2340      	movs	r3, #64	; 0x40
    2a30:	4a24      	ldr	r2, [pc, #144]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a32:	56d3      	ldrsb	r3, [r2, r3]
    2a34:	2b00      	cmp	r3, #0
    2a36:	db07      	blt.n	2a48 <usbd_control_xfer_cb+0x54>
    TU_VERIFY(_ctrl_xfer.buffer);
    2a38:	0013      	movs	r3, r2
    2a3a:	6c90      	ldr	r0, [r2, #72]	; 0x48
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d03f      	beq.n	2ac0 <usbd_control_xfer_cb+0xcc>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
    2a40:	002a      	movs	r2, r5
    2a42:	0019      	movs	r1, r3
    2a44:	4b21      	ldr	r3, [pc, #132]	; (2acc <usbd_control_xfer_cb+0xd8>)
    2a46:	4798      	blx	r3
  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
    2a48:	b2aa      	uxth	r2, r5
    2a4a:	481e      	ldr	r0, [pc, #120]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a4c:	0001      	movs	r1, r0
    2a4e:	3140      	adds	r1, #64	; 0x40
    2a50:	89cb      	ldrh	r3, [r1, #14]
    2a52:	18d3      	adds	r3, r2, r3
    2a54:	b29b      	uxth	r3, r3
    2a56:	81cb      	strh	r3, [r1, #14]
  _ctrl_xfer.buffer += xferred_bytes;
    2a58:	6c82      	ldr	r2, [r0, #72]	; 0x48
    2a5a:	1952      	adds	r2, r2, r5
    2a5c:	6482      	str	r2, [r0, #72]	; 0x48
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
    2a5e:	88ca      	ldrh	r2, [r1, #6]
    2a60:	4293      	cmp	r3, r2
    2a62:	d001      	beq.n	2a68 <usbd_control_xfer_cb+0x74>
    2a64:	2d3f      	cmp	r5, #63	; 0x3f
    2a66:	d823      	bhi.n	2ab0 <usbd_control_xfer_cb+0xbc>
    if ( _ctrl_xfer.complete_cb )
    2a68:	4b16      	ldr	r3, [pc, #88]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d012      	beq.n	2a96 <usbd_control_xfer_cb+0xa2>
      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
    2a70:	4a14      	ldr	r2, [pc, #80]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a72:	3240      	adds	r2, #64	; 0x40
    2a74:	2102      	movs	r1, #2
    2a76:	0020      	movs	r0, r4
    2a78:	4798      	blx	r3
    if ( is_ok )
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d00f      	beq.n	2a9e <usbd_control_xfer_cb+0xaa>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2a7e:	2340      	movs	r3, #64	; 0x40
    2a80:	4a10      	ldr	r2, [pc, #64]	; (2ac4 <usbd_control_xfer_cb+0xd0>)
    2a82:	56d3      	ldrsb	r3, [r2, r3]
    2a84:	2b00      	cmp	r3, #0
    2a86:	db08      	blt.n	2a9a <usbd_control_xfer_cb+0xa6>
    2a88:	2180      	movs	r1, #128	; 0x80
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
    2a8a:	2300      	movs	r3, #0
    2a8c:	2200      	movs	r2, #0
    2a8e:	0020      	movs	r0, r4
    2a90:	4c0f      	ldr	r4, [pc, #60]	; (2ad0 <usbd_control_xfer_cb+0xdc>)
    2a92:	47a0      	blx	r4
    2a94:	e7ca      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    bool is_ok = true;
    2a96:	2001      	movs	r0, #1
    2a98:	e7ef      	b.n	2a7a <usbd_control_xfer_cb+0x86>
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
    2a9a:	2100      	movs	r1, #0
    2a9c:	e7f5      	b.n	2a8a <usbd_control_xfer_cb+0x96>
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
    2a9e:	2100      	movs	r1, #0
    2aa0:	0020      	movs	r0, r4
    2aa2:	4d0c      	ldr	r5, [pc, #48]	; (2ad4 <usbd_control_xfer_cb+0xe0>)
    2aa4:	47a8      	blx	r5
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
    2aa6:	2180      	movs	r1, #128	; 0x80
    2aa8:	0020      	movs	r0, r4
    2aaa:	47a8      	blx	r5
  return true;
    2aac:	2001      	movs	r0, #1
    2aae:	e7bd      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    TU_ASSERT( _data_stage_xact(rhport) );
    2ab0:	0020      	movs	r0, r4
    2ab2:	4b09      	ldr	r3, [pc, #36]	; (2ad8 <usbd_control_xfer_cb+0xe4>)
    2ab4:	4798      	blx	r3
    2ab6:	e7b9      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    TU_ASSERT(0 == xferred_bytes);
    2ab8:	2000      	movs	r0, #0
    2aba:	e7b7      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    return true;
    2abc:	2001      	movs	r0, #1
    2abe:	e7b5      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    TU_VERIFY(_ctrl_xfer.buffer);
    2ac0:	2000      	movs	r0, #0
    2ac2:	e7b3      	b.n	2a2c <usbd_control_xfer_cb+0x38>
    2ac4:	200009a0 	.word	0x200009a0
    2ac8:	00002c15 	.word	0x00002c15
    2acc:	00004961 	.word	0x00004961
    2ad0:	000021f1 	.word	0x000021f1
    2ad4:	00002e0d 	.word	0x00002e0d
    2ad8:	00002889 	.word	0x00002889

00002adc <bus_reset>:
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
}

// Setup the control endpoint 0.
static void bus_reset(void)
{
    2adc:	b510      	push	{r4, lr}
  // Max size of packets is 64 bytes.
  UsbDeviceDescBank* bank_out = &sram_registers[0][TUSB_DIR_OUT];
  bank_out->PCKSIZE.bit.SIZE = 0x3;
    2ade:	4b10      	ldr	r3, [pc, #64]	; (2b20 <bus_reset+0x44>)
    2ae0:	6858      	ldr	r0, [r3, #4]
    2ae2:	4c10      	ldr	r4, [pc, #64]	; (2b24 <bus_reset+0x48>)
    2ae4:	4020      	ands	r0, r4
    2ae6:	22c0      	movs	r2, #192	; 0xc0
    2ae8:	0592      	lsls	r2, r2, #22
    2aea:	0001      	movs	r1, r0
    2aec:	4311      	orrs	r1, r2
    2aee:	6059      	str	r1, [r3, #4]
  UsbDeviceDescBank* bank_in = &sram_registers[0][TUSB_DIR_IN];
  bank_in->PCKSIZE.bit.SIZE = 0x3;
    2af0:	6959      	ldr	r1, [r3, #20]
    2af2:	4021      	ands	r1, r4
    2af4:	430a      	orrs	r2, r1
    2af6:	615a      	str	r2, [r3, #20]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[0];
  ep->EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0x1) | USB_DEVICE_EPCFG_EPTYPE1(0x1);
    2af8:	4a0b      	ldr	r2, [pc, #44]	; (2b28 <bus_reset+0x4c>)
    2afa:	2111      	movs	r1, #17
    2afc:	7011      	strb	r1, [r2, #0]
  ep->EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1 | USB_DEVICE_EPINTENSET_RXSTP;
    2afe:	3102      	adds	r1, #2
    2b00:	7251      	strb	r1, [r2, #9]
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2b02:	4a0a      	ldr	r2, [pc, #40]	; (2b2c <bus_reset+0x50>)
    2b04:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2b06:	6859      	ldr	r1, [r3, #4]
    2b08:	4a09      	ldr	r2, [pc, #36]	; (2b30 <bus_reset+0x54>)
    2b0a:	4011      	ands	r1, r2
    2b0c:	2280      	movs	r2, #128	; 0x80
    2b0e:	0292      	lsls	r2, r2, #10
    2b10:	430a      	orrs	r2, r1
    2b12:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2b14:	685a      	ldr	r2, [r3, #4]
    2b16:	0b92      	lsrs	r2, r2, #14
    2b18:	0391      	lsls	r1, r2, #14
    2b1a:	6059      	str	r1, [r3, #4]

  // Prepare for setup packet
  prepare_setup();
}
    2b1c:	bd10      	pop	{r4, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	200009f4 	.word	0x200009f4
    2b24:	8fffffff 	.word	0x8fffffff
    2b28:	41005100 	.word	0x41005100
    2b2c:	20000af4 	.word	0x20000af4
    2b30:	f0003fff 	.word	0xf0003fff

00002b34 <dcd_init>:

/*------------------------------------------------------------------*/
/* Controller API
 *------------------------------------------------------------------*/
void dcd_init (uint8_t rhport)
{
    2b34:	b530      	push	{r4, r5, lr}
  (void) rhport;

  // Reset to get in a clean state.
  USB->DEVICE.CTRLA.bit.SWRST = true;
    2b36:	4a21      	ldr	r2, [pc, #132]	; (2bbc <dcd_init+0x88>)
    2b38:	7813      	ldrb	r3, [r2, #0]
    2b3a:	2101      	movs	r1, #1
    2b3c:	430b      	orrs	r3, r1
    2b3e:	7013      	strb	r3, [r2, #0]
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 0) {}
    2b40:	4b1e      	ldr	r3, [pc, #120]	; (2bbc <dcd_init+0x88>)
    2b42:	789b      	ldrb	r3, [r3, #2]
    2b44:	07db      	lsls	r3, r3, #31
    2b46:	d5fb      	bpl.n	2b40 <dcd_init+0xc>
  while (USB->DEVICE.SYNCBUSY.bit.SWRST == 1) {}
    2b48:	4b1c      	ldr	r3, [pc, #112]	; (2bbc <dcd_init+0x88>)
    2b4a:	789b      	ldrb	r3, [r3, #2]
    2b4c:	07db      	lsls	r3, r3, #31
    2b4e:	d4fb      	bmi.n	2b48 <dcd_init+0x14>

  USB->DEVICE.PADCAL.bit.TRANSP = (*((uint32_t*) USB_FUSES_TRANSP_ADDR) & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    2b50:	4b1b      	ldr	r3, [pc, #108]	; (2bc0 <dcd_init+0x8c>)
    2b52:	6819      	ldr	r1, [r3, #0]
    2b54:	0c88      	lsrs	r0, r1, #18
    2b56:	221f      	movs	r2, #31
    2b58:	4010      	ands	r0, r2
    2b5a:	4b18      	ldr	r3, [pc, #96]	; (2bbc <dcd_init+0x88>)
    2b5c:	8d1c      	ldrh	r4, [r3, #40]	; 0x28
    2b5e:	251f      	movs	r5, #31
    2b60:	43ac      	bics	r4, r5
    2b62:	4320      	orrs	r0, r4
    2b64:	8518      	strh	r0, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRANSN = (*((uint32_t*) USB_FUSES_TRANSN_ADDR) & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    2b66:	0b4c      	lsrs	r4, r1, #13
    2b68:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    2b6a:	4022      	ands	r2, r4
    2b6c:	0192      	lsls	r2, r2, #6
    2b6e:	4c15      	ldr	r4, [pc, #84]	; (2bc4 <dcd_init+0x90>)
    2b70:	4020      	ands	r0, r4
    2b72:	4302      	orrs	r2, r0
    2b74:	851a      	strh	r2, [r3, #40]	; 0x28
  USB->DEVICE.PADCAL.bit.TRIM   = (*((uint32_t*) USB_FUSES_TRIM_ADDR) & USB_FUSES_TRIM_Msk) >> USB_FUSES_TRIM_Pos;
    2b76:	0dc8      	lsrs	r0, r1, #23
    2b78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    2b7a:	2107      	movs	r1, #7
    2b7c:	4001      	ands	r1, r0
    2b7e:	0309      	lsls	r1, r1, #12
    2b80:	4811      	ldr	r0, [pc, #68]	; (2bc8 <dcd_init+0x94>)
    2b82:	4002      	ands	r2, r0
    2b84:	430a      	orrs	r2, r1
    2b86:	851a      	strh	r2, [r3, #40]	; 0x28

  USB->DEVICE.QOSCTRL.bit.CQOS = 3; // High Quality
    2b88:	78da      	ldrb	r2, [r3, #3]
    2b8a:	2103      	movs	r1, #3
    2b8c:	430a      	orrs	r2, r1
    2b8e:	70da      	strb	r2, [r3, #3]
  USB->DEVICE.QOSCTRL.bit.DQOS = 3; // High Quality
    2b90:	78da      	ldrb	r2, [r3, #3]
    2b92:	210c      	movs	r1, #12
    2b94:	430a      	orrs	r2, r1
    2b96:	70da      	strb	r2, [r3, #3]

  // Configure registers
  USB->DEVICE.DESCADD.reg = (uint32_t) &sram_registers;
    2b98:	4a0c      	ldr	r2, [pc, #48]	; (2bcc <dcd_init+0x98>)
    2b9a:	625a      	str	r2, [r3, #36]	; 0x24
  USB->DEVICE.CTRLB.reg = USB_DEVICE_CTRLB_SPDCONF_FS;
    2b9c:	2200      	movs	r2, #0
    2b9e:	811a      	strh	r2, [r3, #8]
  USB->DEVICE.CTRLA.reg = USB_CTRLA_MODE_DEVICE | USB_CTRLA_ENABLE | USB_CTRLA_RUNSTDBY;
    2ba0:	3206      	adds	r2, #6
    2ba2:	701a      	strb	r2, [r3, #0]
  while (USB->DEVICE.SYNCBUSY.bit.ENABLE == 1) {}
    2ba4:	4b05      	ldr	r3, [pc, #20]	; (2bbc <dcd_init+0x88>)
    2ba6:	789b      	ldrb	r3, [r3, #2]
    2ba8:	079b      	lsls	r3, r3, #30
    2baa:	d4fb      	bmi.n	2ba4 <dcd_init+0x70>

  USB->DEVICE.INTFLAG.reg |= USB->DEVICE.INTFLAG.reg; // clear pending
    2bac:	4b03      	ldr	r3, [pc, #12]	; (2bbc <dcd_init+0x88>)
    2bae:	8b99      	ldrh	r1, [r3, #28]
    2bb0:	8b9a      	ldrh	r2, [r3, #28]
    2bb2:	430a      	orrs	r2, r1
    2bb4:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = /* USB_DEVICE_INTENSET_SOF | */ USB_DEVICE_INTENSET_EORST;
    2bb6:	2208      	movs	r2, #8
    2bb8:	831a      	strh	r2, [r3, #24]
}
    2bba:	bd30      	pop	{r4, r5, pc}
    2bbc:	41005000 	.word	0x41005000
    2bc0:	00806024 	.word	0x00806024
    2bc4:	fffff83f 	.word	0xfffff83f
    2bc8:	ffff8fff 	.word	0xffff8fff
    2bcc:	200009f4 	.word	0x200009f4

00002bd0 <dcd_int_enable>:
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bd0:	2280      	movs	r2, #128	; 0x80
    2bd2:	4b01      	ldr	r3, [pc, #4]	; (2bd8 <dcd_int_enable+0x8>)
    2bd4:	601a      	str	r2, [r3, #0]

void dcd_int_enable(uint8_t rhport)
{
  (void) rhport;
  NVIC_EnableIRQ(USB_IRQn);
}
    2bd6:	4770      	bx	lr
    2bd8:	e000e100 	.word	0xe000e100

00002bdc <dcd_int_disable>:
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bdc:	2380      	movs	r3, #128	; 0x80
    2bde:	4a03      	ldr	r2, [pc, #12]	; (2bec <dcd_int_disable+0x10>)
    2be0:	50d3      	str	r3, [r2, r3]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2be6:	f3bf 8f6f 	isb	sy

void dcd_int_disable(uint8_t rhport)
{
  (void) rhport;
  NVIC_DisableIRQ(USB_IRQn);
}
    2bea:	4770      	bx	lr
    2bec:	e000e100 	.word	0xe000e100

00002bf0 <dcd_disconnect>:

// disconnect by disabling internal pull-up resistor on D+/D-
void dcd_disconnect(uint8_t rhport)
{
  (void) rhport;
  USB->DEVICE.CTRLB.reg |= USB_DEVICE_CTRLB_DETACH;
    2bf0:	4a03      	ldr	r2, [pc, #12]	; (2c00 <dcd_disconnect+0x10>)
    2bf2:	8913      	ldrh	r3, [r2, #8]
    2bf4:	2101      	movs	r1, #1
    2bf6:	430b      	orrs	r3, r1
    2bf8:	b29b      	uxth	r3, r3
    2bfa:	8113      	strh	r3, [r2, #8]
}
    2bfc:	4770      	bx	lr
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	41005000 	.word	0x41005000

00002c04 <dcd_connect>:

// connect by enabling internal pull-up resistor on D+/D-
void dcd_connect(uint8_t rhport)
{
  (void) rhport;
   USB->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    2c04:	4a02      	ldr	r2, [pc, #8]	; (2c10 <dcd_connect+0xc>)
    2c06:	8913      	ldrh	r3, [r2, #8]
    2c08:	2101      	movs	r1, #1
    2c0a:	438b      	bics	r3, r1
    2c0c:	8113      	strh	r3, [r2, #8]
}
    2c0e:	4770      	bx	lr
    2c10:	41005000 	.word	0x41005000

00002c14 <dcd_edpt0_status_complete>:
// May help DCD to prepare for next control transfer, this API is optional.
void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const * request)
{
  (void) rhport;

  if (request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_DEVICE &&
    2c14:	780b      	ldrb	r3, [r1, #0]
    2c16:	065b      	lsls	r3, r3, #25
    2c18:	d102      	bne.n	2c20 <dcd_edpt0_status_complete+0xc>
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
      request->bRequest == TUSB_REQ_SET_ADDRESS )
    2c1a:	784b      	ldrb	r3, [r1, #1]
      request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD &&
    2c1c:	2b05      	cmp	r3, #5
    2c1e:	d00e      	beq.n	2c3e <dcd_edpt0_status_complete+0x2a>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2c20:	4b0a      	ldr	r3, [pc, #40]	; (2c4c <dcd_edpt0_status_complete+0x38>)
    2c22:	4a0b      	ldr	r2, [pc, #44]	; (2c50 <dcd_edpt0_status_complete+0x3c>)
    2c24:	601a      	str	r2, [r3, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2c26:	6859      	ldr	r1, [r3, #4]
    2c28:	4a0a      	ldr	r2, [pc, #40]	; (2c54 <dcd_edpt0_status_complete+0x40>)
    2c2a:	4011      	ands	r1, r2
    2c2c:	2280      	movs	r2, #128	; 0x80
    2c2e:	0292      	lsls	r2, r2, #10
    2c30:	430a      	orrs	r2, r1
    2c32:	605a      	str	r2, [r3, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2c34:	685a      	ldr	r2, [r3, #4]
    2c36:	0b92      	lsrs	r2, r2, #14
    2c38:	0391      	lsls	r1, r2, #14
    2c3a:	6059      	str	r1, [r3, #4]

  // Just finished status stage, prepare for next setup packet
  // Note: we may already prepare setup when queueing the control status.
  // but it has no harm to do it again here
  prepare_setup();
}
    2c3c:	4770      	bx	lr
    uint8_t const dev_addr = (uint8_t) request->wValue;
    2c3e:	788a      	ldrb	r2, [r1, #2]
    USB->DEVICE.DADD.reg = USB_DEVICE_DADD_DADD(dev_addr) | USB_DEVICE_DADD_ADDEN;
    2c40:	3b85      	subs	r3, #133	; 0x85
    2c42:	4313      	orrs	r3, r2
    2c44:	b2db      	uxtb	r3, r3
    2c46:	4a04      	ldr	r2, [pc, #16]	; (2c58 <dcd_edpt0_status_complete+0x44>)
    2c48:	7293      	strb	r3, [r2, #10]
    2c4a:	e7e9      	b.n	2c20 <dcd_edpt0_status_complete+0xc>
    2c4c:	200009f4 	.word	0x200009f4
    2c50:	20000af4 	.word	0x20000af4
    2c54:	f0003fff 	.word	0xf0003fff
    2c58:	41005000 	.word	0x41005000

00002c5c <dcd_edpt_open>:

bool dcd_edpt_open (uint8_t rhport, tusb_desc_endpoint_t const * desc_edpt)
{
    2c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
    2c5e:	788e      	ldrb	r6, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2c60:	247f      	movs	r4, #127	; 0x7f
    2c62:	4034      	ands	r4, r6
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2c64:	b276      	sxtb	r6, r6
    2c66:	0ff7      	lsrs	r7, r6, #31
  uint8_t const dir   = tu_edpt_dir(desc_edpt->bEndpointAddress);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  uint32_t size_value = 0;
    2c68:	2200      	movs	r2, #0
  while (size_value < 7) {
    2c6a:	2a06      	cmp	r2, #6
    2c6c:	d80c      	bhi.n	2c88 <dcd_edpt_open+0x2c>
    if (1 << (size_value + 3) == tu_edpt_packet_size(desc_edpt)) {
    2c6e:	1cd3      	adds	r3, r2, #3
    2c70:	2001      	movs	r0, #1
    2c72:	4098      	lsls	r0, r3
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    2c74:	790d      	ldrb	r5, [r1, #4]
    2c76:	794b      	ldrb	r3, [r1, #5]
    2c78:	021b      	lsls	r3, r3, #8
    2c7a:	432b      	orrs	r3, r5
    2c7c:	055b      	lsls	r3, r3, #21
    2c7e:	0d5b      	lsrs	r3, r3, #21
    2c80:	4298      	cmp	r0, r3
    2c82:	d001      	beq.n	2c88 <dcd_edpt_open+0x2c>
      break;
    }
    size_value++;
    2c84:	3201      	adds	r2, #1
    2c86:	e7f0      	b.n	2c6a <dcd_edpt_open+0xe>
  }

  // unsupported endpoint size
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) != 1023 ) return false;
    2c88:	2a07      	cmp	r2, #7
    2c8a:	d026      	beq.n	2cda <dcd_edpt_open+0x7e>

  bank->PCKSIZE.bit.SIZE = size_value;
    2c8c:	0063      	lsls	r3, r4, #1
    2c8e:	19df      	adds	r7, r3, r7
    2c90:	013f      	lsls	r7, r7, #4
    2c92:	4b22      	ldr	r3, [pc, #136]	; (2d1c <dcd_edpt_open+0xc0>)
    2c94:	19df      	adds	r7, r3, r7
    2c96:	6878      	ldr	r0, [r7, #4]
    2c98:	2307      	movs	r3, #7
    2c9a:	401a      	ands	r2, r3
    2c9c:	0712      	lsls	r2, r2, #28
    2c9e:	4b20      	ldr	r3, [pc, #128]	; (2d20 <dcd_edpt_open+0xc4>)
    2ca0:	4018      	ands	r0, r3
    2ca2:	4302      	orrs	r2, r0
    2ca4:	607a      	str	r2, [r7, #4]

  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2ca6:	0164      	lsls	r4, r4, #5
    2ca8:	4b1e      	ldr	r3, [pc, #120]	; (2d24 <dcd_edpt_open+0xc8>)
    2caa:	469c      	mov	ip, r3
    2cac:	4464      	add	r4, ip

  if ( dir == TUSB_DIR_OUT )
    2cae:	2e00      	cmp	r6, #0
    2cb0:	db1e      	blt.n	2cf0 <dcd_edpt_open+0x94>
  {
    ep->EPCFG.bit.EPTYPE0 = desc_edpt->bmAttributes.xfer + 1;
    2cb2:	78cb      	ldrb	r3, [r1, #3]
    2cb4:	079b      	lsls	r3, r3, #30
    2cb6:	0f9b      	lsrs	r3, r3, #30
    2cb8:	3301      	adds	r3, #1
    2cba:	7822      	ldrb	r2, [r4, #0]
    2cbc:	2107      	movs	r1, #7
    2cbe:	4019      	ands	r1, r3
    2cc0:	2307      	movs	r3, #7
    2cc2:	439a      	bics	r2, r3
    2cc4:	0013      	movs	r3, r2
    2cc6:	430b      	orrs	r3, r1
    2cc8:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT; // clear stall & dtoggle
    2cca:	2311      	movs	r3, #17
    2ccc:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT0 = true;
    2cce:	7a63      	ldrb	r3, [r4, #9]
    2cd0:	2201      	movs	r2, #1
    2cd2:	4313      	orrs	r3, r2
    2cd4:	7263      	strb	r3, [r4, #9]
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    ep->EPINTENSET.bit.TRCPT1 = true;
  }

  return true;
    2cd6:	2001      	movs	r0, #1
}
    2cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cda:	7908      	ldrb	r0, [r1, #4]
    2cdc:	794b      	ldrb	r3, [r1, #5]
    2cde:	021b      	lsls	r3, r3, #8
    2ce0:	4303      	orrs	r3, r0
    2ce2:	055b      	lsls	r3, r3, #21
    2ce4:	0d5b      	lsrs	r3, r3, #21
  if ( size_value == 7 && tu_edpt_packet_size(desc_edpt) != 1023 ) return false;
    2ce6:	4810      	ldr	r0, [pc, #64]	; (2d28 <dcd_edpt_open+0xcc>)
    2ce8:	4283      	cmp	r3, r0
    2cea:	d0cf      	beq.n	2c8c <dcd_edpt_open+0x30>
    2cec:	2000      	movs	r0, #0
    2cee:	e7f3      	b.n	2cd8 <dcd_edpt_open+0x7c>
    ep->EPCFG.bit.EPTYPE1 = desc_edpt->bmAttributes.xfer + 1;
    2cf0:	78cb      	ldrb	r3, [r1, #3]
    2cf2:	079b      	lsls	r3, r3, #30
    2cf4:	0f9b      	lsrs	r3, r3, #30
    2cf6:	3301      	adds	r3, #1
    2cf8:	7822      	ldrb	r2, [r4, #0]
    2cfa:	2107      	movs	r1, #7
    2cfc:	4019      	ands	r1, r3
    2cfe:	0109      	lsls	r1, r1, #4
    2d00:	2370      	movs	r3, #112	; 0x70
    2d02:	439a      	bics	r2, r3
    2d04:	0013      	movs	r3, r2
    2d06:	430b      	orrs	r3, r1
    2d08:	7023      	strb	r3, [r4, #0]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN; // clear stall & dtoggle
    2d0a:	2322      	movs	r3, #34	; 0x22
    2d0c:	7123      	strb	r3, [r4, #4]
    ep->EPINTENSET.bit.TRCPT1 = true;
    2d0e:	7a63      	ldrb	r3, [r4, #9]
    2d10:	2202      	movs	r2, #2
    2d12:	4313      	orrs	r3, r2
    2d14:	7263      	strb	r3, [r4, #9]
  return true;
    2d16:	2001      	movs	r0, #1
    2d18:	e7de      	b.n	2cd8 <dcd_edpt_open+0x7c>
    2d1a:	46c0      	nop			; (mov r8, r8)
    2d1c:	200009f4 	.word	0x200009f4
    2d20:	8fffffff 	.word	0x8fffffff
    2d24:	41005100 	.word	0x41005100
    2d28:	000003ff 	.word	0x000003ff

00002d2c <dcd_edpt_close_all>:

void dcd_edpt_close_all (uint8_t rhport)
{
  (void) rhport;
  // TODO implement dcd_edpt_close_all()
}
    2d2c:	4770      	bx	lr
	...

00002d30 <dcd_edpt_xfer>:

bool dcd_edpt_xfer (uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
    2d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2d32:	207f      	movs	r0, #127	; 0x7f
    2d34:	4008      	ands	r0, r1
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2d36:	b249      	sxtb	r1, r1
    2d38:	0fcf      	lsrs	r7, r1, #31

  uint8_t const epnum = tu_edpt_number(ep_addr);
  uint8_t const dir   = tu_edpt_dir(ep_addr);

  UsbDeviceDescBank* bank = &sram_registers[epnum][dir];
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2d3a:	0145      	lsls	r5, r0, #5
    2d3c:	4c27      	ldr	r4, [pc, #156]	; (2ddc <dcd_edpt_xfer+0xac>)
    2d3e:	46a4      	mov	ip, r4
    2d40:	4465      	add	r5, ip

  bank->ADDR.reg = (uint32_t) buffer;
    2d42:	0044      	lsls	r4, r0, #1
    2d44:	19e4      	adds	r4, r4, r7
    2d46:	0124      	lsls	r4, r4, #4
    2d48:	4e25      	ldr	r6, [pc, #148]	; (2de0 <dcd_edpt_xfer+0xb0>)
    2d4a:	51a2      	str	r2, [r4, r6]

  // A SETUP token can occur immediately after an ZLP Status.
  // So make sure we have a valid buffer for setup packet.
  //   Status = ZLP EP0 with direction opposite to one in the dir bit of current setup
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d101      	bne.n	2d54 <dcd_edpt_xfer+0x24>
    2d50:	2a00      	cmp	r2, #0
    2d52:	d017      	beq.n	2d84 <dcd_edpt_xfer+0x54>
    prepare_setup();
  }

  if ( dir == TUSB_DIR_OUT )
    2d54:	2900      	cmp	r1, #0
    2d56:	db2b      	blt.n	2db0 <dcd_edpt_xfer+0x80>
  {
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = total_bytes;
    2d58:	0040      	lsls	r0, r0, #1
    2d5a:	19c0      	adds	r0, r0, r7
    2d5c:	0102      	lsls	r2, r0, #4
    2d5e:	4820      	ldr	r0, [pc, #128]	; (2de0 <dcd_edpt_xfer+0xb0>)
    2d60:	1880      	adds	r0, r0, r2
    2d62:	6842      	ldr	r2, [r0, #4]
    2d64:	049b      	lsls	r3, r3, #18
    2d66:	091b      	lsrs	r3, r3, #4
    2d68:	491e      	ldr	r1, [pc, #120]	; (2de4 <dcd_edpt_xfer+0xb4>)
    2d6a:	400a      	ands	r2, r1
    2d6c:	4313      	orrs	r3, r2
    2d6e:	6043      	str	r3, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = 0;
    2d70:	6843      	ldr	r3, [r0, #4]
    2d72:	0b9b      	lsrs	r3, r3, #14
    2d74:	039a      	lsls	r2, r3, #14
    2d76:	6042      	str	r2, [r0, #4]
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    2d78:	2340      	movs	r3, #64	; 0x40
    2d7a:	712b      	strb	r3, [r5, #4]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    2d7c:	3b3c      	subs	r3, #60	; 0x3c
    2d7e:	71eb      	strb	r3, [r5, #7]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
  }

  return true;
}
    2d80:	2001      	movs	r0, #1
    2d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (epnum == 0) && (buffer == NULL) && (total_bytes == 0) && (dir != tu_edpt_dir(_setup_packet[0])) ) {
    2d84:	2b00      	cmp	r3, #0
    2d86:	d1e5      	bne.n	2d54 <dcd_edpt_xfer+0x24>
    2d88:	4a17      	ldr	r2, [pc, #92]	; (2de8 <dcd_edpt_xfer+0xb8>)
    2d8a:	7812      	ldrb	r2, [r2, #0]
    2d8c:	09d2      	lsrs	r2, r2, #7
    2d8e:	4297      	cmp	r7, r2
    2d90:	d0e0      	beq.n	2d54 <dcd_edpt_xfer+0x24>
  sram_registers[0][0].ADDR.reg = (uint32_t) _setup_packet;
    2d92:	0032      	movs	r2, r6
    2d94:	4c14      	ldr	r4, [pc, #80]	; (2de8 <dcd_edpt_xfer+0xb8>)
    2d96:	6034      	str	r4, [r6, #0]
  sram_registers[0][0].PCKSIZE.bit.MULTI_PACKET_SIZE = sizeof(tusb_control_request_t);
    2d98:	6876      	ldr	r6, [r6, #4]
    2d9a:	4c12      	ldr	r4, [pc, #72]	; (2de4 <dcd_edpt_xfer+0xb4>)
    2d9c:	4026      	ands	r6, r4
    2d9e:	2480      	movs	r4, #128	; 0x80
    2da0:	02a4      	lsls	r4, r4, #10
    2da2:	4334      	orrs	r4, r6
    2da4:	6054      	str	r4, [r2, #4]
  sram_registers[0][0].PCKSIZE.bit.BYTE_COUNT = 0;
    2da6:	6854      	ldr	r4, [r2, #4]
    2da8:	0ba4      	lsrs	r4, r4, #14
    2daa:	03a6      	lsls	r6, r4, #14
    2dac:	6056      	str	r6, [r2, #4]
    2dae:	e7d1      	b.n	2d54 <dcd_edpt_xfer+0x24>
    bank->PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    2db0:	0040      	lsls	r0, r0, #1
    2db2:	19c0      	adds	r0, r0, r7
    2db4:	0100      	lsls	r0, r0, #4
    2db6:	4a0a      	ldr	r2, [pc, #40]	; (2de0 <dcd_edpt_xfer+0xb0>)
    2db8:	1810      	adds	r0, r2, r0
    2dba:	6841      	ldr	r1, [r0, #4]
    2dbc:	4a09      	ldr	r2, [pc, #36]	; (2de4 <dcd_edpt_xfer+0xb4>)
    2dbe:	400a      	ands	r2, r1
    2dc0:	6042      	str	r2, [r0, #4]
    bank->PCKSIZE.bit.BYTE_COUNT = total_bytes;
    2dc2:	6842      	ldr	r2, [r0, #4]
    2dc4:	049b      	lsls	r3, r3, #18
    2dc6:	0c9b      	lsrs	r3, r3, #18
    2dc8:	0b92      	lsrs	r2, r2, #14
    2dca:	0392      	lsls	r2, r2, #14
    2dcc:	4313      	orrs	r3, r2
    2dce:	6043      	str	r3, [r0, #4]
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    2dd0:	2380      	movs	r3, #128	; 0x80
    2dd2:	716b      	strb	r3, [r5, #5]
    ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    2dd4:	3b78      	subs	r3, #120	; 0x78
    2dd6:	71eb      	strb	r3, [r5, #7]
    2dd8:	e7d2      	b.n	2d80 <dcd_edpt_xfer+0x50>
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	41005100 	.word	0x41005100
    2de0:	200009f4 	.word	0x200009f4
    2de4:	f0003fff 	.word	0xf0003fff
    2de8:	20000af4 	.word	0x20000af4

00002dec <dcd_set_address>:
{
    2dec:	b510      	push	{r4, lr}
  dcd_edpt_xfer(rhport, 0x80, NULL, 0);
    2dee:	2300      	movs	r3, #0
    2df0:	2200      	movs	r2, #0
    2df2:	2180      	movs	r1, #128	; 0x80
    2df4:	4c03      	ldr	r4, [pc, #12]	; (2e04 <dcd_set_address+0x18>)
    2df6:	47a0      	blx	r4
  USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTENCLR_SUSPEND; // clear pending
    2df8:	4b03      	ldr	r3, [pc, #12]	; (2e08 <dcd_set_address+0x1c>)
    2dfa:	2201      	movs	r2, #1
    2dfc:	839a      	strh	r2, [r3, #28]
  USB->DEVICE.INTENSET.reg = USB_DEVICE_INTENSET_SUSPEND;
    2dfe:	831a      	strh	r2, [r3, #24]
}
    2e00:	bd10      	pop	{r4, pc}
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	00002d31 	.word	0x00002d31
    2e08:	41005000 	.word	0x41005000

00002e0c <dcd_edpt_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2e0c:	237f      	movs	r3, #127	; 0x7f
    2e0e:	400b      	ands	r3, r1
void dcd_edpt_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2e10:	015b      	lsls	r3, r3, #5
    2e12:	4a06      	ldr	r2, [pc, #24]	; (2e2c <dcd_edpt_stall+0x20>)
    2e14:	4694      	mov	ip, r2
    2e16:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2e18:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    2e1a:	2900      	cmp	r1, #0
    2e1c:	db02      	blt.n	2e24 <dcd_edpt_stall+0x18>
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
  } else {
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    2e1e:	2210      	movs	r2, #16
    2e20:	715a      	strb	r2, [r3, #5]
  }
}
    2e22:	4770      	bx	lr
    ep->EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    2e24:	2220      	movs	r2, #32
    2e26:	715a      	strb	r2, [r3, #5]
    2e28:	e7fb      	b.n	2e22 <dcd_edpt_stall+0x16>
    2e2a:	46c0      	nop			; (mov r8, r8)
    2e2c:	41005100 	.word	0x41005100

00002e30 <dcd_edpt_clear_stall>:
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    2e30:	237f      	movs	r3, #127	; 0x7f
    2e32:	400b      	ands	r3, r1
void dcd_edpt_clear_stall (uint8_t rhport, uint8_t ep_addr)
{
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
  UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2e34:	015b      	lsls	r3, r3, #5
    2e36:	4a06      	ldr	r2, [pc, #24]	; (2e50 <dcd_edpt_clear_stall+0x20>)
    2e38:	4694      	mov	ip, r2
    2e3a:	4463      	add	r3, ip
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    2e3c:	b249      	sxtb	r1, r1

  if (tu_edpt_dir(ep_addr) == TUSB_DIR_IN) {
    2e3e:	2900      	cmp	r1, #0
    2e40:	db02      	blt.n	2e48 <dcd_edpt_clear_stall+0x18>
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
  } else {
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0 | USB_DEVICE_EPSTATUSCLR_DTGLOUT;
    2e42:	2211      	movs	r2, #17
    2e44:	711a      	strb	r2, [r3, #4]
  }
}
    2e46:	4770      	bx	lr
    ep->EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1 | USB_DEVICE_EPSTATUSCLR_DTGLIN;
    2e48:	2222      	movs	r2, #34	; 0x22
    2e4a:	711a      	strb	r2, [r3, #4]
    2e4c:	e7fb      	b.n	2e46 <dcd_edpt_clear_stall+0x16>
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	41005100 	.word	0x41005100

00002e54 <maybe_transfer_complete>:

//--------------------------------------------------------------------+
// Interrupt Handler
//--------------------------------------------------------------------+
void maybe_transfer_complete(void) {
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	46de      	mov	lr, fp
    2e58:	4657      	mov	r7, sl
    2e5a:	464e      	mov	r6, r9
    2e5c:	4645      	mov	r5, r8
    2e5e:	b5e0      	push	{r5, r6, r7, lr}
    2e60:	b085      	sub	sp, #20
  uint32_t epints = USB->DEVICE.EPINTSMRY.reg;
    2e62:	4b2d      	ldr	r3, [pc, #180]	; (2f18 <maybe_transfer_complete+0xc4>)
    2e64:	8c1b      	ldrh	r3, [r3, #32]
    2e66:	b29b      	uxth	r3, r3
    2e68:	4698      	mov	r8, r3

  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    2e6a:	2400      	movs	r4, #0
    2e6c:	e022      	b.n	2eb4 <maybe_transfer_complete+0x60>
    uint32_t epintflag = ep->EPINTFLAG.reg;

    // Handle IN completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_IN];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    2e6e:	0162      	lsls	r2, r4, #5
    2e70:	4b2a      	ldr	r3, [pc, #168]	; (2f1c <maybe_transfer_complete+0xc8>)
    2e72:	189b      	adds	r3, r3, r2
    2e74:	3310      	adds	r3, #16
    2e76:	685b      	ldr	r3, [r3, #4]
    2e78:	049b      	lsls	r3, r3, #18
    2e7a:	0c9b      	lsrs	r3, r3, #18
    2e7c:	469a      	mov	sl, r3

      dcd_event_xfer_complete(0, epnum | TUSB_DIR_IN_MASK, total_transfer_size, XFER_RESULT_SUCCESS, true);
    2e7e:	2380      	movs	r3, #128	; 0x80
    2e80:	425b      	negs	r3, r3
    2e82:	4323      	orrs	r3, r4
    2e84:	b2db      	uxtb	r3, r3
    2e86:	469b      	mov	fp, r3
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr)
{
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    2e88:	af01      	add	r7, sp, #4
    2e8a:	220c      	movs	r2, #12
    2e8c:	2100      	movs	r1, #0
    2e8e:	0038      	movs	r0, r7
    2e90:	4b23      	ldr	r3, [pc, #140]	; (2f20 <maybe_transfer_complete+0xcc>)
    2e92:	4798      	blx	r3
    2e94:	2307      	movs	r3, #7
    2e96:	707b      	strb	r3, [r7, #1]

  event.xfer_complete.ep_addr = ep_addr;
    2e98:	465b      	mov	r3, fp
    2e9a:	713b      	strb	r3, [r7, #4]
  event.xfer_complete.len     = xferred_bytes;
    2e9c:	4653      	mov	r3, sl
    2e9e:	60bb      	str	r3, [r7, #8]
  event.xfer_complete.result  = result;

  dcd_event_handler(&event, in_isr);
    2ea0:	2101      	movs	r1, #1
    2ea2:	0038      	movs	r0, r7
    2ea4:	4b1f      	ldr	r3, [pc, #124]	; (2f24 <maybe_transfer_complete+0xd0>)
    2ea6:	4798      	blx	r3

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    2ea8:	2302      	movs	r3, #2
    2eaa:	464a      	mov	r2, r9
    2eac:	71d3      	strb	r3, [r2, #7]
    2eae:	e012      	b.n	2ed6 <maybe_transfer_complete+0x82>
  for (uint8_t epnum = 0; epnum < USB_EPT_NUM; epnum++) {
    2eb0:	3401      	adds	r4, #1
    2eb2:	b2e4      	uxtb	r4, r4
    2eb4:	2c07      	cmp	r4, #7
    2eb6:	d828      	bhi.n	2f0a <maybe_transfer_complete+0xb6>
    if ((epints & (1 << epnum)) == 0) {
    2eb8:	0025      	movs	r5, r4
    2eba:	2301      	movs	r3, #1
    2ebc:	40a3      	lsls	r3, r4
    2ebe:	4642      	mov	r2, r8
    2ec0:	4213      	tst	r3, r2
    2ec2:	d0f5      	beq.n	2eb0 <maybe_transfer_complete+0x5c>
    UsbDeviceEndpoint* ep = &USB->DEVICE.DeviceEndpoint[epnum];
    2ec4:	0163      	lsls	r3, r4, #5
    2ec6:	4a18      	ldr	r2, [pc, #96]	; (2f28 <maybe_transfer_complete+0xd4>)
    2ec8:	4691      	mov	r9, r2
    2eca:	4499      	add	r9, r3
    uint32_t epintflag = ep->EPINTFLAG.reg;
    2ecc:	464b      	mov	r3, r9
    2ece:	79de      	ldrb	r6, [r3, #7]
    2ed0:	b2f6      	uxtb	r6, r6
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT1) != 0) {
    2ed2:	07b3      	lsls	r3, r6, #30
    2ed4:	d4cb      	bmi.n	2e6e <maybe_transfer_complete+0x1a>
    }

    // Handle OUT completions
    if ((epintflag & USB_DEVICE_EPINTFLAG_TRCPT0) != 0) {
    2ed6:	07f3      	lsls	r3, r6, #31
    2ed8:	d5ea      	bpl.n	2eb0 <maybe_transfer_complete+0x5c>
      UsbDeviceDescBank* bank = &sram_registers[epnum][TUSB_DIR_OUT];
      uint16_t const total_transfer_size = bank->PCKSIZE.bit.BYTE_COUNT;
    2eda:	016d      	lsls	r5, r5, #5
    2edc:	4b0f      	ldr	r3, [pc, #60]	; (2f1c <maybe_transfer_complete+0xc8>)
    2ede:	195d      	adds	r5, r3, r5
    2ee0:	686e      	ldr	r6, [r5, #4]
    2ee2:	04b6      	lsls	r6, r6, #18
    2ee4:	0cb6      	lsrs	r6, r6, #18
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
    2ee6:	ad01      	add	r5, sp, #4
    2ee8:	220c      	movs	r2, #12
    2eea:	2100      	movs	r1, #0
    2eec:	0028      	movs	r0, r5
    2eee:	4b0c      	ldr	r3, [pc, #48]	; (2f20 <maybe_transfer_complete+0xcc>)
    2ef0:	4798      	blx	r3
    2ef2:	2307      	movs	r3, #7
    2ef4:	706b      	strb	r3, [r5, #1]
  event.xfer_complete.ep_addr = ep_addr;
    2ef6:	712c      	strb	r4, [r5, #4]
  event.xfer_complete.len     = xferred_bytes;
    2ef8:	60ae      	str	r6, [r5, #8]
  dcd_event_handler(&event, in_isr);
    2efa:	2101      	movs	r1, #1
    2efc:	0028      	movs	r0, r5
    2efe:	4b09      	ldr	r3, [pc, #36]	; (2f24 <maybe_transfer_complete+0xd0>)
    2f00:	4798      	blx	r3

      dcd_event_xfer_complete(0, epnum, total_transfer_size, XFER_RESULT_SUCCESS, true);

      ep->EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    2f02:	2301      	movs	r3, #1
    2f04:	464a      	mov	r2, r9
    2f06:	71d3      	strb	r3, [r2, #7]
    2f08:	e7d2      	b.n	2eb0 <maybe_transfer_complete+0x5c>
    }
  }
}
    2f0a:	b005      	add	sp, #20
    2f0c:	bc3c      	pop	{r2, r3, r4, r5}
    2f0e:	4690      	mov	r8, r2
    2f10:	4699      	mov	r9, r3
    2f12:	46a2      	mov	sl, r4
    2f14:	46ab      	mov	fp, r5
    2f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f18:	41005000 	.word	0x41005000
    2f1c:	200009f4 	.word	0x200009f4
    2f20:	000049e5 	.word	0x000049e5
    2f24:	00001f51 	.word	0x00001f51
    2f28:	41005100 	.word	0x41005100

00002f2c <dcd_int_handler>:


void dcd_int_handler (uint8_t rhport)
{
    2f2c:	b530      	push	{r4, r5, lr}
    2f2e:	b085      	sub	sp, #20
  (void) rhport;

  uint32_t int_status = USB->DEVICE.INTFLAG.reg & USB->DEVICE.INTENSET.reg;
    2f30:	4b39      	ldr	r3, [pc, #228]	; (3018 <dcd_int_handler+0xec>)
    2f32:	8b9a      	ldrh	r2, [r3, #28]
    2f34:	8b1c      	ldrh	r4, [r3, #24]
    2f36:	4014      	ands	r4, r2

  // Start of Frame
  if ( int_status & USB_DEVICE_INTFLAG_SOF )
    2f38:	0763      	lsls	r3, r4, #29
    2f3a:	d40f      	bmi.n	2f5c <dcd_int_handler+0x30>

  // SAMD doesn't distinguish between Suspend and Disconnect state.
  // Both condition will cause SUSPEND interrupt triggered.
  // To prevent being triggered when D+/D- are not stable, SUSPEND interrupt is only
  // enabled when we received SET_ADDRESS request and cleared on Bus Reset
  if ( int_status & USB_DEVICE_INTFLAG_SUSPEND )
    2f3c:	07e3      	lsls	r3, r4, #31
    2f3e:	d41d      	bmi.n	2f7c <dcd_int_handler+0x50>
    dcd_event_bus_signal(0, DCD_EVENT_SUSPEND, true);
  }

  // Wakeup interrupt is only enabled when we got suspended.
  // Wakeup interrupt will disable itself
  if ( int_status & USB_DEVICE_INTFLAG_WAKEUP )
    2f40:	06e3      	lsls	r3, r4, #27
    2f42:	d42e      	bmi.n	2fa2 <dcd_int_handler+0x76>
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    dcd_event_bus_signal(0, DCD_EVENT_RESUME, true);
  }

  // Enable of Reset
  if ( int_status & USB_DEVICE_INTFLAG_EORST )
    2f44:	0723      	lsls	r3, r4, #28
    2f46:	d43d      	bmi.n	2fc4 <dcd_int_handler+0x98>
    bus_reset();
    dcd_event_bus_reset(0, TUSB_SPEED_FULL, true);
  }

  // Handle SETUP packet
  if (USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.bit.RXSTP)
    2f48:	2308      	movs	r3, #8
    2f4a:	33ff      	adds	r3, #255	; 0xff
    2f4c:	4a32      	ldr	r2, [pc, #200]	; (3018 <dcd_int_handler+0xec>)
    2f4e:	5cd3      	ldrb	r3, [r2, r3]
    2f50:	06db      	lsls	r3, r3, #27
    2f52:	d44b      	bmi.n	2fec <dcd_int_handler+0xc0>
    // Since control status complete event is optional, we can just clear TRCPT0 and skip the status event
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
  }

  // Handle complete transfer
  maybe_transfer_complete();
    2f54:	4b31      	ldr	r3, [pc, #196]	; (301c <dcd_int_handler+0xf0>)
    2f56:	4798      	blx	r3
}
    2f58:	b005      	add	sp, #20
    2f5a:	bd30      	pop	{r4, r5, pc}
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF;
    2f5c:	2204      	movs	r2, #4
    2f5e:	4b2e      	ldr	r3, [pc, #184]	; (3018 <dcd_int_handler+0xec>)
    2f60:	839a      	strh	r2, [r3, #28]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    2f62:	ad01      	add	r5, sp, #4
    2f64:	3208      	adds	r2, #8
    2f66:	2100      	movs	r1, #0
    2f68:	0028      	movs	r0, r5
    2f6a:	4b2d      	ldr	r3, [pc, #180]	; (3020 <dcd_int_handler+0xf4>)
    2f6c:	4798      	blx	r3
    2f6e:	2303      	movs	r3, #3
    2f70:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    2f72:	2101      	movs	r1, #1
    2f74:	0028      	movs	r0, r5
    2f76:	4b2b      	ldr	r3, [pc, #172]	; (3024 <dcd_int_handler+0xf8>)
    2f78:	4798      	blx	r3
    2f7a:	e7df      	b.n	2f3c <dcd_int_handler+0x10>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_SUSPEND;
    2f7c:	4b26      	ldr	r3, [pc, #152]	; (3018 <dcd_int_handler+0xec>)
    2f7e:	2201      	movs	r2, #1
    2f80:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP; // clear pending
    2f82:	320f      	adds	r2, #15
    2f84:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENSET.reg = USB_DEVICE_INTFLAG_WAKEUP;
    2f86:	831a      	strh	r2, [r3, #24]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    2f88:	ad01      	add	r5, sp, #4
    2f8a:	3a04      	subs	r2, #4
    2f8c:	2100      	movs	r1, #0
    2f8e:	0028      	movs	r0, r5
    2f90:	4b23      	ldr	r3, [pc, #140]	; (3020 <dcd_int_handler+0xf4>)
    2f92:	4798      	blx	r3
    2f94:	2304      	movs	r3, #4
    2f96:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    2f98:	2101      	movs	r1, #1
    2f9a:	0028      	movs	r0, r5
    2f9c:	4b21      	ldr	r3, [pc, #132]	; (3024 <dcd_int_handler+0xf8>)
    2f9e:	4798      	blx	r3
    2fa0:	e7ce      	b.n	2f40 <dcd_int_handler+0x14>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_WAKEUP;
    2fa2:	4b1d      	ldr	r3, [pc, #116]	; (3018 <dcd_int_handler+0xec>)
    2fa4:	2210      	movs	r2, #16
    2fa6:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP;
    2fa8:	829a      	strh	r2, [r3, #20]
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
    2faa:	ad01      	add	r5, sp, #4
    2fac:	3a04      	subs	r2, #4
    2fae:	2100      	movs	r1, #0
    2fb0:	0028      	movs	r0, r5
    2fb2:	4b1b      	ldr	r3, [pc, #108]	; (3020 <dcd_int_handler+0xf4>)
    2fb4:	4798      	blx	r3
    2fb6:	2305      	movs	r3, #5
    2fb8:	706b      	strb	r3, [r5, #1]
  dcd_event_handler(&event, in_isr);
    2fba:	2101      	movs	r1, #1
    2fbc:	0028      	movs	r0, r5
    2fbe:	4b19      	ldr	r3, [pc, #100]	; (3024 <dcd_int_handler+0xf8>)
    2fc0:	4798      	blx	r3
    2fc2:	e7bf      	b.n	2f44 <dcd_int_handler+0x18>
    USB->DEVICE.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST;
    2fc4:	4b14      	ldr	r3, [pc, #80]	; (3018 <dcd_int_handler+0xec>)
    2fc6:	2208      	movs	r2, #8
    2fc8:	839a      	strh	r2, [r3, #28]
    USB->DEVICE.INTENCLR.reg = USB_DEVICE_INTFLAG_WAKEUP | USB_DEVICE_INTFLAG_SUSPEND;
    2fca:	3209      	adds	r2, #9
    2fcc:	829a      	strh	r2, [r3, #20]
    bus_reset();
    2fce:	4b16      	ldr	r3, [pc, #88]	; (3028 <dcd_int_handler+0xfc>)
    2fd0:	4798      	blx	r3
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
    2fd2:	ac01      	add	r4, sp, #4
    2fd4:	220c      	movs	r2, #12
    2fd6:	2100      	movs	r1, #0
    2fd8:	0020      	movs	r0, r4
    2fda:	4b11      	ldr	r3, [pc, #68]	; (3020 <dcd_int_handler+0xf4>)
    2fdc:	4798      	blx	r3
    2fde:	2301      	movs	r3, #1
    2fe0:	7063      	strb	r3, [r4, #1]
  dcd_event_handler(&event, in_isr);
    2fe2:	2101      	movs	r1, #1
    2fe4:	0020      	movs	r0, r4
    2fe6:	4b0f      	ldr	r3, [pc, #60]	; (3024 <dcd_int_handler+0xf8>)
    2fe8:	4798      	blx	r3
    2fea:	e7ad      	b.n	2f48 <dcd_int_handler+0x1c>
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
    2fec:	ac01      	add	r4, sp, #4
    2fee:	220c      	movs	r2, #12
    2ff0:	2100      	movs	r1, #0
    2ff2:	0020      	movs	r0, r4
    2ff4:	4b0a      	ldr	r3, [pc, #40]	; (3020 <dcd_int_handler+0xf4>)
    2ff6:	4798      	blx	r3
    2ff8:	2306      	movs	r3, #6
    2ffa:	7063      	strb	r3, [r4, #1]
  memcpy(&event.setup_received, setup, 8);
    2ffc:	4a0b      	ldr	r2, [pc, #44]	; (302c <dcd_int_handler+0x100>)
    2ffe:	ab02      	add	r3, sp, #8
    3000:	ca03      	ldmia	r2!, {r0, r1}
    3002:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
    3004:	2101      	movs	r1, #1
    3006:	0020      	movs	r0, r4
    3008:	4b06      	ldr	r3, [pc, #24]	; (3024 <dcd_int_handler+0xf8>)
    300a:	4798      	blx	r3
    USB->DEVICE.DeviceEndpoint[0].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP | USB_DEVICE_EPINTFLAG_TRCPT0;
    300c:	2111      	movs	r1, #17
    300e:	2308      	movs	r3, #8
    3010:	33ff      	adds	r3, #255	; 0xff
    3012:	4a01      	ldr	r2, [pc, #4]	; (3018 <dcd_int_handler+0xec>)
    3014:	54d1      	strb	r1, [r2, r3]
    3016:	e79d      	b.n	2f54 <dcd_int_handler+0x28>
    3018:	41005000 	.word	0x41005000
    301c:	00002e55 	.word	0x00002e55
    3020:	000049e5 	.word	0x000049e5
    3024:	00001f51 	.word	0x00001f51
    3028:	00002add 	.word	0x00002add
    302c:	20000af4 	.word	0x20000af4

00003030 <_ZN6Serial11NoIntEnableEhb>:
//Definition of blank interrupt enable
void Serial::NoIntEnable(SERCOMHAL::SercomID peripheral_id, bool enable)
{
	(void) peripheral_id;
	(void) enable;
}
    3030:	4770      	bx	lr
	...

00003034 <_ZN6Serial9Int2ASCIIEmPA10_c>:
//Definition of Integer to ASCII converter
uint32_t Serial::Int2ASCII(uint32_t num, char (*result)[10])
{
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	46c6      	mov	lr, r8
    3038:	b500      	push	{lr}
    303a:	b082      	sub	sp, #8
    303c:	4688      	mov	r8, r1
	volatile uint32_t temp = num;
    303e:	9001      	str	r0, [sp, #4]
	uint32_t multiplier = 1u;
	uint8_t numel = 1u;
    3040:	2601      	movs	r6, #1
	uint32_t multiplier = 1u;
    3042:	2401      	movs	r4, #1
	//find number of digits
	while(temp / multiplier > 9u)
    3044:	9801      	ldr	r0, [sp, #4]
    3046:	0021      	movs	r1, r4
    3048:	4b12      	ldr	r3, [pc, #72]	; (3094 <_ZN6Serial9Int2ASCIIEmPA10_c+0x60>)
    304a:	4798      	blx	r3
    304c:	2809      	cmp	r0, #9
    304e:	d906      	bls.n	305e <_ZN6Serial9Int2ASCIIEmPA10_c+0x2a>
	{
		multiplier *= 10u;
    3050:	00a3      	lsls	r3, r4, #2
    3052:	191c      	adds	r4, r3, r4
    3054:	0063      	lsls	r3, r4, #1
    3056:	001c      	movs	r4, r3
		numel++;
    3058:	3601      	adds	r6, #1
    305a:	b2f6      	uxtb	r6, r6
	while(temp / multiplier > 9u)
    305c:	e7f2      	b.n	3044 <_ZN6Serial9Int2ASCIIEmPA10_c+0x10>
    305e:	2500      	movs	r5, #0
	}
	//convert each digit to ASCII and add to buffer
	uint8_t i = 0u;
	while(i < numel)
    3060:	42b5      	cmp	r5, r6
    3062:	da12      	bge.n	308a <_ZN6Serial9Int2ASCIIEmPA10_c+0x56>
	{
		(*result)[i] = temp / multiplier + 48u;
    3064:	9801      	ldr	r0, [sp, #4]
    3066:	4f0b      	ldr	r7, [pc, #44]	; (3094 <_ZN6Serial9Int2ASCIIEmPA10_c+0x60>)
    3068:	0021      	movs	r1, r4
    306a:	47b8      	blx	r7
    306c:	3030      	adds	r0, #48	; 0x30
    306e:	4643      	mov	r3, r8
    3070:	5558      	strb	r0, [r3, r5]
		temp %= multiplier;
    3072:	9801      	ldr	r0, [sp, #4]
    3074:	0021      	movs	r1, r4
    3076:	4b08      	ldr	r3, [pc, #32]	; (3098 <_ZN6Serial9Int2ASCIIEmPA10_c+0x64>)
    3078:	4798      	blx	r3
    307a:	9101      	str	r1, [sp, #4]
		multiplier /= 10u;
    307c:	210a      	movs	r1, #10
    307e:	0020      	movs	r0, r4
    3080:	47b8      	blx	r7
    3082:	0004      	movs	r4, r0
		i++;
    3084:	3501      	adds	r5, #1
    3086:	b2ed      	uxtb	r5, r5
	while(i < numel)
    3088:	e7ea      	b.n	3060 <_ZN6Serial9Int2ASCIIEmPA10_c+0x2c>
	}
	return numel;
}
    308a:	0030      	movs	r0, r6
    308c:	b002      	add	sp, #8
    308e:	bc04      	pop	{r2}
    3090:	4690      	mov	r8, r2
    3092:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3094:	000045dd 	.word	0x000045dd
    3098:	000046e9 	.word	0x000046e9

0000309c <_ZN6Serial12SerialBuffer5ResetEPcm>:
		 * \note You must call this before use if constructed without parameters.
		 * \sa GENERIC_BUFFER(), Clear()
		 */
		void ResetBuffer(T* arr, uint32_t arr_size)
		{
			fifo_buffer = arr;
    309c:	6041      	str	r1, [r0, #4]
			buffer_size = arr_size;
    309e:	6082      	str	r2, [r0, #8]
			buffer_avail = 0;
    30a0:	2300      	movs	r3, #0
    30a2:	60c3      	str	r3, [r0, #12]
			rd_index = 0;
    30a4:	6103      	str	r3, [r0, #16]
			wr_index = 0;
    30a6:	6143      	str	r3, [r0, #20]
}

void Serial::SerialBuffer::Reset(char * buf, uint32_t buf_size)
{
	buffer.ResetBuffer(buf, buf_size);
	index_shift = 1u;
    30a8:	3301      	adds	r3, #1
    30aa:	6183      	str	r3, [r0, #24]
}
    30ac:	4770      	bx	lr
	...

000030b0 <_ZN6Serial12SerialBufferC1EhPcm>:
Serial::SerialBuffer::SerialBuffer(SERCOMHAL::SercomID peripheral_id, char * buf, uint32_t buf_size)
    30b0:	b570      	push	{r4, r5, r6, lr}
    30b2:	0004      	movs	r4, r0
    30b4:	0015      	movs	r5, r2
			fifo_buffer = arr;
    30b6:	2000      	movs	r0, #0
    30b8:	6060      	str	r0, [r4, #4]
			buffer_size = arr_size;
    30ba:	60a0      	str	r0, [r4, #8]
			buffer_avail = 0;
    30bc:	60e0      	str	r0, [r4, #12]
			rd_index = 0;
    30be:	6120      	str	r0, [r4, #16]
			wr_index = 0;
    30c0:	6160      	str	r0, [r4, #20]
	sercom_id = peripheral_id;
    30c2:	7021      	strb	r1, [r4, #0]
	Reset(buf, buf_size);
    30c4:	001a      	movs	r2, r3
    30c6:	0029      	movs	r1, r5
    30c8:	0020      	movs	r0, r4
    30ca:	4b02      	ldr	r3, [pc, #8]	; (30d4 <_ZN6Serial12SerialBufferC1EhPcm+0x24>)
    30cc:	4798      	blx	r3
}
    30ce:	0020      	movs	r0, r4
    30d0:	bd70      	pop	{r4, r5, r6, pc}
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	0000309d 	.word	0x0000309d

000030d8 <_ZN6Serial12SerialBuffer5ClearEv>:
			buffer_avail = 0;
    30d8:	2300      	movs	r3, #0
    30da:	60c3      	str	r3, [r0, #12]
			rd_index = 0;
    30dc:	6103      	str	r3, [r0, #16]
			wr_index = 0;
    30de:	6143      	str	r3, [r0, #20]

void Serial::SerialBuffer::Clear(void)
{
	buffer.Clear();
}
    30e0:	4770      	bx	lr
	...

000030e4 <_ZN6Serial12SerialBufferD1Ev>:
Serial::SerialBuffer::~SerialBuffer(void)
    30e4:	b510      	push	{r4, lr}
    30e6:	0004      	movs	r4, r0
	Clear();
    30e8:	4b01      	ldr	r3, [pc, #4]	; (30f0 <_ZN6Serial12SerialBufferD1Ev+0xc>)
    30ea:	4798      	blx	r3
}
    30ec:	0020      	movs	r0, r4
    30ee:	bd10      	pop	{r4, pc}
    30f0:	000030d9 	.word	0x000030d9

000030f4 <_ZN6Serial12SerialBuffer3PutEcPFvhbE>:

bool Serial::SerialBuffer::Put(char input, void (* int_func)(uint8_t, bool))
{
    30f4:	b570      	push	{r4, r5, r6, lr}
    30f6:	0004      	movs	r4, r0
    30f8:	000e      	movs	r6, r1
    30fa:	0015      	movs	r5, r2
	int_func(sercom_id, false);
    30fc:	7800      	ldrb	r0, [r0, #0]
    30fe:	2100      	movs	r1, #0
    3100:	4790      	blx	r2
		 * \sa Get()
		 */
		bool Put(T element)
		{
			bool success = false;
			if(buffer_avail < buffer_size)
    3102:	68e3      	ldr	r3, [r4, #12]
    3104:	68a2      	ldr	r2, [r4, #8]
    3106:	4293      	cmp	r3, r2
    3108:	d211      	bcs.n	312e <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x3a>
			{
				fifo_buffer[wr_index] = element;
    310a:	6863      	ldr	r3, [r4, #4]
    310c:	6962      	ldr	r2, [r4, #20]
    310e:	549e      	strb	r6, [r3, r2]
				buffer_avail++;
    3110:	68e3      	ldr	r3, [r4, #12]
    3112:	3301      	adds	r3, #1
    3114:	60e3      	str	r3, [r4, #12]
				wr_index = (wr_index+1) % buffer_size;
    3116:	6963      	ldr	r3, [r4, #20]
    3118:	1c58      	adds	r0, r3, #1
    311a:	68a1      	ldr	r1, [r4, #8]
    311c:	4b05      	ldr	r3, [pc, #20]	; (3134 <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x40>)
    311e:	4798      	blx	r3
    3120:	6161      	str	r1, [r4, #20]
				success = true;
    3122:	2601      	movs	r6, #1
	bool success = buffer.Put(input);
	int_func(sercom_id, true);
    3124:	7820      	ldrb	r0, [r4, #0]
    3126:	2101      	movs	r1, #1
    3128:	47a8      	blx	r5
	return success;
}
    312a:	0030      	movs	r0, r6
    312c:	bd70      	pop	{r4, r5, r6, pc}
			bool success = false;
    312e:	2600      	movs	r6, #0
    3130:	e7f8      	b.n	3124 <_ZN6Serial12SerialBuffer3PutEcPFvhbE+0x30>
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	000046e9 	.word	0x000046e9

00003138 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc>:

bool Serial::SerialBuffer::Get(void (* int_func)(uint8_t, bool), char * output)
{
    3138:	b570      	push	{r4, r5, r6, lr}
    313a:	0004      	movs	r4, r0
    313c:	000e      	movs	r6, r1
    313e:	0015      	movs	r5, r2
	int_func(sercom_id, false);
    3140:	7800      	ldrb	r0, [r0, #0]
    3142:	2100      	movs	r1, #0
    3144:	47b0      	blx	r6
		 * \sa Put(), Peek()
		 */
		bool Get(T * output = nullptr)
		{
			bool result = false;
			if(buffer_avail)
    3146:	68e3      	ldr	r3, [r4, #12]
    3148:	2b00      	cmp	r3, #0
    314a:	d019      	beq.n	3180 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x48>
			{
				result = true;
				if(output != nullptr) *output = fifo_buffer[rd_index];
    314c:	2d00      	cmp	r5, #0
    314e:	d003      	beq.n	3158 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x20>
    3150:	6863      	ldr	r3, [r4, #4]
    3152:	6922      	ldr	r2, [r4, #16]
    3154:	5c9b      	ldrb	r3, [r3, r2]
    3156:	702b      	strb	r3, [r5, #0]
				rd_index = (rd_index+1) % buffer_size;
    3158:	6923      	ldr	r3, [r4, #16]
    315a:	1c58      	adds	r0, r3, #1
    315c:	68a1      	ldr	r1, [r4, #8]
    315e:	4b09      	ldr	r3, [pc, #36]	; (3184 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x4c>)
    3160:	4798      	blx	r3
    3162:	6121      	str	r1, [r4, #16]
				buffer_avail--;
    3164:	68e3      	ldr	r3, [r4, #12]
    3166:	3b01      	subs	r3, #1
    3168:	60e3      	str	r3, [r4, #12]
				result = true;
    316a:	2501      	movs	r5, #1
	bool result = buffer.Get(output);
	if(index_shift) index_shift--;
    316c:	69a3      	ldr	r3, [r4, #24]
    316e:	2b00      	cmp	r3, #0
    3170:	d001      	beq.n	3176 <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x3e>
    3172:	3b01      	subs	r3, #1
    3174:	61a3      	str	r3, [r4, #24]
	int_func(sercom_id, true);
    3176:	7820      	ldrb	r0, [r4, #0]
    3178:	2101      	movs	r1, #1
    317a:	47b0      	blx	r6
	return result;
}
    317c:	0028      	movs	r0, r5
    317e:	bd70      	pop	{r4, r5, r6, pc}
			bool result = false;
    3180:	2500      	movs	r5, #0
    3182:	e7f3      	b.n	316c <_ZN6Serial12SerialBuffer3GetEPFvhbEPc+0x34>
    3184:	000046e9 	.word	0x000046e9

00003188 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE>:

bool Serial::SerialBuffer::GetString(const char *input, uint32_t shift, bool move_pointer, void (* int_func)(uint8_t, bool))
{
    3188:	b5f0      	push	{r4, r5, r6, r7, lr}
    318a:	46ce      	mov	lr, r9
    318c:	4647      	mov	r7, r8
    318e:	b580      	push	{r7, lr}
    3190:	b085      	sub	sp, #20
    3192:	0006      	movs	r6, r0
    3194:	000f      	movs	r7, r1
    3196:	4690      	mov	r8, r2
    3198:	9301      	str	r3, [sp, #4]
	bool has_string = false;
	//prevents checking after initialization or a previous string has been found until new character is received
	while(Get(int_func));
    319a:	2200      	movs	r2, #0
    319c:	990c      	ldr	r1, [sp, #48]	; 0x30
    319e:	0030      	movs	r0, r6
    31a0:	4b2e      	ldr	r3, [pc, #184]	; (325c <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0xd4>)
    31a2:	4798      	blx	r3
    31a4:	1e04      	subs	r4, r0, #0
    31a6:	d1f8      	bne.n	319a <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x12>
	if(!index_shift)
    31a8:	69b3      	ldr	r3, [r6, #24]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d12f      	bne.n	320e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
	{
		has_string = true;
		uint32_t numel = 0;
		//finds size of input string by detecting null character
		while(input[numel] != '\0') numel++;
    31ae:	5cfa      	ldrb	r2, [r7, r3]
    31b0:	2a00      	cmp	r2, #0
    31b2:	d001      	beq.n	31b8 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x30>
    31b4:	3301      	adds	r3, #1
    31b6:	e7fa      	b.n	31ae <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x26>
		{
			volatile T output = 0;
			if(buffer_avail) output = fifo_buffer[rd_index];
			return output;
		}
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    31b8:	68b2      	ldr	r2, [r6, #8]
    31ba:	4694      	mov	ip, r2
			if(read_index != nullptr) *read_index = rd_index;
    31bc:	6932      	ldr	r2, [r6, #16]
			return &(fifo_buffer[0]);
    31be:	6870      	ldr	r0, [r6, #4]
		uint32_t i = 0;
		uint32_t rd_index;
		uint32_t bsize = buffer.GetSize();
		char * arr_ref = buffer.GetRawElements(&rd_index);
		uint32_t reader = rd_index + ((shift > rd_index) * bsize) - shift;
    31c0:	4542      	cmp	r2, r8
    31c2:	4189      	sbcs	r1, r1
    31c4:	4249      	negs	r1, r1
    31c6:	4664      	mov	r4, ip
    31c8:	4361      	muls	r1, r4
    31ca:	1851      	adds	r1, r2, r1
    31cc:	4642      	mov	r2, r8
    31ce:	1a89      	subs	r1, r1, r2
		uint32_t i = 0;
    31d0:	2200      	movs	r2, #0
		has_string = true;
    31d2:	2401      	movs	r4, #1
    31d4:	e008      	b.n	31e8 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x60>
		while(has_string && i < numel)
		{
			//iterates backwards in buffer and input string and checks if each element is equal to each other
			if(reader == 0u) reader = bsize - 1;
			else reader--;
    31d6:	3901      	subs	r1, #1
			i++;
    31d8:	3201      	adds	r2, #1
			has_string = (input[numel - i] == arr_ref[reader]);
    31da:	1a9c      	subs	r4, r3, r2
    31dc:	5d3c      	ldrb	r4, [r7, r4]
    31de:	5c45      	ldrb	r5, [r0, r1]
    31e0:	1b64      	subs	r4, r4, r5
    31e2:	4265      	negs	r5, r4
    31e4:	4165      	adcs	r5, r4
    31e6:	b2ec      	uxtb	r4, r5
		while(has_string && i < numel)
    31e8:	2c00      	cmp	r4, #0
    31ea:	d006      	beq.n	31fa <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x72>
    31ec:	4293      	cmp	r3, r2
    31ee:	d904      	bls.n	31fa <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x72>
			if(reader == 0u) reader = bsize - 1;
    31f0:	2900      	cmp	r1, #0
    31f2:	d1f0      	bne.n	31d6 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x4e>
    31f4:	4661      	mov	r1, ip
    31f6:	3901      	subs	r1, #1
    31f8:	e7ee      	b.n	31d8 <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x50>
		}
		if(has_string)
    31fa:	2c00      	cmp	r4, #0
    31fc:	d007      	beq.n	320e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
		{
			index_shift = 1u;
    31fe:	2301      	movs	r3, #1
    3200:	61b3      	str	r3, [r6, #24]
			if(move_pointer && shift > 0u)
    3202:	9b01      	ldr	r3, [sp, #4]
    3204:	2b00      	cmp	r3, #0
    3206:	d002      	beq.n	320e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
    3208:	4643      	mov	r3, r8
    320a:	2b00      	cmp	r3, #0
    320c:	d105      	bne.n	321a <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x92>
				int_func(sercom_id, true);
			}
		}
	}
	return has_string;
}
    320e:	0020      	movs	r0, r4
    3210:	b005      	add	sp, #20
    3212:	bc0c      	pop	{r2, r3}
    3214:	4690      	mov	r8, r2
    3216:	4699      	mov	r9, r3
    3218:	bdf0      	pop	{r4, r5, r6, r7, pc}
				int_func(sercom_id, false);
    321a:	7830      	ldrb	r0, [r6, #0]
    321c:	2100      	movs	r1, #0
    321e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3220:	4798      	blx	r3
			volatile uint32_t true_shift = shift_size;
    3222:	4643      	mov	r3, r8
    3224:	9303      	str	r3, [sp, #12]
			else if(!increase && (shift_size > buffer_size))
    3226:	68b0      	ldr	r0, [r6, #8]
    3228:	4580      	cmp	r8, r0
    322a:	d900      	bls.n	322e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0xa6>
				true_shift = buffer_size;
    322c:	9003      	str	r0, [sp, #12]
				rd_index = rd_index + ((true_shift > rd_index) * buffer_size) - true_shift;	
    322e:	6931      	ldr	r1, [r6, #16]
    3230:	9a03      	ldr	r2, [sp, #12]
    3232:	4291      	cmp	r1, r2
    3234:	4192      	sbcs	r2, r2
    3236:	4253      	negs	r3, r2
    3238:	4343      	muls	r3, r0
    323a:	18cb      	adds	r3, r1, r3
    323c:	9903      	ldr	r1, [sp, #12]
    323e:	1a5b      	subs	r3, r3, r1
    3240:	6133      	str	r3, [r6, #16]
				buffer_avail += true_shift;
    3242:	9b03      	ldr	r3, [sp, #12]
    3244:	68f2      	ldr	r2, [r6, #12]
    3246:	4694      	mov	ip, r2
    3248:	4463      	add	r3, ip
    324a:	60f3      	str	r3, [r6, #12]
				index_shift += shift;
    324c:	69b3      	ldr	r3, [r6, #24]
    324e:	4443      	add	r3, r8
    3250:	61b3      	str	r3, [r6, #24]
				int_func(sercom_id, true);
    3252:	7830      	ldrb	r0, [r6, #0]
    3254:	2101      	movs	r1, #1
    3256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3258:	4798      	blx	r3
    325a:	e7d8      	b.n	320e <_ZN6Serial12SerialBuffer9GetStringEPKcmbPFvhbE+0x86>
    325c:	00003139 	.word	0x00003139

00003260 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE>:

bool Serial::SerialBuffer::GetASCIIAsInt(uint32_t * output, void (* int_func)(uint8_t, bool))
{
    3260:	b5f0      	push	{r4, r5, r6, r7, lr}
    3262:	b083      	sub	sp, #12
    3264:	0006      	movs	r6, r0
    3266:	000f      	movs	r7, r1
    3268:	0014      	movs	r4, r2
	bool result = false;
	*output = 0u;
    326a:	2300      	movs	r3, #0
    326c:	600b      	str	r3, [r1, #0]
			volatile T output = 0;
    326e:	466a      	mov	r2, sp
    3270:	7193      	strb	r3, [r2, #6]
			if(buffer_avail) output = fifo_buffer[rd_index];
    3272:	68c3      	ldr	r3, [r0, #12]
    3274:	2b00      	cmp	r3, #0
    3276:	d004      	beq.n	3282 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x22>
    3278:	6843      	ldr	r3, [r0, #4]
    327a:	6902      	ldr	r2, [r0, #16]
    327c:	5c9a      	ldrb	r2, [r3, r2]
    327e:	466b      	mov	r3, sp
    3280:	719a      	strb	r2, [r3, #6]
			return output;
    3282:	466b      	mov	r3, sp
    3284:	799d      	ldrb	r5, [r3, #6]
    3286:	b2ed      	uxtb	r5, r5
	bool result = false;
    3288:	2000      	movs	r0, #0
    328a:	e002      	b.n	3292 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x32>
    328c:	466b      	mov	r3, sp
    328e:	79dd      	ldrb	r5, [r3, #7]
	unsigned char received = buffer.Peek();
	while(received > 47u && received < 58u)
	{
		result = true;
    3290:	2001      	movs	r0, #1
	while(received > 47u && received < 58u)
    3292:	002b      	movs	r3, r5
    3294:	3b30      	subs	r3, #48	; 0x30
    3296:	b2db      	uxtb	r3, r3
    3298:	2b09      	cmp	r3, #9
    329a:	d817      	bhi.n	32cc <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x6c>
		Get(int_func);
    329c:	2200      	movs	r2, #0
    329e:	0021      	movs	r1, r4
    32a0:	0030      	movs	r0, r6
    32a2:	4b0b      	ldr	r3, [pc, #44]	; (32d0 <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x70>)
    32a4:	4798      	blx	r3
		*output *= 10u;
    32a6:	683b      	ldr	r3, [r7, #0]
    32a8:	009a      	lsls	r2, r3, #2
    32aa:	18d2      	adds	r2, r2, r3
    32ac:	0053      	lsls	r3, r2, #1
		*output += received - 48u;
    32ae:	18eb      	adds	r3, r5, r3
    32b0:	3b30      	subs	r3, #48	; 0x30
    32b2:	603b      	str	r3, [r7, #0]
			volatile T output = 0;
    32b4:	2200      	movs	r2, #0
    32b6:	466b      	mov	r3, sp
    32b8:	71da      	strb	r2, [r3, #7]
			if(buffer_avail) output = fifo_buffer[rd_index];
    32ba:	68f3      	ldr	r3, [r6, #12]
    32bc:	2b00      	cmp	r3, #0
    32be:	d0e5      	beq.n	328c <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x2c>
    32c0:	6873      	ldr	r3, [r6, #4]
    32c2:	6932      	ldr	r2, [r6, #16]
    32c4:	5c9a      	ldrb	r2, [r3, r2]
    32c6:	466b      	mov	r3, sp
    32c8:	71da      	strb	r2, [r3, #7]
    32ca:	e7df      	b.n	328c <_ZN6Serial12SerialBuffer13GetASCIIAsIntEPmPFvhbE+0x2c>
		received = buffer.Peek();
	}
	return result;
}
    32cc:	b003      	add	sp, #12
    32ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32d0:	00003139 	.word	0x00003139

000032d4 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE>:

bool Serial::SerialBuffer::GetIntParam(uint32_t * output, const char *input, char delimiter, uint8_t max_digits, void (* int_func)(uint8_t, bool))
{
    32d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32d6:	46de      	mov	lr, fp
    32d8:	b500      	push	{lr}
    32da:	b088      	sub	sp, #32
    32dc:	9002      	str	r0, [sp, #8]
    32de:	9104      	str	r1, [sp, #16]
    32e0:	9203      	str	r2, [sp, #12]
    32e2:	9305      	str	r3, [sp, #20]
    32e4:	ab0e      	add	r3, sp, #56	; 0x38
    32e6:	781b      	ldrb	r3, [r3, #0]
    32e8:	469b      	mov	fp, r3
    32ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	bool result = false;
	uint8_t i = 1u;
    32ec:	2501      	movs	r5, #1
    32ee:	e004      	b.n	32fa <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x26>
	while(!GetString(input, i, true, int_func) && i < max_digits+1u) i++;
    32f0:	2700      	movs	r7, #0
    32f2:	2f00      	cmp	r7, #0
    32f4:	d013      	beq.n	331e <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x4a>
    32f6:	3501      	adds	r5, #1
    32f8:	b2ed      	uxtb	r5, r5
    32fa:	002c      	movs	r4, r5
    32fc:	9600      	str	r6, [sp, #0]
    32fe:	2301      	movs	r3, #1
    3300:	002a      	movs	r2, r5
    3302:	9903      	ldr	r1, [sp, #12]
    3304:	9802      	ldr	r0, [sp, #8]
    3306:	4f26      	ldr	r7, [pc, #152]	; (33a0 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xcc>)
    3308:	47b8      	blx	r7
    330a:	2800      	cmp	r0, #0
    330c:	d1f0      	bne.n	32f0 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1c>
    330e:	465b      	mov	r3, fp
    3310:	3301      	adds	r3, #1
    3312:	429d      	cmp	r5, r3
    3314:	d301      	bcc.n	331a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x46>
    3316:	2700      	movs	r7, #0
    3318:	e7eb      	b.n	32f2 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1e>
    331a:	2701      	movs	r7, #1
    331c:	e7e9      	b.n	32f2 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x1e>
	if(i<max_digits+1u)
    331e:	465b      	mov	r3, fp
    3320:	3301      	adds	r3, #1
    3322:	429c      	cmp	r4, r3
    3324:	d236      	bcs.n	3394 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    3326:	9902      	ldr	r1, [sp, #8]
    3328:	688a      	ldr	r2, [r1, #8]
			if(read_index != nullptr) *read_index = rd_index;
    332a:	690b      	ldr	r3, [r1, #16]
			return &(fifo_buffer[0]);
    332c:	684c      	ldr	r4, [r1, #4]
	{
		volatile uint32_t temp_index;
		uint32_t rd_index;
		uint32_t bsize = buffer.GetSize();
		char * arr_ref = buffer.GetRawElements(&rd_index);
		if(rd_index == 0u) temp_index = bsize - 1;
    332e:	2b00      	cmp	r3, #0
    3330:	d113      	bne.n	335a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x86>
    3332:	3a01      	subs	r2, #1
    3334:	9207      	str	r2, [sp, #28]
		else temp_index = rd_index - 1u;
		if(GetASCIIAsInt(output, int_func))
    3336:	0032      	movs	r2, r6
    3338:	9904      	ldr	r1, [sp, #16]
    333a:	9802      	ldr	r0, [sp, #8]
    333c:	4b19      	ldr	r3, [pc, #100]	; (33a4 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xd0>)
    333e:	4798      	blx	r3
    3340:	1e03      	subs	r3, r0, #0
    3342:	d026      	beq.n	3392 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xbe>
		{
			char read_delimiter;
			if(!delimiter || (delimiter && Get(int_func, &read_delimiter) && read_delimiter == delimiter))
    3344:	9a05      	ldr	r2, [sp, #20]
    3346:	2a00      	cmp	r2, #0
    3348:	d10a      	bne.n	3360 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x8c>
    334a:	2b00      	cmp	r3, #0
    334c:	d01c      	beq.n	3388 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xb4>
			{
				result = true;
				arr_ref[temp_index] = '\0';
    334e:	9a07      	ldr	r2, [sp, #28]
    3350:	18a4      	adds	r4, r4, r2
    3352:	2200      	movs	r2, #0
    3354:	7022      	strb	r2, [r4, #0]
				result = true;
    3356:	001f      	movs	r7, r3
    3358:	e01c      	b.n	3394 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
		else temp_index = rd_index - 1u;
    335a:	3b01      	subs	r3, #1
    335c:	9307      	str	r3, [sp, #28]
    335e:	e7ea      	b.n	3336 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x62>
			if(!delimiter || (delimiter && Get(int_func, &read_delimiter) && read_delimiter == delimiter))
    3360:	220b      	movs	r2, #11
    3362:	ab04      	add	r3, sp, #16
    3364:	469c      	mov	ip, r3
    3366:	4462      	add	r2, ip
    3368:	0031      	movs	r1, r6
    336a:	9802      	ldr	r0, [sp, #8]
    336c:	4b0e      	ldr	r3, [pc, #56]	; (33a8 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xd4>)
    336e:	4798      	blx	r3
    3370:	1e03      	subs	r3, r0, #0
    3372:	d0ea      	beq.n	334a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
    3374:	220b      	movs	r2, #11
    3376:	a904      	add	r1, sp, #16
    3378:	468c      	mov	ip, r1
    337a:	4462      	add	r2, ip
    337c:	7812      	ldrb	r2, [r2, #0]
    337e:	9905      	ldr	r1, [sp, #20]
    3380:	4291      	cmp	r1, r2
    3382:	d0e2      	beq.n	334a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
    3384:	003b      	movs	r3, r7
    3386:	e7e0      	b.n	334a <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0x76>
			} else {
				*output = '\0';
    3388:	2200      	movs	r2, #0
    338a:	9904      	ldr	r1, [sp, #16]
    338c:	600a      	str	r2, [r1, #0]
	bool result = false;
    338e:	001f      	movs	r7, r3
    3390:	e000      	b.n	3394 <_ZN6Serial12SerialBuffer11GetIntParamEPmPKcchPFvhbE+0xc0>
    3392:	0007      	movs	r7, r0
			}
		}
	}
	return result;
}
    3394:	0038      	movs	r0, r7
    3396:	b008      	add	sp, #32
    3398:	bc04      	pop	{r2}
    339a:	4693      	mov	fp, r2
    339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	00003189 	.word	0x00003189
    33a4:	00003261 	.word	0x00003261
    33a8:	00003139 	.word	0x00003139

000033ac <_ZNK6Serial12SerialBuffer14GetBufferEmptyEv>:
		uint32_t GetSize(void) const { return buffer_size; }				//!< Getter for size of array.
    33ac:	6883      	ldr	r3, [r0, #8]
		uint32_t GetBufferAvailable(void) const { return buffer_avail; }	//!< Getter for length/number of elements available in buffer.
    33ae:	68c0      	ldr	r0, [r0, #12]
	return buffer.GetBufferAvailable();
}

uint32_t Serial::SerialBuffer::GetBufferEmpty(void) const
{
	return buffer.GetSize() - buffer.GetBufferAvailable();
    33b0:	1a18      	subs	r0, r3, r0
}
    33b2:	4770      	bx	lr

000033b4 <_ZNK6Serial12SerialBuffer14GetBufferStateEv>:
			
		BufferState GetBufferState(void) const								//!< Getter for buffer state (Empty, Full, NotEmptyNotFull)
		{
			if(!buffer_avail)
    33b4:	68c3      	ldr	r3, [r0, #12]
    33b6:	2b00      	cmp	r3, #0
    33b8:	d006      	beq.n	33c8 <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0x14>
				return BufferState::Empty;
			if(buffer_avail == buffer_size)
    33ba:	6882      	ldr	r2, [r0, #8]
    33bc:	4293      	cmp	r3, r2
    33be:	d001      	beq.n	33c4 <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0x10>
				return BufferState::Full;
			return BufferState::NotEmptyNotFull;
    33c0:	2002      	movs	r0, #2

GenericBuffer::BufferState Serial::SerialBuffer::GetBufferState(void) const
{
	return buffer.GetBufferState();
}
    33c2:	4770      	bx	lr
				return BufferState::Full;
    33c4:	2001      	movs	r0, #1
    33c6:	e7fc      	b.n	33c2 <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0xe>
				return BufferState::Empty;
    33c8:	2000      	movs	r0, #0
    33ca:	e7fa      	b.n	33c2 <_ZNK6Serial12SerialBuffer14GetBufferStateEv+0xe>

000033cc <_ZN12SERCOMSAMD219GetSercomEh>:
#if (SERCOM_MCU_OPT == OPT_SERCOM_SAMD21)

Sercom * SERCOMSAMD21::GetSercom(SERCOMHAL::SercomID sercom_id)
{
	Sercom *sercom_ptr;
	switch(sercom_id) {
    33cc:	2805      	cmp	r0, #5
    33ce:	d80d      	bhi.n	33ec <_ZN12SERCOMSAMD219GetSercomEh+0x20>
    33d0:	0080      	lsls	r0, r0, #2
    33d2:	4b08      	ldr	r3, [pc, #32]	; (33f4 <_ZN12SERCOMSAMD219GetSercomEh+0x28>)
    33d4:	581b      	ldr	r3, [r3, r0]
    33d6:	469f      	mov	pc, r3
		case  SERCOMSAMD21::SercomID::Sercom0:
			sercom_ptr = SERCOM0;
    33d8:	4807      	ldr	r0, [pc, #28]	; (33f8 <_ZN12SERCOMSAMD219GetSercomEh+0x2c>)
    33da:	e00a      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
			break;
		case  SERCOMSAMD21::SercomID::Sercom1:
			sercom_ptr = SERCOM1;
			break;
		case  SERCOMSAMD21::SercomID::Sercom2:
			sercom_ptr = SERCOM2;
    33dc:	4807      	ldr	r0, [pc, #28]	; (33fc <_ZN12SERCOMSAMD219GetSercomEh+0x30>)
			break;
    33de:	e008      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
		case  SERCOMSAMD21::SercomID::Sercom3:
			sercom_ptr = SERCOM3;
    33e0:	4807      	ldr	r0, [pc, #28]	; (3400 <_ZN12SERCOMSAMD219GetSercomEh+0x34>)
			break;
    33e2:	e006      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
		case  SERCOMSAMD21::SercomID::Sercom4:
			sercom_ptr = SERCOM4;
    33e4:	4807      	ldr	r0, [pc, #28]	; (3404 <_ZN12SERCOMSAMD219GetSercomEh+0x38>)
			break;
    33e6:	e004      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
		case  SERCOMSAMD21::SercomID::Sercom5:
			sercom_ptr = SERCOM5;
    33e8:	4807      	ldr	r0, [pc, #28]	; (3408 <_ZN12SERCOMSAMD219GetSercomEh+0x3c>)
			break;
    33ea:	e002      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
		default:
			sercom_ptr = nullptr;
    33ec:	2000      	movs	r0, #0
			break;
    33ee:	e000      	b.n	33f2 <_ZN12SERCOMSAMD219GetSercomEh+0x26>
			sercom_ptr = SERCOM1;
    33f0:	4806      	ldr	r0, [pc, #24]	; (340c <_ZN12SERCOMSAMD219GetSercomEh+0x40>)
	}
	return sercom_ptr;
}
    33f2:	4770      	bx	lr
    33f4:	00004ef4 	.word	0x00004ef4
    33f8:	42000800 	.word	0x42000800
    33fc:	42001000 	.word	0x42001000
    3400:	42001400 	.word	0x42001400
    3404:	42001800 	.word	0x42001800
    3408:	42001c00 	.word	0x42001c00
    340c:	42000c00 	.word	0x42000c00

00003410 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb>:

void SERCOMSAMD21::EnableSercomClock(SERCOMHAL::SercomID sercom_id, SERCOMSAMD21::GenericClock gen_clk_num, uint16_t clock_divisor, bool run_standby)
{
    3410:	b5f0      	push	{r4, r5, r6, r7, lr}
    3412:	001f      	movs	r7, r3
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(gen_clk_num) | GCLK_GENCTRL_SRC(GCLK_SOURCE_OSC8M) | GCLK_GENCTRL_IDC;
    3414:	250f      	movs	r5, #15
    3416:	400d      	ands	r5, r1
    3418:	4e46      	ldr	r6, [pc, #280]	; (3534 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x124>)
    341a:	432e      	orrs	r6, r5
    341c:	4c46      	ldr	r4, [pc, #280]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    341e:	6066      	str	r6, [r4, #4]
	GCLK->GENCTRL.bit.RUNSTDBY = run_standby;
    3420:	6866      	ldr	r6, [r4, #4]
    3422:	2301      	movs	r3, #1
    3424:	403b      	ands	r3, r7
    3426:	055b      	lsls	r3, r3, #21
    3428:	4f44      	ldr	r7, [pc, #272]	; (353c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x12c>)
    342a:	403e      	ands	r6, r7
    342c:	4333      	orrs	r3, r6
    342e:	6063      	str	r3, [r4, #4]
	GCLK->GENCTRL.bit.GENEN = 0x1;
    3430:	6866      	ldr	r6, [r4, #4]
    3432:	2380      	movs	r3, #128	; 0x80
    3434:	025b      	lsls	r3, r3, #9
    3436:	4333      	orrs	r3, r6
    3438:	6063      	str	r3, [r4, #4]
	GCLK->GENDIV.reg = GCLK_GENDIV_DIV(clock_divisor) | GCLK_GENDIV_ID(gen_clk_num);
    343a:	0212      	lsls	r2, r2, #8
    343c:	4315      	orrs	r5, r2
    343e:	60a5      	str	r5, [r4, #8]
	while(GCLK->STATUS.bit.SYNCBUSY);
    3440:	4b3d      	ldr	r3, [pc, #244]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    3442:	785b      	ldrb	r3, [r3, #1]
    3444:	09db      	lsrs	r3, r3, #7
    3446:	d1fb      	bne.n	3440 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x30>
	switch(sercom_id) {
    3448:	2805      	cmp	r0, #5
    344a:	d814      	bhi.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
    344c:	0080      	lsls	r0, r0, #2
    344e:	4b3c      	ldr	r3, [pc, #240]	; (3540 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x130>)
    3450:	581b      	ldr	r3, [r3, r0]
    3452:	469f      	mov	pc, r3
		case SERCOMSAMD21::SercomID::Sercom0:
			PM->APBCMASK.bit.SERCOM0_ = 0x1u;
    3454:	4a3b      	ldr	r2, [pc, #236]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    3456:	6a10      	ldr	r0, [r2, #32]
    3458:	2304      	movs	r3, #4
    345a:	4303      	orrs	r3, r0
    345c:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM0_CORE;
    345e:	0209      	lsls	r1, r1, #8
    3460:	23f0      	movs	r3, #240	; 0xf0
    3462:	011b      	lsls	r3, r3, #4
    3464:	400b      	ands	r3, r1
    3466:	4938      	ldr	r1, [pc, #224]	; (3548 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x138>)
    3468:	4319      	orrs	r1, r3
    346a:	4b33      	ldr	r3, [pc, #204]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    346c:	8059      	strh	r1, [r3, #2]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    346e:	2280      	movs	r2, #128	; 0x80
    3470:	0092      	lsls	r2, r2, #2
    3472:	4b36      	ldr	r3, [pc, #216]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    3474:	601a      	str	r2, [r3, #0]
			break;
		default:
			//do nothing
			break;
	}
	while(GCLK->STATUS.bit.SYNCBUSY);  // Wait for write to complete
    3476:	4b30      	ldr	r3, [pc, #192]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    3478:	785b      	ldrb	r3, [r3, #1]
    347a:	09db      	lsrs	r3, r3, #7
    347c:	d1fb      	bne.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
}
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			PM->APBCMASK.bit.SERCOM1_ = 0x1u;
    3480:	4a30      	ldr	r2, [pc, #192]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    3482:	6a10      	ldr	r0, [r2, #32]
    3484:	2308      	movs	r3, #8
    3486:	4303      	orrs	r3, r0
    3488:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM1_CORE;
    348a:	0209      	lsls	r1, r1, #8
    348c:	23f0      	movs	r3, #240	; 0xf0
    348e:	011b      	lsls	r3, r3, #4
    3490:	400b      	ands	r3, r1
    3492:	492f      	ldr	r1, [pc, #188]	; (3550 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x140>)
    3494:	4319      	orrs	r1, r3
    3496:	4b28      	ldr	r3, [pc, #160]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    3498:	8059      	strh	r1, [r3, #2]
    349a:	2280      	movs	r2, #128	; 0x80
    349c:	00d2      	lsls	r2, r2, #3
    349e:	4b2b      	ldr	r3, [pc, #172]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    34a0:	601a      	str	r2, [r3, #0]
    34a2:	e7e8      	b.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
			PM->APBCMASK.bit.SERCOM2_ = 0x1u;
    34a4:	4a27      	ldr	r2, [pc, #156]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    34a6:	6a10      	ldr	r0, [r2, #32]
    34a8:	2310      	movs	r3, #16
    34aa:	4303      	orrs	r3, r0
    34ac:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM2_CORE;
    34ae:	0209      	lsls	r1, r1, #8
    34b0:	23f0      	movs	r3, #240	; 0xf0
    34b2:	011b      	lsls	r3, r3, #4
    34b4:	400b      	ands	r3, r1
    34b6:	4927      	ldr	r1, [pc, #156]	; (3554 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x144>)
    34b8:	4319      	orrs	r1, r3
    34ba:	4b1f      	ldr	r3, [pc, #124]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    34bc:	8059      	strh	r1, [r3, #2]
    34be:	2280      	movs	r2, #128	; 0x80
    34c0:	0112      	lsls	r2, r2, #4
    34c2:	4b22      	ldr	r3, [pc, #136]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    34c4:	601a      	str	r2, [r3, #0]
    34c6:	e7d6      	b.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
			PM->APBCMASK.bit.SERCOM3_ = 0x1u;
    34c8:	4a1e      	ldr	r2, [pc, #120]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    34ca:	6a10      	ldr	r0, [r2, #32]
    34cc:	2320      	movs	r3, #32
    34ce:	4303      	orrs	r3, r0
    34d0:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM3_CORE;
    34d2:	0209      	lsls	r1, r1, #8
    34d4:	23f0      	movs	r3, #240	; 0xf0
    34d6:	011b      	lsls	r3, r3, #4
    34d8:	400b      	ands	r3, r1
    34da:	491f      	ldr	r1, [pc, #124]	; (3558 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x148>)
    34dc:	4319      	orrs	r1, r3
    34de:	4b16      	ldr	r3, [pc, #88]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    34e0:	8059      	strh	r1, [r3, #2]
    34e2:	2280      	movs	r2, #128	; 0x80
    34e4:	0152      	lsls	r2, r2, #5
    34e6:	4b19      	ldr	r3, [pc, #100]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    34e8:	601a      	str	r2, [r3, #0]
    34ea:	e7c4      	b.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
			PM->APBCMASK.bit.SERCOM4_ = 0x1u;
    34ec:	4a15      	ldr	r2, [pc, #84]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    34ee:	6a10      	ldr	r0, [r2, #32]
    34f0:	2340      	movs	r3, #64	; 0x40
    34f2:	4303      	orrs	r3, r0
    34f4:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM4_CORE;
    34f6:	0209      	lsls	r1, r1, #8
    34f8:	23f0      	movs	r3, #240	; 0xf0
    34fa:	011b      	lsls	r3, r3, #4
    34fc:	400b      	ands	r3, r1
    34fe:	4917      	ldr	r1, [pc, #92]	; (355c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x14c>)
    3500:	4319      	orrs	r1, r3
    3502:	4b0d      	ldr	r3, [pc, #52]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    3504:	8059      	strh	r1, [r3, #2]
    3506:	2280      	movs	r2, #128	; 0x80
    3508:	0192      	lsls	r2, r2, #6
    350a:	4b10      	ldr	r3, [pc, #64]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    350c:	601a      	str	r2, [r3, #0]
    350e:	e7b2      	b.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
			PM->APBCMASK.bit.SERCOM5_ = 0x1u;
    3510:	4a0c      	ldr	r2, [pc, #48]	; (3544 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x134>)
    3512:	6a10      	ldr	r0, [r2, #32]
    3514:	2380      	movs	r3, #128	; 0x80
    3516:	4303      	orrs	r3, r0
    3518:	6213      	str	r3, [r2, #32]
			GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN(gen_clk_num) | GCLK_CLKCTRL_ID_SERCOM5_CORE;
    351a:	0209      	lsls	r1, r1, #8
    351c:	23f0      	movs	r3, #240	; 0xf0
    351e:	011b      	lsls	r3, r3, #4
    3520:	4019      	ands	r1, r3
    3522:	4b0f      	ldr	r3, [pc, #60]	; (3560 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x150>)
    3524:	4319      	orrs	r1, r3
    3526:	4b04      	ldr	r3, [pc, #16]	; (3538 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x128>)
    3528:	8059      	strh	r1, [r3, #2]
    352a:	2280      	movs	r2, #128	; 0x80
    352c:	01d2      	lsls	r2, r2, #7
    352e:	4b07      	ldr	r3, [pc, #28]	; (354c <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x13c>)
    3530:	601a      	str	r2, [r3, #0]
    3532:	e7a0      	b.n	3476 <_ZN12SERCOMSAMD2117EnableSercomClockEhNS_12GenericClockEtb+0x66>
    3534:	00020600 	.word	0x00020600
    3538:	40000c00 	.word	0x40000c00
    353c:	ffdfffff 	.word	0xffdfffff
    3540:	00004f0c 	.word	0x00004f0c
    3544:	40000400 	.word	0x40000400
    3548:	00004014 	.word	0x00004014
    354c:	e000e100 	.word	0xe000e100
    3550:	00004015 	.word	0x00004015
    3554:	00004016 	.word	0x00004016
    3558:	00004017 	.word	0x00004017
    355c:	00004018 	.word	0x00004018
    3560:	00004019 	.word	0x00004019

00003564 <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE>:

void SERCOMHAL::ConfigPin(SERCOMHAL::Pinout pin, bool output, bool multiplexed, SERCOMHAL::PullResistor pull)
{
    3564:	b5f0      	push	{r4, r5, r6, r7, lr}
    3566:	b083      	sub	sp, #12
    3568:	0a04      	lsrs	r4, r0, #8
    356a:	0c05      	lsrs	r5, r0, #16
    356c:	9001      	str	r0, [sp, #4]
	PORT->Group[pin.port].PINCFG[pin.pin].reg = PORT_PINCFG_DRVSTR | PORT_PINCFG_INEN;
    356e:	b2e4      	uxtb	r4, r4
    3570:	b2e8      	uxtb	r0, r5
    3572:	01e5      	lsls	r5, r4, #7
    3574:	4e29      	ldr	r6, [pc, #164]	; (361c <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0xb8>)
    3576:	46b4      	mov	ip, r6
    3578:	4465      	add	r5, ip
    357a:	182d      	adds	r5, r5, r0
    357c:	3540      	adds	r5, #64	; 0x40
    357e:	2642      	movs	r6, #66	; 0x42
    3580:	702e      	strb	r6, [r5, #0]
	if(output)
    3582:	2900      	cmp	r1, #0
    3584:	d024      	beq.n	35d0 <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x6c>
		PORT->Group[pin.port].DIRSET.reg = 0x1u << pin.pin;
    3586:	2101      	movs	r1, #1
    3588:	4081      	lsls	r1, r0
    358a:	01e3      	lsls	r3, r4, #7
    358c:	4463      	add	r3, ip
    358e:	6099      	str	r1, [r3, #8]
			PORT->Group[pin.port].PINCFG[pin.pin].bit.PULLEN = 0x1;
			if(pull == PullResistor::PinPullUp)
				PORT->Group[pin.port].OUTSET.reg = 0x1u << pin.pin;
		}
	}
	if(multiplexed)
    3590:	2a00      	cmp	r2, #0
    3592:	d01b      	beq.n	35cc <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x68>
	{
		PORT->Group[pin.port].PINCFG[pin.pin].bit.PMUXEN = 0x1;
    3594:	01e3      	lsls	r3, r4, #7
    3596:	4a21      	ldr	r2, [pc, #132]	; (361c <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0xb8>)
    3598:	4694      	mov	ip, r2
    359a:	4463      	add	r3, ip
    359c:	181b      	adds	r3, r3, r0
    359e:	3340      	adds	r3, #64	; 0x40
    35a0:	781a      	ldrb	r2, [r3, #0]
    35a2:	2101      	movs	r1, #1
    35a4:	430a      	orrs	r2, r1
    35a6:	701a      	strb	r2, [r3, #0]
		if(pin.pin % 2 == 0)
    35a8:	07c3      	lsls	r3, r0, #31
    35aa:	d528      	bpl.n	35fe <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x9a>
			PORT->Group[pin.port].PMUX[pin.pin / 2u].bit.PMUXE = pin.peripheral_function;
		else
			PORT->Group[pin.port].PMUX[pin.pin / 2u].bit.PMUXO = pin.peripheral_function;
    35ac:	0843      	lsrs	r3, r0, #1
    35ae:	aa01      	add	r2, sp, #4
    35b0:	7811      	ldrb	r1, [r2, #0]
    35b2:	220f      	movs	r2, #15
    35b4:	4011      	ands	r1, r2
    35b6:	01e0      	lsls	r0, r4, #7
    35b8:	4c18      	ldr	r4, [pc, #96]	; (361c <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0xb8>)
    35ba:	46a4      	mov	ip, r4
    35bc:	4460      	add	r0, ip
    35be:	18c0      	adds	r0, r0, r3
    35c0:	3030      	adds	r0, #48	; 0x30
    35c2:	7804      	ldrb	r4, [r0, #0]
    35c4:	0109      	lsls	r1, r1, #4
    35c6:	4022      	ands	r2, r4
    35c8:	430a      	orrs	r2, r1
    35ca:	7002      	strb	r2, [r0, #0]
	}
}
    35cc:	b003      	add	sp, #12
    35ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PORT->Group[pin.port].DIRCLR.reg = 0x1u << pin.pin;
    35d0:	2501      	movs	r5, #1
    35d2:	4085      	lsls	r5, r0
    35d4:	01e1      	lsls	r1, r4, #7
    35d6:	4e11      	ldr	r6, [pc, #68]	; (361c <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0xb8>)
    35d8:	46b4      	mov	ip, r6
    35da:	4461      	add	r1, ip
    35dc:	604d      	str	r5, [r1, #4]
		if(pull != PullResistor::NoPull)
    35de:	2b00      	cmp	r3, #0
    35e0:	d0d6      	beq.n	3590 <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x2c>
			PORT->Group[pin.port].PINCFG[pin.pin].bit.PULLEN = 0x1;
    35e2:	01e1      	lsls	r1, r4, #7
    35e4:	4461      	add	r1, ip
    35e6:	1809      	adds	r1, r1, r0
    35e8:	3140      	adds	r1, #64	; 0x40
    35ea:	780e      	ldrb	r6, [r1, #0]
    35ec:	2704      	movs	r7, #4
    35ee:	433e      	orrs	r6, r7
    35f0:	700e      	strb	r6, [r1, #0]
			if(pull == PullResistor::PinPullUp)
    35f2:	2b01      	cmp	r3, #1
    35f4:	d1cc      	bne.n	3590 <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x2c>
				PORT->Group[pin.port].OUTSET.reg = 0x1u << pin.pin;
    35f6:	01e3      	lsls	r3, r4, #7
    35f8:	4463      	add	r3, ip
    35fa:	619d      	str	r5, [r3, #24]
    35fc:	e7c8      	b.n	3590 <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x2c>
			PORT->Group[pin.port].PMUX[pin.pin / 2u].bit.PMUXE = pin.peripheral_function;
    35fe:	0843      	lsrs	r3, r0, #1
    3600:	aa01      	add	r2, sp, #4
    3602:	7811      	ldrb	r1, [r2, #0]
    3604:	01e0      	lsls	r0, r4, #7
    3606:	4460      	add	r0, ip
    3608:	18c0      	adds	r0, r0, r3
    360a:	3030      	adds	r0, #48	; 0x30
    360c:	7803      	ldrb	r3, [r0, #0]
    360e:	220f      	movs	r2, #15
    3610:	400a      	ands	r2, r1
    3612:	210f      	movs	r1, #15
    3614:	438b      	bics	r3, r1
    3616:	4313      	orrs	r3, r2
    3618:	7003      	strb	r3, [r0, #0]
    361a:	e7d7      	b.n	35cc <_ZN9SERCOMHAL9ConfigPinENS_6PinoutEbbNS_12PullResistorE+0x68>
    361c:	41004400 	.word	0x41004400

00003620 <_ZN9SERCOMHAL11GetPinStateENS_6PinoutE>:

bool SERCOMHAL::GetPinState(SERCOMHAL::Pinout pin)
{
    3620:	b082      	sub	sp, #8
    3622:	0a03      	lsrs	r3, r0, #8
    3624:	9001      	str	r0, [sp, #4]
	return ((PORT->Group[pin.port].IN.reg >> pin.pin) & 0x1);
    3626:	b2db      	uxtb	r3, r3
    3628:	01db      	lsls	r3, r3, #7
    362a:	4a06      	ldr	r2, [pc, #24]	; (3644 <_ZN9SERCOMHAL11GetPinStateENS_6PinoutE+0x24>)
    362c:	4694      	mov	ip, r2
    362e:	4463      	add	r3, ip
    3630:	6a18      	ldr	r0, [r3, #32]
    3632:	ab01      	add	r3, sp, #4
    3634:	789b      	ldrb	r3, [r3, #2]
    3636:	40d8      	lsrs	r0, r3
    3638:	0003      	movs	r3, r0
    363a:	2001      	movs	r0, #1
    363c:	4018      	ands	r0, r3
}
    363e:	b002      	add	sp, #8
    3640:	4770      	bx	lr
    3642:	46c0      	nop			; (mov r8, r8)
    3644:	41004400 	.word	0x41004400

00003648 <_ZN9SERCOMHAL10OutputHighENS_6PinoutE>:

void SERCOMHAL::OutputHigh(SERCOMHAL::Pinout output_pin)
{
    3648:	b082      	sub	sp, #8
    364a:	0a03      	lsrs	r3, r0, #8
    364c:	0c00      	lsrs	r0, r0, #16
	PORT->Group[output_pin.port].OUTSET.reg = 0x1 << output_pin.pin;
    364e:	b2db      	uxtb	r3, r3
    3650:	b2c0      	uxtb	r0, r0
    3652:	2201      	movs	r2, #1
    3654:	4082      	lsls	r2, r0
    3656:	01db      	lsls	r3, r3, #7
    3658:	4902      	ldr	r1, [pc, #8]	; (3664 <_ZN9SERCOMHAL10OutputHighENS_6PinoutE+0x1c>)
    365a:	468c      	mov	ip, r1
    365c:	4463      	add	r3, ip
    365e:	619a      	str	r2, [r3, #24]
}
    3660:	b002      	add	sp, #8
    3662:	4770      	bx	lr
    3664:	41004400 	.word	0x41004400

00003668 <_ZN9SERCOMHAL9OutputLowENS_6PinoutE>:

void SERCOMHAL::OutputLow(SERCOMHAL::Pinout output_pin)
{
    3668:	b082      	sub	sp, #8
    366a:	0a03      	lsrs	r3, r0, #8
    366c:	0c00      	lsrs	r0, r0, #16
	PORT->Group[output_pin.port].OUTCLR.reg = 0x1 << output_pin.pin;
    366e:	b2db      	uxtb	r3, r3
    3670:	b2c0      	uxtb	r0, r0
    3672:	2201      	movs	r2, #1
    3674:	4082      	lsls	r2, r0
    3676:	01db      	lsls	r3, r3, #7
    3678:	4902      	ldr	r1, [pc, #8]	; (3684 <_ZN9SERCOMHAL9OutputLowENS_6PinoutE+0x1c>)
    367a:	468c      	mov	ip, r1
    367c:	4463      	add	r3, ip
    367e:	615a      	str	r2, [r3, #20]
}
    3680:	b002      	add	sp, #8
    3682:	4770      	bx	lr
    3684:	41004400 	.word	0x41004400

00003688 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh>:
SERCOMSAMD21::GenericClock spi_genclk = SERCOMSAMD21::GEN_CLK_2;
uint16_t spi_genclk_divisor = 0;
bool spi_genclk_run_stdby = false;

void SPISAMD21::GetPeripheralDefaults(SPIHAL::Peripheral * peripheral, SERCOMHAL::SercomID sercom_id)
{
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	0004      	movs	r4, r0
	peripheral->pad_config = PadConfig::DO2_DI0_SCK3_CSS1;
    368c:	2304      	movs	r3, #4
    368e:	7043      	strb	r3, [r0, #1]
	peripheral->baud_value =  50000;
    3690:	4b4d      	ldr	r3, [pc, #308]	; (37c8 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x140>)
    3692:	6103      	str	r3, [r0, #16]
	peripheral->clock_mode =  SPIHAL::ClockMode::Mode0;
    3694:	2300      	movs	r3, #0
    3696:	6143      	str	r3, [r0, #20]
	peripheral->endianess = SPIHAL::Endian::MSB;
    3698:	6183      	str	r3, [r0, #24]
	peripheral->sercom_id = sercom_id;
    369a:	7001      	strb	r1, [r0, #0]
	switch(sercom_id)
    369c:	2905      	cmp	r1, #5
    369e:	d817      	bhi.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
    36a0:	0089      	lsls	r1, r1, #2
    36a2:	4b4a      	ldr	r3, [pc, #296]	; (37cc <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x144>)
    36a4:	585b      	ldr	r3, [r3, r1]
    36a6:	469f      	mov	pc, r3
	{
		case SERCOMSAMD21::SercomID::Sercom0:
			peripheral->mosi_pin = (SERCOMHAL::Pinout){3, 0, 6};
    36a8:	4d49      	ldr	r5, [pc, #292]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    36aa:	3002      	adds	r0, #2
    36ac:	2203      	movs	r2, #3
    36ae:	0029      	movs	r1, r5
    36b0:	4e48      	ldr	r6, [pc, #288]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    36b2:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){3, 0, 4};
    36b4:	1d60      	adds	r0, r4, #5
    36b6:	1d29      	adds	r1, r5, #4
    36b8:	2203      	movs	r2, #3
    36ba:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){3, 0, 7};
    36bc:	892b      	ldrh	r3, [r5, #8]
    36be:	8123      	strh	r3, [r4, #8]
    36c0:	7aab      	ldrb	r3, [r5, #10]
    36c2:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){3, 0, 5};
    36c4:	0020      	movs	r0, r4
    36c6:	300b      	adds	r0, #11
    36c8:	0029      	movs	r1, r5
    36ca:	310c      	adds	r1, #12
    36cc:	2203      	movs	r2, #3
    36ce:	47b0      	blx	r6
			break;
		default:
			//do nothing
			break;
	}
}
    36d0:	bd70      	pop	{r4, r5, r6, pc}
			peripheral->mosi_pin = (SERCOMHAL::Pinout){2, 0, 18};
    36d2:	4d3f      	ldr	r5, [pc, #252]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    36d4:	3002      	adds	r0, #2
    36d6:	0029      	movs	r1, r5
    36d8:	3110      	adds	r1, #16
    36da:	2203      	movs	r2, #3
    36dc:	4e3d      	ldr	r6, [pc, #244]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    36de:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){2, 0, 16};
    36e0:	1d60      	adds	r0, r4, #5
    36e2:	0029      	movs	r1, r5
    36e4:	3114      	adds	r1, #20
    36e6:	2203      	movs	r2, #3
    36e8:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){2, 0, 19};
    36ea:	8b2b      	ldrh	r3, [r5, #24]
    36ec:	8123      	strh	r3, [r4, #8]
    36ee:	7eab      	ldrb	r3, [r5, #26]
    36f0:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){2, 0, 17};
    36f2:	0020      	movs	r0, r4
    36f4:	300b      	adds	r0, #11
    36f6:	0029      	movs	r1, r5
    36f8:	311c      	adds	r1, #28
    36fa:	2203      	movs	r2, #3
    36fc:	47b0      	blx	r6
			break;	
    36fe:	e7e7      	b.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
			peripheral->mosi_pin = (SERCOMHAL::Pinout){3, 0, 10};
    3700:	4d33      	ldr	r5, [pc, #204]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    3702:	3002      	adds	r0, #2
    3704:	0029      	movs	r1, r5
    3706:	3120      	adds	r1, #32
    3708:	2203      	movs	r2, #3
    370a:	4e32      	ldr	r6, [pc, #200]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    370c:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){3, 0, 8};
    370e:	1d60      	adds	r0, r4, #5
    3710:	0029      	movs	r1, r5
    3712:	3124      	adds	r1, #36	; 0x24
    3714:	2203      	movs	r2, #3
    3716:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){3, 0, 11};
    3718:	002b      	movs	r3, r5
    371a:	3328      	adds	r3, #40	; 0x28
    371c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    371e:	8122      	strh	r2, [r4, #8]
    3720:	789b      	ldrb	r3, [r3, #2]
    3722:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){3, 0, 9};
    3724:	0020      	movs	r0, r4
    3726:	300b      	adds	r0, #11
    3728:	0029      	movs	r1, r5
    372a:	312c      	adds	r1, #44	; 0x2c
    372c:	2203      	movs	r2, #3
    372e:	47b0      	blx	r6
			break;
    3730:	e7ce      	b.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
			peripheral->mosi_pin = (SERCOMHAL::Pinout){3, 0, 18};
    3732:	4d27      	ldr	r5, [pc, #156]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    3734:	3002      	adds	r0, #2
    3736:	0029      	movs	r1, r5
    3738:	3130      	adds	r1, #48	; 0x30
    373a:	2203      	movs	r2, #3
    373c:	4e25      	ldr	r6, [pc, #148]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    373e:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){3, 0, 16};
    3740:	1d60      	adds	r0, r4, #5
    3742:	0029      	movs	r1, r5
    3744:	3134      	adds	r1, #52	; 0x34
    3746:	2203      	movs	r2, #3
    3748:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){3, 0, 19};
    374a:	002b      	movs	r3, r5
    374c:	3338      	adds	r3, #56	; 0x38
    374e:	8f2a      	ldrh	r2, [r5, #56]	; 0x38
    3750:	8122      	strh	r2, [r4, #8]
    3752:	789b      	ldrb	r3, [r3, #2]
    3754:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){3, 0, 17};
    3756:	0020      	movs	r0, r4
    3758:	300b      	adds	r0, #11
    375a:	0029      	movs	r1, r5
    375c:	313c      	adds	r1, #60	; 0x3c
    375e:	2203      	movs	r2, #3
    3760:	47b0      	blx	r6
			break;
    3762:	e7b5      	b.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
			peripheral->mosi_pin = (SERCOMHAL::Pinout){3, 1, 10};
    3764:	4d1a      	ldr	r5, [pc, #104]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    3766:	3002      	adds	r0, #2
    3768:	0029      	movs	r1, r5
    376a:	3140      	adds	r1, #64	; 0x40
    376c:	2203      	movs	r2, #3
    376e:	4e19      	ldr	r6, [pc, #100]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    3770:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){3, 0, 12};
    3772:	1d60      	adds	r0, r4, #5
    3774:	0029      	movs	r1, r5
    3776:	3144      	adds	r1, #68	; 0x44
    3778:	2203      	movs	r2, #3
    377a:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){3, 1, 11};
    377c:	002b      	movs	r3, r5
    377e:	3348      	adds	r3, #72	; 0x48
    3780:	881a      	ldrh	r2, [r3, #0]
    3782:	8122      	strh	r2, [r4, #8]
    3784:	789b      	ldrb	r3, [r3, #2]
    3786:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){3, 1, 9};
    3788:	0020      	movs	r0, r4
    378a:	300b      	adds	r0, #11
    378c:	0029      	movs	r1, r5
    378e:	314c      	adds	r1, #76	; 0x4c
    3790:	2203      	movs	r2, #3
    3792:	47b0      	blx	r6
			break;
    3794:	e79c      	b.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
			peripheral->mosi_pin = (SERCOMHAL::Pinout){3, 1, 22};
    3796:	4d0e      	ldr	r5, [pc, #56]	; (37d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x148>)
    3798:	3002      	adds	r0, #2
    379a:	0029      	movs	r1, r5
    379c:	3150      	adds	r1, #80	; 0x50
    379e:	2203      	movs	r2, #3
    37a0:	4e0c      	ldr	r6, [pc, #48]	; (37d4 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x14c>)
    37a2:	47b0      	blx	r6
			peripheral->miso_pin = (SERCOMHAL::Pinout){3, 0, 22};
    37a4:	1d60      	adds	r0, r4, #5
    37a6:	0029      	movs	r1, r5
    37a8:	3154      	adds	r1, #84	; 0x54
    37aa:	2203      	movs	r2, #3
    37ac:	47b0      	blx	r6
			peripheral->sck_pin = (SERCOMHAL::Pinout){3, 1, 23};
    37ae:	002b      	movs	r3, r5
    37b0:	3358      	adds	r3, #88	; 0x58
    37b2:	881a      	ldrh	r2, [r3, #0]
    37b4:	8122      	strh	r2, [r4, #8]
    37b6:	789b      	ldrb	r3, [r3, #2]
    37b8:	72a3      	strb	r3, [r4, #10]
			peripheral->ssl_pin = (SERCOMHAL::Pinout){3, 0, 23};
    37ba:	0020      	movs	r0, r4
    37bc:	300b      	adds	r0, #11
    37be:	0029      	movs	r1, r5
    37c0:	315c      	adds	r1, #92	; 0x5c
    37c2:	2203      	movs	r2, #3
    37c4:	47b0      	blx	r6
}
    37c6:	e783      	b.n	36d0 <_ZN9SPISAMD2121GetPeripheralDefaultsEPN6SPIHAL10PeripheralEh+0x48>
    37c8:	0000c350 	.word	0x0000c350
    37cc:	00004f24 	.word	0x00004f24
    37d0:	00004f74 	.word	0x00004f74
    37d4:	00004961 	.word	0x00004961

000037d8 <_ZN9SPISAMD219SetGenClkEN12SERCOMSAMD2112GenericClockEtb>:

void SPISAMD21::SetGenClk(SERCOMSAMD21::GenericClock gen_clk_id, uint16_t clock_divisor, bool run_standby)
{
	spi_genclk = gen_clk_id;
    37d8:	4b02      	ldr	r3, [pc, #8]	; (37e4 <_ZN9SPISAMD219SetGenClkEN12SERCOMSAMD2112GenericClockEtb+0xc>)
    37da:	7018      	strb	r0, [r3, #0]
	spi_genclk_divisor = clock_divisor;
    37dc:	4b02      	ldr	r3, [pc, #8]	; (37e8 <_ZN9SPISAMD219SetGenClkEN12SERCOMSAMD2112GenericClockEtb+0x10>)
    37de:	8019      	strh	r1, [r3, #0]
	spi_genclk_run_stdby = run_standby;
    37e0:	709a      	strb	r2, [r3, #2]
}
    37e2:	4770      	bx	lr
    37e4:	2000002c 	.word	0x2000002c
    37e8:	20000afe 	.word	0x20000afe

000037ec <_ZN6SPIHAL21GetPeripheralDefaultsEPNS_10PeripheralE>:

void SPIHAL::GetPeripheralDefaults(SPIHAL::Peripheral * peripheral)
{
    37ec:	b510      	push	{r4, lr}
	SPISAMD21::GetPeripheralDefaults(peripheral, SERCOMSAMD21::SercomID::Sercom4);	
    37ee:	2104      	movs	r1, #4
    37f0:	4b01      	ldr	r3, [pc, #4]	; (37f8 <_ZN6SPIHAL21GetPeripheralDefaultsEPNS_10PeripheralE+0xc>)
    37f2:	4798      	blx	r3
}
    37f4:	bd10      	pop	{r4, pc}
    37f6:	46c0      	nop			; (mov r8, r8)
    37f8:	00003689 	.word	0x00003689

000037fc <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb>:

void SPIHAL::InitSercom(SPIHAL::Peripheral * peripheral, bool is_client)
{
    37fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37fe:	46ce      	mov	lr, r9
    3800:	4647      	mov	r7, r8
    3802:	b580      	push	{r7, lr}
    3804:	0005      	movs	r5, r0
    3806:	1e0e      	subs	r6, r1, #0
	bool miso_pin_type = false;
	bool mosi_pin_type = true;
	bool sck_pin_type = true;
	unsigned char spi_mode = 0x3;
	if(is_client)
    3808:	d13c      	bne.n	3884 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x88>
	unsigned char spi_mode = 0x3;
    380a:	2303      	movs	r3, #3
    380c:	4699      	mov	r9, r3
	bool mosi_pin_type = true;
    380e:	3b02      	subs	r3, #2
    3810:	001f      	movs	r7, r3
		mosi_pin_type = false;
		sck_pin_type = false;
		spi_mode = 0x2;
	}
	//preset: 8MHz osc set and enabled, fed into clock generator 0
	SERCOMHAL::ConfigPin(peripheral->miso_pin, miso_pin_type, true);
    3812:	796b      	ldrb	r3, [r5, #5]
    3814:	79a8      	ldrb	r0, [r5, #6]
    3816:	0200      	lsls	r0, r0, #8
    3818:	4303      	orrs	r3, r0
    381a:	79e8      	ldrb	r0, [r5, #7]
    381c:	0400      	lsls	r0, r0, #16
    381e:	4318      	orrs	r0, r3
    3820:	2300      	movs	r3, #0
    3822:	2201      	movs	r2, #1
    3824:	4c66      	ldr	r4, [pc, #408]	; (39c0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1c4>)
    3826:	47a0      	blx	r4
	SERCOMHAL::ConfigPin(peripheral->mosi_pin, mosi_pin_type, true);
    3828:	886b      	ldrh	r3, [r5, #2]
    382a:	7928      	ldrb	r0, [r5, #4]
    382c:	0400      	lsls	r0, r0, #16
    382e:	4318      	orrs	r0, r3
    3830:	2300      	movs	r3, #0
    3832:	2201      	movs	r2, #1
    3834:	0039      	movs	r1, r7
    3836:	47a0      	blx	r4
	SERCOMHAL::ConfigPin(peripheral->sck_pin, sck_pin_type, true);
    3838:	2300      	movs	r3, #0
    383a:	2201      	movs	r2, #1
    383c:	0039      	movs	r1, r7
    383e:	68a8      	ldr	r0, [r5, #8]
    3840:	47a0      	blx	r4
	if(is_client)
    3842:	2e00      	cmp	r6, #0
    3844:	d023      	beq.n	388e <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x92>
		SERCOMHAL::ConfigPin(peripheral->ssl_pin, false, true);	
    3846:	7aeb      	ldrb	r3, [r5, #11]
    3848:	7b28      	ldrb	r0, [r5, #12]
    384a:	0200      	lsls	r0, r0, #8
    384c:	4303      	orrs	r3, r0
    384e:	7b68      	ldrb	r0, [r5, #13]
    3850:	0400      	lsls	r0, r0, #16
    3852:	4318      	orrs	r0, r3
    3854:	2300      	movs	r3, #0
    3856:	2201      	movs	r2, #1
    3858:	2100      	movs	r1, #0
    385a:	4c59      	ldr	r4, [pc, #356]	; (39c0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1c4>)
    385c:	47a0      	blx	r4
	else
	{
		SERCOMHAL::ConfigPin(peripheral->ssl_pin, true, false);
		SERCOMHAL::OutputHigh(peripheral->ssl_pin);
	}
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(peripheral->sercom_id);
    385e:	7828      	ldrb	r0, [r5, #0]
    3860:	4b58      	ldr	r3, [pc, #352]	; (39c4 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1c8>)
    3862:	4798      	blx	r3
    3864:	0004      	movs	r4, r0
	SERCOMSAMD21::EnableSercomClock(peripheral->sercom_id, spi_genclk, spi_genclk_divisor, spi_genclk_run_stdby);
    3866:	7828      	ldrb	r0, [r5, #0]
    3868:	4a57      	ldr	r2, [pc, #348]	; (39c8 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1cc>)
    386a:	7893      	ldrb	r3, [r2, #2]
    386c:	8812      	ldrh	r2, [r2, #0]
    386e:	4957      	ldr	r1, [pc, #348]	; (39cc <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1d0>)
    3870:	7809      	ldrb	r1, [r1, #0]
    3872:	4f57      	ldr	r7, [pc, #348]	; (39d0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1d4>)
    3874:	47b8      	blx	r7
	uint8_t mosi = 0;
	uint8_t miso = 0;
	switch(peripheral->pad_config)
    3876:	786b      	ldrb	r3, [r5, #1]
    3878:	2b07      	cmp	r3, #7
    387a:	d81e      	bhi.n	38ba <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xbe>
    387c:	009b      	lsls	r3, r3, #2
    387e:	4a55      	ldr	r2, [pc, #340]	; (39d4 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1d8>)
    3880:	58d3      	ldr	r3, [r2, r3]
    3882:	469f      	mov	pc, r3
		spi_mode = 0x2;
    3884:	2302      	movs	r3, #2
    3886:	4699      	mov	r9, r3
		mosi_pin_type = false;
    3888:	2300      	movs	r3, #0
    388a:	001f      	movs	r7, r3
    388c:	e7c1      	b.n	3812 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x16>
		SERCOMHAL::ConfigPin(peripheral->ssl_pin, true, false);
    388e:	7aeb      	ldrb	r3, [r5, #11]
    3890:	7b28      	ldrb	r0, [r5, #12]
    3892:	0200      	lsls	r0, r0, #8
    3894:	4303      	orrs	r3, r0
    3896:	7b68      	ldrb	r0, [r5, #13]
    3898:	0400      	lsls	r0, r0, #16
    389a:	4318      	orrs	r0, r3
    389c:	2300      	movs	r3, #0
    389e:	2200      	movs	r2, #0
    38a0:	2101      	movs	r1, #1
    38a2:	4f47      	ldr	r7, [pc, #284]	; (39c0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1c4>)
    38a4:	47b8      	blx	r7
		SERCOMHAL::OutputHigh(peripheral->ssl_pin);
    38a6:	7aeb      	ldrb	r3, [r5, #11]
    38a8:	7b28      	ldrb	r0, [r5, #12]
    38aa:	0200      	lsls	r0, r0, #8
    38ac:	4303      	orrs	r3, r0
    38ae:	7b68      	ldrb	r0, [r5, #13]
    38b0:	0400      	lsls	r0, r0, #16
    38b2:	4318      	orrs	r0, r3
    38b4:	4b48      	ldr	r3, [pc, #288]	; (39d8 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1dc>)
    38b6:	4798      	blx	r3
    38b8:	e7d1      	b.n	385e <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x62>
	uint8_t miso = 0;
    38ba:	2300      	movs	r3, #0
	uint8_t mosi = 0;
    38bc:	2200      	movs	r2, #0
    38be:	e016      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO0_DI2_SCK1_CSS2:
			miso = 0x2u;
			mosi = 0x0u;
			break;
		case SPISAMD21::PadConfig::DO0_DI3_SCK1_CSS2:
			miso = 0x3u;	
    38c0:	2303      	movs	r3, #3
			mosi = 0x0u;
    38c2:	2200      	movs	r2, #0
			break;
    38c4:	e013      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO0_DI1_SCK3_CSS1:
			miso = 0x1u;
    38c6:	2301      	movs	r3, #1
			mosi = 0x3u;
    38c8:	2203      	movs	r2, #3
			break;
    38ca:	e010      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO0_DI2_SCK3_CSS1:
			miso = 0x2u;
    38cc:	2302      	movs	r3, #2
			mosi = 0x3u;
    38ce:	2203      	movs	r2, #3
			break;
    38d0:	e00d      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO2_DI0_SCK3_CSS1:
			miso = 0x0u;
    38d2:	2300      	movs	r3, #0
			mosi = 0x1u;
    38d4:	2201      	movs	r2, #1
			break;
    38d6:	e00a      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO2_DI1_SCK3_CSS1:
			miso = 0x1u;
    38d8:	2301      	movs	r3, #1
			mosi = 0x1u;		
    38da:	2201      	movs	r2, #1
			break;
    38dc:	e007      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO3_DI0_SCK1_CSS2:
			miso = 0x0u;
    38de:	2300      	movs	r3, #0
			mosi = 0x2u;
    38e0:	2202      	movs	r2, #2
			break;
    38e2:	e004      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
		case SPISAMD21::PadConfig::DO3_DI2_SCK1_CSS2:
			miso = 0x2u;
    38e4:	2302      	movs	r3, #2
			mosi = 0x2u;
    38e6:	2202      	movs	r2, #2
			break;
    38e8:	e001      	b.n	38ee <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0xf2>
			miso = 0x2u;
    38ea:	2302      	movs	r3, #2
			mosi = 0x0u;
    38ec:	2200      	movs	r2, #0
		default:
			//do nothing
			break;
	}
	//set up miso,mosi
	sercom_ptr->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_DIPO(miso) | SERCOM_SPI_CTRLA_DOPO(mosi) | SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_MODE(spi_mode);
    38ee:	051b      	lsls	r3, r3, #20
    38f0:	0412      	lsls	r2, r2, #16
    38f2:	4313      	orrs	r3, r2
    38f4:	464a      	mov	r2, r9
    38f6:	0097      	lsls	r7, r2, #2
    38f8:	433b      	orrs	r3, r7
    38fa:	2280      	movs	r2, #128	; 0x80
    38fc:	0052      	lsls	r2, r2, #1
    38fe:	4313      	orrs	r3, r2
    3900:	6023      	str	r3, [r4, #0]
	switch(peripheral->clock_mode) {
    3902:	696b      	ldr	r3, [r5, #20]
    3904:	2b01      	cmp	r3, #1
    3906:	d03e      	beq.n	3986 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x18a>
    3908:	dd0e      	ble.n	3928 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x12c>
    390a:	2b02      	cmp	r3, #2
    390c:	d045      	beq.n	399a <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x19e>
    390e:	2b03      	cmp	r3, #3
    3910:	d114      	bne.n	393c <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x140>
		case ClockMode::Mode2:
			sercom_ptr->SPI.CTRLA.bit.CPOL = 1;
			sercom_ptr->SPI.CTRLA.bit.CPHA = 0;
			break;
		case ClockMode::Mode3:
			sercom_ptr->SPI.CTRLA.bit.CPOL = 1;
    3912:	6822      	ldr	r2, [r4, #0]
    3914:	2380      	movs	r3, #128	; 0x80
    3916:	059b      	lsls	r3, r3, #22
    3918:	4313      	orrs	r3, r2
    391a:	6023      	str	r3, [r4, #0]
			sercom_ptr->SPI.CTRLA.bit.CPHA = 1;
    391c:	6822      	ldr	r2, [r4, #0]
    391e:	2380      	movs	r3, #128	; 0x80
    3920:	055b      	lsls	r3, r3, #21
    3922:	4313      	orrs	r3, r2
    3924:	6023      	str	r3, [r4, #0]
			break;
    3926:	e009      	b.n	393c <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x140>
	switch(peripheral->clock_mode) {
    3928:	2b00      	cmp	r3, #0
    392a:	d107      	bne.n	393c <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x140>
			sercom_ptr->SPI.CTRLA.bit.CPOL = 0;
    392c:	6822      	ldr	r2, [r4, #0]
    392e:	4b2b      	ldr	r3, [pc, #172]	; (39dc <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1e0>)
    3930:	4013      	ands	r3, r2
    3932:	6023      	str	r3, [r4, #0]
			sercom_ptr->SPI.CTRLA.bit.CPHA = 0;
    3934:	6822      	ldr	r2, [r4, #0]
    3936:	4b2a      	ldr	r3, [pc, #168]	; (39e0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1e4>)
    3938:	4013      	ands	r3, r2
    393a:	6023      	str	r3, [r4, #0]
	}
	sercom_ptr->SPI.CTRLA.bit.DORD = (peripheral->endianess == Endian::LSB);
    393c:	69ab      	ldr	r3, [r5, #24]
    393e:	3b01      	subs	r3, #1
    3940:	4259      	negs	r1, r3
    3942:	4159      	adcs	r1, r3
    3944:	6822      	ldr	r2, [r4, #0]
    3946:	078b      	lsls	r3, r1, #30
    3948:	4926      	ldr	r1, [pc, #152]	; (39e4 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1e8>)
    394a:	400a      	ands	r2, r1
    394c:	4313      	orrs	r3, r2
    394e:	6023      	str	r3, [r4, #0]
	if(is_client)
    3950:	2e00      	cmp	r6, #0
    3952:	d02c      	beq.n	39ae <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1b2>
	{
		sercom_ptr->SPI.CTRLB.bit.PLOADEN = 0x1;
    3954:	6862      	ldr	r2, [r4, #4]
    3956:	2340      	movs	r3, #64	; 0x40
    3958:	4313      	orrs	r3, r2
    395a:	6063      	str	r3, [r4, #4]
		sercom_ptr->SPI.CTRLB.bit.SSDE = 0x1;
    395c:	6862      	ldr	r2, [r4, #4]
    395e:	2380      	movs	r3, #128	; 0x80
    3960:	009b      	lsls	r3, r3, #2
    3962:	4313      	orrs	r3, r2
    3964:	6063      	str	r3, [r4, #4]
	} else
		sercom_ptr->SPI.BAUD.reg = (uint8_t)(8000000/(2 * peripheral->baud_value) - 1);
	sercom_ptr->SPI.CTRLB.bit.RXEN = 0x1;
    3966:	6862      	ldr	r2, [r4, #4]
    3968:	2380      	movs	r3, #128	; 0x80
    396a:	029b      	lsls	r3, r3, #10
    396c:	4313      	orrs	r3, r2
    396e:	6063      	str	r3, [r4, #4]
	sercom_ptr->SPI.CTRLA.bit.ENABLE = 0x1;
    3970:	6822      	ldr	r2, [r4, #0]
    3972:	2302      	movs	r3, #2
    3974:	4313      	orrs	r3, r2
    3976:	6023      	str	r3, [r4, #0]
	while(sercom_ptr->SPI.SYNCBUSY.bit.ENABLE);
    3978:	69e3      	ldr	r3, [r4, #28]
    397a:	079b      	lsls	r3, r3, #30
    397c:	d4fc      	bmi.n	3978 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x17c>
}
    397e:	bc0c      	pop	{r2, r3}
    3980:	4690      	mov	r8, r2
    3982:	4699      	mov	r9, r3
    3984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sercom_ptr->SPI.CTRLA.bit.CPOL = 0;
    3986:	6822      	ldr	r2, [r4, #0]
    3988:	4b14      	ldr	r3, [pc, #80]	; (39dc <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1e0>)
    398a:	4013      	ands	r3, r2
    398c:	6023      	str	r3, [r4, #0]
			sercom_ptr->SPI.CTRLA.bit.CPHA = 1;
    398e:	6822      	ldr	r2, [r4, #0]
    3990:	2380      	movs	r3, #128	; 0x80
    3992:	055b      	lsls	r3, r3, #21
    3994:	4313      	orrs	r3, r2
    3996:	6023      	str	r3, [r4, #0]
			break;
    3998:	e7d0      	b.n	393c <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x140>
			sercom_ptr->SPI.CTRLA.bit.CPOL = 1;
    399a:	6822      	ldr	r2, [r4, #0]
    399c:	2380      	movs	r3, #128	; 0x80
    399e:	059b      	lsls	r3, r3, #22
    39a0:	4313      	orrs	r3, r2
    39a2:	6023      	str	r3, [r4, #0]
			sercom_ptr->SPI.CTRLA.bit.CPHA = 0;
    39a4:	6822      	ldr	r2, [r4, #0]
    39a6:	4b0e      	ldr	r3, [pc, #56]	; (39e0 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1e4>)
    39a8:	4013      	ands	r3, r2
    39aa:	6023      	str	r3, [r4, #0]
			break;
    39ac:	e7c6      	b.n	393c <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x140>
		sercom_ptr->SPI.BAUD.reg = (uint8_t)(8000000/(2 * peripheral->baud_value) - 1);
    39ae:	6929      	ldr	r1, [r5, #16]
    39b0:	0049      	lsls	r1, r1, #1
    39b2:	480d      	ldr	r0, [pc, #52]	; (39e8 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1ec>)
    39b4:	4b0d      	ldr	r3, [pc, #52]	; (39ec <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x1f0>)
    39b6:	4798      	blx	r3
    39b8:	3801      	subs	r0, #1
    39ba:	b2c0      	uxtb	r0, r0
    39bc:	7320      	strb	r0, [r4, #12]
    39be:	e7d2      	b.n	3966 <_ZN6SPIHAL10InitSercomEPNS_10PeripheralEb+0x16a>
    39c0:	00003565 	.word	0x00003565
    39c4:	000033cd 	.word	0x000033cd
    39c8:	20000afe 	.word	0x20000afe
    39cc:	2000002c 	.word	0x2000002c
    39d0:	00003411 	.word	0x00003411
    39d4:	00004f3c 	.word	0x00004f3c
    39d8:	00003649 	.word	0x00003649
    39dc:	dfffffff 	.word	0xdfffffff
    39e0:	efffffff 	.word	0xefffffff
    39e4:	bfffffff 	.word	0xbfffffff
    39e8:	007a1200 	.word	0x007a1200
    39ec:	000045dd 	.word	0x000045dd

000039f0 <_ZN6SPIHAL12DeinitSercomEh>:

void SPIHAL::DeinitSercom(SERCOMHAL::SercomID sercom_id)
{
    39f0:	b510      	push	{r4, lr}
    39f2:	0004      	movs	r4, r0
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    39f4:	4b28      	ldr	r3, [pc, #160]	; (3a98 <_ZN6SPIHAL12DeinitSercomEh+0xa8>)
    39f6:	4798      	blx	r3
	sercom_ptr->SPI.STATUS.reg = SERCOM_SPI_STATUS_RESETVALUE;
    39f8:	2300      	movs	r3, #0
    39fa:	8343      	strh	r3, [r0, #26]
	sercom_ptr->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_RESETVALUE;
    39fc:	6043      	str	r3, [r0, #4]
	while(sercom_ptr->SPI.SYNCBUSY.bit.CTRLB);
    39fe:	69c3      	ldr	r3, [r0, #28]
    3a00:	075b      	lsls	r3, r3, #29
    3a02:	d4fc      	bmi.n	39fe <_ZN6SPIHAL12DeinitSercomEh+0xe>
	sercom_ptr->SPI.CTRLA.bit.ENABLE = 0x0u;
    3a04:	6802      	ldr	r2, [r0, #0]
    3a06:	2302      	movs	r3, #2
    3a08:	439a      	bics	r2, r3
    3a0a:	6002      	str	r2, [r0, #0]
	while(sercom_ptr->SPI.SYNCBUSY.bit.ENABLE);		//Wait for write to complete
    3a0c:	69c3      	ldr	r3, [r0, #28]
    3a0e:	079b      	lsls	r3, r3, #30
    3a10:	d4fc      	bmi.n	3a0c <_ZN6SPIHAL12DeinitSercomEh+0x1c>
	switch(sercom_id)
    3a12:	2c05      	cmp	r4, #5
    3a14:	d80c      	bhi.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a16:	00a4      	lsls	r4, r4, #2
    3a18:	4b20      	ldr	r3, [pc, #128]	; (3a9c <_ZN6SPIHAL12DeinitSercomEh+0xac>)
    3a1a:	591b      	ldr	r3, [r3, r4]
    3a1c:	469f      	mov	pc, r3
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a1e:	2180      	movs	r1, #128	; 0x80
    3a20:	0089      	lsls	r1, r1, #2
    3a22:	2380      	movs	r3, #128	; 0x80
    3a24:	4a1e      	ldr	r2, [pc, #120]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a26:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a2c:	f3bf 8f6f 	isb	sy
			break;
		default:
			//do nothing
			break;
	}	
}
    3a30:	bd10      	pop	{r4, pc}
    3a32:	2180      	movs	r1, #128	; 0x80
    3a34:	00c9      	lsls	r1, r1, #3
    3a36:	2380      	movs	r3, #128	; 0x80
    3a38:	4a19      	ldr	r2, [pc, #100]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a3a:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a40:	f3bf 8f6f 	isb	sy
    3a44:	e7f4      	b.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a46:	2180      	movs	r1, #128	; 0x80
    3a48:	0109      	lsls	r1, r1, #4
    3a4a:	2380      	movs	r3, #128	; 0x80
    3a4c:	4a14      	ldr	r2, [pc, #80]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a4e:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a54:	f3bf 8f6f 	isb	sy
    3a58:	e7ea      	b.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a5a:	2180      	movs	r1, #128	; 0x80
    3a5c:	0149      	lsls	r1, r1, #5
    3a5e:	2380      	movs	r3, #128	; 0x80
    3a60:	4a0f      	ldr	r2, [pc, #60]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a62:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a68:	f3bf 8f6f 	isb	sy
    3a6c:	e7e0      	b.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a6e:	2180      	movs	r1, #128	; 0x80
    3a70:	0189      	lsls	r1, r1, #6
    3a72:	2380      	movs	r3, #128	; 0x80
    3a74:	4a0a      	ldr	r2, [pc, #40]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a76:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a7c:	f3bf 8f6f 	isb	sy
    3a80:	e7d6      	b.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a82:	2180      	movs	r1, #128	; 0x80
    3a84:	01c9      	lsls	r1, r1, #7
    3a86:	2380      	movs	r3, #128	; 0x80
    3a88:	4a05      	ldr	r2, [pc, #20]	; (3aa0 <_ZN6SPIHAL12DeinitSercomEh+0xb0>)
    3a8a:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
    3a8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a90:	f3bf 8f6f 	isb	sy
    3a94:	e7cc      	b.n	3a30 <_ZN6SPIHAL12DeinitSercomEh+0x40>
    3a96:	46c0      	nop			; (mov r8, r8)
    3a98:	000033cd 	.word	0x000033cd
    3a9c:	00004f5c 	.word	0x00004f5c
    3aa0:	e000e100 	.word	0xe000e100

00003aa4 <_ZN6SPIHAL15ReadyToTransmitEh>:

bool SPIHAL::ReadyToTransmit(SERCOMHAL::SercomID sercom_id)
{
    3aa4:	b510      	push	{r4, lr}
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3aa6:	4b05      	ldr	r3, [pc, #20]	; (3abc <_ZN6SPIHAL15ReadyToTransmitEh+0x18>)
    3aa8:	4798      	blx	r3
	return sercom_ptr->SPI.INTFLAG.bit.DRE & sercom_ptr->SPI.INTENSET.bit.DRE;
    3aaa:	7e03      	ldrb	r3, [r0, #24]
    3aac:	07db      	lsls	r3, r3, #31
    3aae:	0fdb      	lsrs	r3, r3, #31
    3ab0:	7d80      	ldrb	r0, [r0, #22]
    3ab2:	07c0      	lsls	r0, r0, #31
    3ab4:	0fc0      	lsrs	r0, r0, #31
    3ab6:	4018      	ands	r0, r3
}
    3ab8:	bd10      	pop	{r4, pc}
    3aba:	46c0      	nop			; (mov r8, r8)
    3abc:	000033cd 	.word	0x000033cd

00003ac0 <_ZN6SPIHAL14ReadyToReceiveEh>:

bool SPIHAL::ReadyToReceive(SERCOMHAL::SercomID sercom_id)
{
    3ac0:	b510      	push	{r4, lr}
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3ac2:	4b05      	ldr	r3, [pc, #20]	; (3ad8 <_ZN6SPIHAL14ReadyToReceiveEh+0x18>)
    3ac4:	4798      	blx	r3
	return sercom_ptr->SPI.INTFLAG.bit.RXC & sercom_ptr->SPI.INTENSET.bit.RXC;
    3ac6:	7e03      	ldrb	r3, [r0, #24]
    3ac8:	075b      	lsls	r3, r3, #29
    3aca:	0fdb      	lsrs	r3, r3, #31
    3acc:	7d80      	ldrb	r0, [r0, #22]
    3ace:	0740      	lsls	r0, r0, #29
    3ad0:	0fc0      	lsrs	r0, r0, #31
    3ad2:	4018      	ands	r0, r3
}
    3ad4:	bd10      	pop	{r4, pc}
    3ad6:	46c0      	nop			; (mov r8, r8)
    3ad8:	000033cd 	.word	0x000033cd

00003adc <_ZN6SPIHAL11GetSercomRXEh>:

uint8_t SPIHAL::GetSercomRX(SERCOMHAL::SercomID sercom_id)
{
    3adc:	b510      	push	{r4, lr}
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3ade:	4b02      	ldr	r3, [pc, #8]	; (3ae8 <_ZN6SPIHAL11GetSercomRXEh+0xc>)
    3ae0:	4798      	blx	r3
	return sercom_ptr->SPI.DATA.reg;
    3ae2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3ae4:	b2c0      	uxtb	r0, r0
}
    3ae6:	bd10      	pop	{r4, pc}
    3ae8:	000033cd 	.word	0x000033cd

00003aec <_ZN6SPIHAL11SetSercomTXEhh>:

void SPIHAL::SetSercomTX(uint8_t input, SERCOMHAL::SercomID sercom_id)
{
    3aec:	b510      	push	{r4, lr}
    3aee:	0004      	movs	r4, r0
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3af0:	0008      	movs	r0, r1
    3af2:	4b02      	ldr	r3, [pc, #8]	; (3afc <_ZN6SPIHAL11SetSercomTXEhh+0x10>)
    3af4:	4798      	blx	r3
	sercom_ptr->SPI.DATA.reg = input;	
    3af6:	6284      	str	r4, [r0, #40]	; 0x28
}
    3af8:	bd10      	pop	{r4, pc}
    3afa:	46c0      	nop			; (mov r8, r8)
    3afc:	000033cd 	.word	0x000033cd

00003b00 <_ZN6SPIHAL13EnableTxEmptyEhb>:

void SPIHAL::EnableTxEmpty(SERCOMHAL::SercomID sercom_id, bool enable)
{
    3b00:	b510      	push	{r4, lr}
    3b02:	000c      	movs	r4, r1
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3b04:	4b08      	ldr	r3, [pc, #32]	; (3b28 <_ZN6SPIHAL13EnableTxEmptyEhb+0x28>)
    3b06:	4798      	blx	r3
	if(enable) sercom_ptr->SPI.INTENSET.bit.DRE = 0x1u;
    3b08:	2c00      	cmp	r4, #0
    3b0a:	d107      	bne.n	3b1c <_ZN6SPIHAL13EnableTxEmptyEhb+0x1c>
	else if(sercom_ptr->SPI.INTENCLR.bit.DRE) sercom_ptr->SPI.INTENCLR.reg &= SERCOM_SPI_INTENCLR_DRE;
    3b0c:	7d03      	ldrb	r3, [r0, #20]
    3b0e:	07db      	lsls	r3, r3, #31
    3b10:	d508      	bpl.n	3b24 <_ZN6SPIHAL13EnableTxEmptyEhb+0x24>
    3b12:	7d03      	ldrb	r3, [r0, #20]
    3b14:	2201      	movs	r2, #1
    3b16:	4013      	ands	r3, r2
    3b18:	7503      	strb	r3, [r0, #20]
}
    3b1a:	e003      	b.n	3b24 <_ZN6SPIHAL13EnableTxEmptyEhb+0x24>
	if(enable) sercom_ptr->SPI.INTENSET.bit.DRE = 0x1u;
    3b1c:	7d83      	ldrb	r3, [r0, #22]
    3b1e:	2201      	movs	r2, #1
    3b20:	4313      	orrs	r3, r2
    3b22:	7583      	strb	r3, [r0, #22]
}
    3b24:	bd10      	pop	{r4, pc}
    3b26:	46c0      	nop			; (mov r8, r8)
    3b28:	000033cd 	.word	0x000033cd

00003b2c <_ZN6SPIHAL12EnableRxFullEhb>:

void SPIHAL::EnableRxFull(SERCOMHAL::SercomID sercom_id, bool enable)
{
    3b2c:	b510      	push	{r4, lr}
    3b2e:	000c      	movs	r4, r1
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3b30:	4b08      	ldr	r3, [pc, #32]	; (3b54 <_ZN6SPIHAL12EnableRxFullEhb+0x28>)
    3b32:	4798      	blx	r3
	if(enable) sercom_ptr->SPI.INTENSET.bit.RXC = 0x1u;
    3b34:	2c00      	cmp	r4, #0
    3b36:	d107      	bne.n	3b48 <_ZN6SPIHAL12EnableRxFullEhb+0x1c>
	else if(sercom_ptr->SPI.INTENCLR.bit.RXC) sercom_ptr->SPI.INTENCLR.reg &= SERCOM_SPI_INTENCLR_RXC;
    3b38:	7d03      	ldrb	r3, [r0, #20]
    3b3a:	075b      	lsls	r3, r3, #29
    3b3c:	d508      	bpl.n	3b50 <_ZN6SPIHAL12EnableRxFullEhb+0x24>
    3b3e:	7d03      	ldrb	r3, [r0, #20]
    3b40:	2204      	movs	r2, #4
    3b42:	4013      	ands	r3, r2
    3b44:	7503      	strb	r3, [r0, #20]
}
    3b46:	e003      	b.n	3b50 <_ZN6SPIHAL12EnableRxFullEhb+0x24>
	if(enable) sercom_ptr->SPI.INTENSET.bit.RXC = 0x1u;
    3b48:	7d83      	ldrb	r3, [r0, #22]
    3b4a:	2204      	movs	r2, #4
    3b4c:	4313      	orrs	r3, r2
    3b4e:	7583      	strb	r3, [r0, #22]
}
    3b50:	bd10      	pop	{r4, pc}
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	000033cd 	.word	0x000033cd

00003b58 <_ZN6SPIHAL18EnableSercomErrorsEhb>:
	if(enable) sercom_ptr->SPI.INTENSET.bit.SSL = 0x1u;
	else if(sercom_ptr->SPI.INTENCLR.bit.SSL) sercom_ptr->SPI.INTENCLR.reg &= SERCOM_SPI_INTENCLR_SSL;
}

void SPIHAL::EnableSercomErrors(SERCOMHAL::SercomID sercom_id, bool enable)
{
    3b58:	b510      	push	{r4, lr}
    3b5a:	000c      	movs	r4, r1
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3b5c:	4b08      	ldr	r3, [pc, #32]	; (3b80 <_ZN6SPIHAL18EnableSercomErrorsEhb+0x28>)
    3b5e:	4798      	blx	r3
	if(enable) sercom_ptr->SPI.INTENSET.bit.ERROR = 0x1u;
    3b60:	2c00      	cmp	r4, #0
    3b62:	d107      	bne.n	3b74 <_ZN6SPIHAL18EnableSercomErrorsEhb+0x1c>
	else if(sercom_ptr->SPI.INTENCLR.bit.ERROR) sercom_ptr->SPI.INTENCLR.reg &= SERCOM_SPI_INTENCLR_ERROR;
    3b64:	7d03      	ldrb	r3, [r0, #20]
    3b66:	09db      	lsrs	r3, r3, #7
    3b68:	d009      	beq.n	3b7e <_ZN6SPIHAL18EnableSercomErrorsEhb+0x26>
    3b6a:	7d03      	ldrb	r3, [r0, #20]
    3b6c:	227f      	movs	r2, #127	; 0x7f
    3b6e:	4393      	bics	r3, r2
    3b70:	7503      	strb	r3, [r0, #20]
}
    3b72:	e004      	b.n	3b7e <_ZN6SPIHAL18EnableSercomErrorsEhb+0x26>
	if(enable) sercom_ptr->SPI.INTENSET.bit.ERROR = 0x1u;
    3b74:	7d82      	ldrb	r2, [r0, #22]
    3b76:	2380      	movs	r3, #128	; 0x80
    3b78:	425b      	negs	r3, r3
    3b7a:	4313      	orrs	r3, r2
    3b7c:	7583      	strb	r3, [r0, #22]
}
    3b7e:	bd10      	pop	{r4, pc}
    3b80:	000033cd 	.word	0x000033cd

00003b84 <_ZN6SPIHAL15SercomHasErrorsEh>:

bool SPIHAL::SercomHasErrors(SERCOMHAL::SercomID sercom_id)
{
    3b84:	b510      	push	{r4, lr}
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3b86:	4b07      	ldr	r3, [pc, #28]	; (3ba4 <_ZN6SPIHAL15SercomHasErrorsEh+0x20>)
    3b88:	4798      	blx	r3
	uint8_t result = sercom_ptr->SPI.INTFLAG.bit.ERROR & sercom_ptr->SPI.INTENSET.bit.ERROR;
    3b8a:	7e02      	ldrb	r2, [r0, #24]
    3b8c:	09d2      	lsrs	r2, r2, #7
    3b8e:	7d83      	ldrb	r3, [r0, #22]
    3b90:	09db      	lsrs	r3, r3, #7
    3b92:	4013      	ands	r3, r2
	if(result) sercom_ptr->SPI.INTFLAG.bit.ERROR = 0x1u;
    3b94:	d004      	beq.n	3ba0 <_ZN6SPIHAL15SercomHasErrorsEh+0x1c>
    3b96:	7e01      	ldrb	r1, [r0, #24]
    3b98:	2280      	movs	r2, #128	; 0x80
    3b9a:	4252      	negs	r2, r2
    3b9c:	430a      	orrs	r2, r1
    3b9e:	7602      	strb	r2, [r0, #24]
	return result;
    3ba0:	0018      	movs	r0, r3
}
    3ba2:	bd10      	pop	{r4, pc}
    3ba4:	000033cd 	.word	0x000033cd

00003ba8 <_ZN6SPIHAL18CheckOverflowErrorEh>:

bool SPIHAL::CheckOverflowError(SERCOMHAL::SercomID sercom_id)
{
    3ba8:	b500      	push	{lr}
    3baa:	b083      	sub	sp, #12
	Sercom *sercom_ptr = SERCOMSAMD21::GetSercom(sercom_id);
    3bac:	4b0a      	ldr	r3, [pc, #40]	; (3bd8 <_ZN6SPIHAL18CheckOverflowErrorEh+0x30>)
    3bae:	4798      	blx	r3
	volatile uint8_t has_overflow_error = sercom_ptr->SPI.STATUS.bit.BUFOVF;
    3bb0:	8b43      	ldrh	r3, [r0, #26]
    3bb2:	075b      	lsls	r3, r3, #29
    3bb4:	0fdb      	lsrs	r3, r3, #31
    3bb6:	466a      	mov	r2, sp
    3bb8:	71d3      	strb	r3, [r2, #7]
	if (has_overflow_error) sercom_ptr->SPI.STATUS.bit.BUFOVF = 0x1u;
    3bba:	79d3      	ldrb	r3, [r2, #7]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d003      	beq.n	3bc8 <_ZN6SPIHAL18CheckOverflowErrorEh+0x20>
    3bc0:	8b43      	ldrh	r3, [r0, #26]
    3bc2:	2204      	movs	r2, #4
    3bc4:	4313      	orrs	r3, r2
    3bc6:	8343      	strh	r3, [r0, #26]
	return has_overflow_error;
    3bc8:	466b      	mov	r3, sp
    3bca:	79d8      	ldrb	r0, [r3, #7]
    3bcc:	1e43      	subs	r3, r0, #1
    3bce:	4198      	sbcs	r0, r3
    3bd0:	b2c0      	uxtb	r0, r0
}
    3bd2:	b003      	add	sp, #12
    3bd4:	bd00      	pop	{pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	000033cd 	.word	0x000033cd

00003bdc <_ZN9SerialSPI13SPIControllerC1Ev>:
			fifo_buffer = arr;
    3bdc:	2300      	movs	r3, #0
    3bde:	6003      	str	r3, [r0, #0]
			buffer_size = arr_size;
    3be0:	6043      	str	r3, [r0, #4]
			buffer_avail = 0;
    3be2:	6083      	str	r3, [r0, #8]
			rd_index = 0;
    3be4:	60c3      	str	r3, [r0, #12]
			wr_index = 0;
    3be6:	6103      	str	r3, [r0, #16]
			fifo_buffer = arr;
    3be8:	6143      	str	r3, [r0, #20]
			buffer_size = arr_size;
    3bea:	6183      	str	r3, [r0, #24]
			buffer_avail = 0;
    3bec:	61c3      	str	r3, [r0, #28]
			rd_index = 0;
    3bee:	6203      	str	r3, [r0, #32]
			wr_index = 0;
    3bf0:	6243      	str	r3, [r0, #36]	; 0x24

#include "serial_spi/serial_spi.h"

SerialSPI::SPIController::SPIController(void)
{
	error_on = false;
    3bf2:	223f      	movs	r2, #63	; 0x3f
    3bf4:	5483      	strb	r3, [r0, r2]
	status.spi_on = false;
    3bf6:	3a07      	subs	r2, #7
    3bf8:	5483      	strb	r3, [r0, r2]
}
    3bfa:	4770      	bx	lr

00003bfc <_ZN9SerialSPI13SPIController15ResetMOSIBufferEPcm>:
		status.spi_on = false;
	}
}

void SerialSPI::SPIController::ResetMOSIBuffer(char * mosi_buf, uint32_t mosi_size)
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
    3bfe:	0004      	movs	r4, r0
			fifo_buffer = arr;
    3c00:	6001      	str	r1, [r0, #0]
			buffer_size = arr_size;
    3c02:	6042      	str	r2, [r0, #4]
			buffer_avail = 0;
    3c04:	2500      	movs	r5, #0
    3c06:	6085      	str	r5, [r0, #8]
			rd_index = 0;
    3c08:	60c5      	str	r5, [r0, #12]
			wr_index = 0;
    3c0a:	6105      	str	r5, [r0, #16]
	mosi_buffer.ResetBuffer(mosi_buf, mosi_size);
	SPIHAL::EnableTxEmpty(sercom_id, false);
    3c0c:	2328      	movs	r3, #40	; 0x28
    3c0e:	5cc0      	ldrb	r0, [r0, r3]
    3c10:	2100      	movs	r1, #0
    3c12:	4b02      	ldr	r3, [pc, #8]	; (3c1c <_ZN9SerialSPI13SPIController15ResetMOSIBufferEPcm+0x20>)
    3c14:	4798      	blx	r3
	status.tx_interrupt = TXIRQState::None;
    3c16:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    3c18:	bd70      	pop	{r4, r5, r6, pc}
    3c1a:	46c0      	nop			; (mov r8, r8)
    3c1c:	00003b01 	.word	0x00003b01

00003c20 <_ZN9SerialSPI13SPIController15ResetMISOBufferEPcm>:

void SerialSPI::SPIController::ResetMISOBuffer(char * miso_buf, uint32_t miso_size)
{
    3c20:	b570      	push	{r4, r5, r6, lr}
    3c22:	0004      	movs	r4, r0
			fifo_buffer = arr;
    3c24:	6141      	str	r1, [r0, #20]
			buffer_size = arr_size;
    3c26:	6182      	str	r2, [r0, #24]
			buffer_avail = 0;
    3c28:	2500      	movs	r5, #0
    3c2a:	61c5      	str	r5, [r0, #28]
			rd_index = 0;
    3c2c:	6205      	str	r5, [r0, #32]
			wr_index = 0;
    3c2e:	6245      	str	r5, [r0, #36]	; 0x24
	miso_buffer.ResetBuffer(miso_buf, miso_size);
	SPIHAL::EnableRxFull(sercom_id, true);
    3c30:	2328      	movs	r3, #40	; 0x28
    3c32:	5cc0      	ldrb	r0, [r0, r3]
    3c34:	2101      	movs	r1, #1
    3c36:	4b02      	ldr	r3, [pc, #8]	; (3c40 <_ZN9SerialSPI13SPIController15ResetMISOBufferEPcm+0x20>)
    3c38:	4798      	blx	r3
	status.rx_interrupt = RXIRQState::None;
    3c3a:	6325      	str	r5, [r4, #48]	; 0x30
	status.error_state = SPIError::ENone;
    3c3c:	6365      	str	r5, [r4, #52]	; 0x34
}
    3c3e:	bd70      	pop	{r4, r5, r6, pc}
    3c40:	00003b2d 	.word	0x00003b2d

00003c44 <_ZN9SerialSPI13SPIController12ClearBuffersEbb>:

void SerialSPI::SPIController::ClearBuffers(bool clear_mosi, bool clear_miso)
{
    3c44:	b570      	push	{r4, r5, r6, lr}
    3c46:	0004      	movs	r4, r0
    3c48:	0015      	movs	r5, r2
	if(clear_mosi)
    3c4a:	2900      	cmp	r1, #0
    3c4c:	d102      	bne.n	3c54 <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0x10>
	{
		 mosi_buffer.Clear();
		 SPIHAL::EnableTxEmpty(sercom_id, false);
		 status.tx_interrupt = TXIRQState::None;
	}
	if(clear_miso)
    3c4e:	2d00      	cmp	r5, #0
    3c50:	d10b      	bne.n	3c6a <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0x26>
		miso_buffer.Clear();
		SPIHAL::EnableRxFull(sercom_id, true);
		status.rx_interrupt = RXIRQState::None;
		status.error_state = SPIError::ENone;
	}
}
    3c52:	bd70      	pop	{r4, r5, r6, pc}
			buffer_avail = 0;
    3c54:	2600      	movs	r6, #0
    3c56:	6086      	str	r6, [r0, #8]
			rd_index = 0;
    3c58:	60c6      	str	r6, [r0, #12]
			wr_index = 0;
    3c5a:	6106      	str	r6, [r0, #16]
		 SPIHAL::EnableTxEmpty(sercom_id, false);
    3c5c:	2328      	movs	r3, #40	; 0x28
    3c5e:	5cc0      	ldrb	r0, [r0, r3]
    3c60:	2100      	movs	r1, #0
    3c62:	4b08      	ldr	r3, [pc, #32]	; (3c84 <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0x40>)
    3c64:	4798      	blx	r3
		 status.tx_interrupt = TXIRQState::None;
    3c66:	62e6      	str	r6, [r4, #44]	; 0x2c
    3c68:	e7f1      	b.n	3c4e <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0xa>
			buffer_avail = 0;
    3c6a:	2500      	movs	r5, #0
    3c6c:	61e5      	str	r5, [r4, #28]
			rd_index = 0;
    3c6e:	6225      	str	r5, [r4, #32]
			wr_index = 0;
    3c70:	6265      	str	r5, [r4, #36]	; 0x24
		SPIHAL::EnableRxFull(sercom_id, true);
    3c72:	2328      	movs	r3, #40	; 0x28
    3c74:	5ce0      	ldrb	r0, [r4, r3]
    3c76:	2101      	movs	r1, #1
    3c78:	4b03      	ldr	r3, [pc, #12]	; (3c88 <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0x44>)
    3c7a:	4798      	blx	r3
		status.rx_interrupt = RXIRQState::None;
    3c7c:	6325      	str	r5, [r4, #48]	; 0x30
		status.error_state = SPIError::ENone;
    3c7e:	6365      	str	r5, [r4, #52]	; 0x34
}
    3c80:	e7e7      	b.n	3c52 <_ZN9SerialSPI13SPIController12ClearBuffersEbb+0xe>
    3c82:	46c0      	nop			; (mov r8, r8)
    3c84:	00003b01 	.word	0x00003b01
    3c88:	00003b2d 	.word	0x00003b2d

00003c8c <_ZN9SerialSPI13SPIController6DeinitEv>:
{
    3c8c:	b570      	push	{r4, r5, r6, lr}
    3c8e:	0004      	movs	r4, r0
	if(status.spi_on)
    3c90:	2338      	movs	r3, #56	; 0x38
    3c92:	5cc3      	ldrb	r3, [r0, r3]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d100      	bne.n	3c9a <_ZN9SerialSPI13SPIController6DeinitEv+0xe>
}
    3c98:	bd70      	pop	{r4, r5, r6, pc}
		ClearBuffers(true, true);
    3c9a:	2201      	movs	r2, #1
    3c9c:	2101      	movs	r1, #1
    3c9e:	4b09      	ldr	r3, [pc, #36]	; (3cc4 <_ZN9SerialSPI13SPIController6DeinitEv+0x38>)
    3ca0:	4798      	blx	r3
		SPIHAL::DeinitSercom(sercom_id);
    3ca2:	2528      	movs	r5, #40	; 0x28
    3ca4:	5d60      	ldrb	r0, [r4, r5]
    3ca6:	4b08      	ldr	r3, [pc, #32]	; (3cc8 <_ZN9SerialSPI13SPIController6DeinitEv+0x3c>)
    3ca8:	4798      	blx	r3
		SPIHAL::EnableRxFull(sercom_id, false);
    3caa:	5d60      	ldrb	r0, [r4, r5]
    3cac:	2100      	movs	r1, #0
    3cae:	4b07      	ldr	r3, [pc, #28]	; (3ccc <_ZN9SerialSPI13SPIController6DeinitEv+0x40>)
    3cb0:	4798      	blx	r3
		SPIHAL::EnableTxEmpty(sercom_id, false);
    3cb2:	5d60      	ldrb	r0, [r4, r5]
    3cb4:	2100      	movs	r1, #0
    3cb6:	4b06      	ldr	r3, [pc, #24]	; (3cd0 <_ZN9SerialSPI13SPIController6DeinitEv+0x44>)
    3cb8:	4798      	blx	r3
		status.spi_on = false;
    3cba:	2200      	movs	r2, #0
    3cbc:	2338      	movs	r3, #56	; 0x38
    3cbe:	54e2      	strb	r2, [r4, r3]
}
    3cc0:	e7ea      	b.n	3c98 <_ZN9SerialSPI13SPIController6DeinitEv+0xc>
    3cc2:	46c0      	nop			; (mov r8, r8)
    3cc4:	00003c45 	.word	0x00003c45
    3cc8:	000039f1 	.word	0x000039f1
    3ccc:	00003b2d 	.word	0x00003b2d
    3cd0:	00003b01 	.word	0x00003b01

00003cd4 <_ZN9SerialSPI13SPIControllerD1Ev>:
SerialSPI::SPIController::~SPIController(void)
    3cd4:	b510      	push	{r4, lr}
    3cd6:	0004      	movs	r4, r0
	Deinit();
    3cd8:	4b01      	ldr	r3, [pc, #4]	; (3ce0 <_ZN9SerialSPI13SPIControllerD1Ev+0xc>)
    3cda:	4798      	blx	r3
}
    3cdc:	0020      	movs	r0, r4
    3cde:	bd10      	pop	{r4, pc}
    3ce0:	00003c8d 	.word	0x00003c8d

00003ce4 <_ZN9SerialSPI13SPIController8TransmitEc>:
	ClearMISOInterrupt();
	return status_val;
}

bool SerialSPI::SPIController::Transmit(char input)
{
    3ce4:	b570      	push	{r4, r5, r6, lr}
    3ce6:	0004      	movs	r4, r0
    3ce8:	000e      	movs	r6, r1
	bool success = false;
	if(status.spi_on)
    3cea:	2338      	movs	r3, #56	; 0x38
    3cec:	5cc5      	ldrb	r5, [r0, r3]
    3cee:	2d00      	cmp	r5, #0
    3cf0:	d101      	bne.n	3cf6 <_ZN9SerialSPI13SPIController8TransmitEc+0x12>
		SPIHAL::EnableTxEmpty(sercom_id, false);
		success = mosi_buffer.Put(input);
		SPIHAL::EnableTxEmpty(sercom_id, true);
	}
	return success;
}
    3cf2:	0028      	movs	r0, r5
    3cf4:	bd70      	pop	{r4, r5, r6, pc}
		SPIHAL::EnableTxEmpty(sercom_id, false);
    3cf6:	3b10      	subs	r3, #16
    3cf8:	5cc0      	ldrb	r0, [r0, r3]
    3cfa:	2100      	movs	r1, #0
    3cfc:	4b0c      	ldr	r3, [pc, #48]	; (3d30 <_ZN9SerialSPI13SPIController8TransmitEc+0x4c>)
    3cfe:	4798      	blx	r3
			if(buffer_avail < buffer_size)
    3d00:	68a3      	ldr	r3, [r4, #8]
    3d02:	6862      	ldr	r2, [r4, #4]
    3d04:	4293      	cmp	r3, r2
    3d06:	d211      	bcs.n	3d2c <_ZN9SerialSPI13SPIController8TransmitEc+0x48>
				fifo_buffer[wr_index] = element;
    3d08:	6823      	ldr	r3, [r4, #0]
    3d0a:	6922      	ldr	r2, [r4, #16]
    3d0c:	549e      	strb	r6, [r3, r2]
				buffer_avail++;
    3d0e:	68a3      	ldr	r3, [r4, #8]
    3d10:	3301      	adds	r3, #1
    3d12:	60a3      	str	r3, [r4, #8]
				wr_index = (wr_index+1) % buffer_size;
    3d14:	6923      	ldr	r3, [r4, #16]
    3d16:	1c58      	adds	r0, r3, #1
    3d18:	6861      	ldr	r1, [r4, #4]
    3d1a:	4b06      	ldr	r3, [pc, #24]	; (3d34 <_ZN9SerialSPI13SPIController8TransmitEc+0x50>)
    3d1c:	4798      	blx	r3
    3d1e:	6121      	str	r1, [r4, #16]
		SPIHAL::EnableTxEmpty(sercom_id, true);
    3d20:	2328      	movs	r3, #40	; 0x28
    3d22:	5ce0      	ldrb	r0, [r4, r3]
    3d24:	2101      	movs	r1, #1
    3d26:	4b02      	ldr	r3, [pc, #8]	; (3d30 <_ZN9SerialSPI13SPIController8TransmitEc+0x4c>)
    3d28:	4798      	blx	r3
    3d2a:	e7e2      	b.n	3cf2 <_ZN9SerialSPI13SPIController8TransmitEc+0xe>
			bool success = false;
    3d2c:	2500      	movs	r5, #0
    3d2e:	e7f7      	b.n	3d20 <_ZN9SerialSPI13SPIController8TransmitEc+0x3c>
    3d30:	00003b01 	.word	0x00003b01
    3d34:	000046e9 	.word	0x000046e9

00003d38 <_ZN9SerialSPI13SPIController7ReceiveEPc>:

bool SerialSPI::SPIController::Receive(char * output)
{
    3d38:	b570      	push	{r4, r5, r6, lr}
    3d3a:	0004      	movs	r4, r0
    3d3c:	000d      	movs	r5, r1
	bool success;
	SPIHAL::EnableRxFull(sercom_id, false);
    3d3e:	2328      	movs	r3, #40	; 0x28
    3d40:	5cc0      	ldrb	r0, [r0, r3]
    3d42:	2100      	movs	r1, #0
    3d44:	4b0e      	ldr	r3, [pc, #56]	; (3d80 <_ZN9SerialSPI13SPIController7ReceiveEPc+0x48>)
    3d46:	4798      	blx	r3
			if(buffer_avail)
    3d48:	69e3      	ldr	r3, [r4, #28]
    3d4a:	2b00      	cmp	r3, #0
    3d4c:	d016      	beq.n	3d7c <_ZN9SerialSPI13SPIController7ReceiveEPc+0x44>
				if(output != nullptr) *output = fifo_buffer[rd_index];
    3d4e:	2d00      	cmp	r5, #0
    3d50:	d003      	beq.n	3d5a <_ZN9SerialSPI13SPIController7ReceiveEPc+0x22>
    3d52:	6963      	ldr	r3, [r4, #20]
    3d54:	6a22      	ldr	r2, [r4, #32]
    3d56:	5c9b      	ldrb	r3, [r3, r2]
    3d58:	702b      	strb	r3, [r5, #0]
				rd_index = (rd_index+1) % buffer_size;
    3d5a:	6a23      	ldr	r3, [r4, #32]
    3d5c:	1c58      	adds	r0, r3, #1
    3d5e:	69a1      	ldr	r1, [r4, #24]
    3d60:	4b08      	ldr	r3, [pc, #32]	; (3d84 <_ZN9SerialSPI13SPIController7ReceiveEPc+0x4c>)
    3d62:	4798      	blx	r3
    3d64:	6221      	str	r1, [r4, #32]
				buffer_avail--;
    3d66:	69e3      	ldr	r3, [r4, #28]
    3d68:	3b01      	subs	r3, #1
    3d6a:	61e3      	str	r3, [r4, #28]
				result = true;
    3d6c:	2501      	movs	r5, #1
	success = miso_buffer.Get(output);
	SPIHAL::EnableRxFull(sercom_id, true);
    3d6e:	2328      	movs	r3, #40	; 0x28
    3d70:	5ce0      	ldrb	r0, [r4, r3]
    3d72:	2101      	movs	r1, #1
    3d74:	4b02      	ldr	r3, [pc, #8]	; (3d80 <_ZN9SerialSPI13SPIController7ReceiveEPc+0x48>)
    3d76:	4798      	blx	r3
	return success;
}
    3d78:	0028      	movs	r0, r5
    3d7a:	bd70      	pop	{r4, r5, r6, pc}
			bool result = false;
    3d7c:	2500      	movs	r5, #0
    3d7e:	e7f6      	b.n	3d6e <_ZN9SerialSPI13SPIController7ReceiveEPc+0x36>
    3d80:	00003b2d 	.word	0x00003b2d
    3d84:	000046e9 	.word	0x000046e9

00003d88 <_ZN9SerialSPI13SPIController13PutMISOBufferEc>:

//private helper function
void SerialSPI::SPIController::PutMISOBuffer(char input)
{
    3d88:	b510      	push	{r4, lr}
    3d8a:	0004      	movs	r4, r0
			if(buffer_avail < buffer_size)
    3d8c:	69c3      	ldr	r3, [r0, #28]
    3d8e:	6982      	ldr	r2, [r0, #24]
    3d90:	4293      	cmp	r3, r2
    3d92:	d20b      	bcs.n	3dac <_ZN9SerialSPI13SPIController13PutMISOBufferEc+0x24>
				fifo_buffer[wr_index] = element;
    3d94:	6943      	ldr	r3, [r0, #20]
    3d96:	6a42      	ldr	r2, [r0, #36]	; 0x24
    3d98:	5499      	strb	r1, [r3, r2]
				buffer_avail++;
    3d9a:	69c3      	ldr	r3, [r0, #28]
    3d9c:	3301      	adds	r3, #1
    3d9e:	61c3      	str	r3, [r0, #28]
				wr_index = (wr_index+1) % buffer_size;
    3da0:	6a43      	ldr	r3, [r0, #36]	; 0x24
    3da2:	1c58      	adds	r0, r3, #1
    3da4:	69a1      	ldr	r1, [r4, #24]
    3da6:	4b02      	ldr	r3, [pc, #8]	; (3db0 <_ZN9SerialSPI13SPIController13PutMISOBufferEc+0x28>)
    3da8:	4798      	blx	r3
    3daa:	6261      	str	r1, [r4, #36]	; 0x24
	miso_buffer.Put(input);
}
    3dac:	bd10      	pop	{r4, pc}
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	000046e9 	.word	0x000046e9

00003db4 <_ZN9SerialSPI13SPIController13GetMOSIBufferEv>:

//private helper function
char SerialSPI::SPIController::GetMOSIBuffer(void)
{
    3db4:	b570      	push	{r4, r5, r6, lr}
    3db6:	0004      	movs	r4, r0
			if(buffer_avail)
    3db8:	6885      	ldr	r5, [r0, #8]
    3dba:	2d00      	cmp	r5, #0
    3dbc:	d00b      	beq.n	3dd6 <_ZN9SerialSPI13SPIController13GetMOSIBufferEv+0x22>
				if(output != nullptr) *output = fifo_buffer[rd_index];
    3dbe:	68c0      	ldr	r0, [r0, #12]
    3dc0:	6823      	ldr	r3, [r4, #0]
    3dc2:	5c1e      	ldrb	r6, [r3, r0]
				rd_index = (rd_index+1) % buffer_size;
    3dc4:	3001      	adds	r0, #1
    3dc6:	6861      	ldr	r1, [r4, #4]
    3dc8:	4b04      	ldr	r3, [pc, #16]	; (3ddc <_ZN9SerialSPI13SPIController13GetMOSIBufferEv+0x28>)
    3dca:	4798      	blx	r3
    3dcc:	60e1      	str	r1, [r4, #12]
				buffer_avail--;
    3dce:	3d01      	subs	r5, #1
    3dd0:	60a5      	str	r5, [r4, #8]
	char output = 0;
	mosi_buffer.Get(&output);
	return output;
}
    3dd2:	0030      	movs	r0, r6
    3dd4:	bd70      	pop	{r4, r5, r6, pc}
	char output = 0;
    3dd6:	2600      	movs	r6, #0
    3dd8:	e7fb      	b.n	3dd2 <_ZN9SerialSPI13SPIController13GetMOSIBufferEv+0x1e>
    3dda:	46c0      	nop			; (mov r8, r8)
    3ddc:	000046e9 	.word	0x000046e9

00003de0 <_ZN9SerialSPI13SPIController12HandleErrorsEv>:

//private helper function
void SerialSPI::SPIController::HandleErrors(void)
{
    3de0:	b510      	push	{r4, lr}
    3de2:	0004      	movs	r4, r0
	if(SPIHAL::CheckOverflowError(sercom_id)) 
    3de4:	2328      	movs	r3, #40	; 0x28
    3de6:	5cc0      	ldrb	r0, [r0, r3]
    3de8:	4b03      	ldr	r3, [pc, #12]	; (3df8 <_ZN9SerialSPI13SPIController12HandleErrorsEv+0x18>)
    3dea:	4798      	blx	r3
    3dec:	2800      	cmp	r0, #0
    3dee:	d001      	beq.n	3df4 <_ZN9SerialSPI13SPIController12HandleErrorsEv+0x14>
		status.error_state = SPIError::EOverflow;
    3df0:	2301      	movs	r3, #1
    3df2:	6363      	str	r3, [r4, #52]	; 0x34
}
    3df4:	bd10      	pop	{r4, pc}
    3df6:	46c0      	nop			; (mov r8, r8)
    3df8:	00003ba9 	.word	0x00003ba9

00003dfc <_ZN9SerialSPI13SPIController3ISREv>:
{
    3dfc:	b510      	push	{r4, lr}
    3dfe:	0004      	movs	r4, r0
	if(SPIHAL::ReadyToTransmit(sercom_id))
    3e00:	2328      	movs	r3, #40	; 0x28
    3e02:	5cc0      	ldrb	r0, [r0, r3]
    3e04:	4b2c      	ldr	r3, [pc, #176]	; (3eb8 <_ZN9SerialSPI13SPIController3ISREv+0xbc>)
    3e06:	4798      	blx	r3
    3e08:	2800      	cmp	r0, #0
    3e0a:	d013      	beq.n	3e34 <_ZN9SerialSPI13SPIController3ISREv+0x38>
			if(!buffer_avail)
    3e0c:	68a3      	ldr	r3, [r4, #8]
    3e0e:	2b00      	cmp	r3, #0
    3e10:	d006      	beq.n	3e20 <_ZN9SerialSPI13SPIController3ISREv+0x24>
			if(buffer_avail == buffer_size)
    3e12:	6862      	ldr	r2, [r4, #4]
    3e14:	429a      	cmp	r2, r3
    3e16:	d001      	beq.n	3e1c <_ZN9SerialSPI13SPIController3ISREv+0x20>
			return BufferState::NotEmptyNotFull;
    3e18:	2302      	movs	r3, #2
    3e1a:	e002      	b.n	3e22 <_ZN9SerialSPI13SPIController3ISREv+0x26>
				return BufferState::Full;
    3e1c:	2301      	movs	r3, #1
    3e1e:	e000      	b.n	3e22 <_ZN9SerialSPI13SPIController3ISREv+0x26>
				return BufferState::Empty;
    3e20:	2300      	movs	r3, #0
		if(mosi_buffer.GetBufferState() == GenericBuffer::BufferState::Empty)
    3e22:	2b00      	cmp	r3, #0
    3e24:	d11a      	bne.n	3e5c <_ZN9SerialSPI13SPIController3ISREv+0x60>
			status.tx_interrupt = TXIRQState::TXComplete;
    3e26:	3301      	adds	r3, #1
    3e28:	62e3      	str	r3, [r4, #44]	; 0x2c
			SPIHAL::EnableTxEmpty(sercom_id, false);
    3e2a:	3327      	adds	r3, #39	; 0x27
    3e2c:	5ce0      	ldrb	r0, [r4, r3]
    3e2e:	2100      	movs	r1, #0
    3e30:	4b22      	ldr	r3, [pc, #136]	; (3ebc <_ZN9SerialSPI13SPIController3ISREv+0xc0>)
    3e32:	4798      	blx	r3
	if(error_on && SPIHAL::SercomHasErrors(sercom_id))
    3e34:	233f      	movs	r3, #63	; 0x3f
    3e36:	5ce0      	ldrb	r0, [r4, r3]
    3e38:	2800      	cmp	r0, #0
    3e3a:	d119      	bne.n	3e70 <_ZN9SerialSPI13SPIController3ISREv+0x74>
    3e3c:	2800      	cmp	r0, #0
    3e3e:	d11c      	bne.n	3e7a <_ZN9SerialSPI13SPIController3ISREv+0x7e>
	else if(SPIHAL::ReadyToReceive(sercom_id))
    3e40:	2328      	movs	r3, #40	; 0x28
    3e42:	5ce0      	ldrb	r0, [r4, r3]
    3e44:	4b1e      	ldr	r3, [pc, #120]	; (3ec0 <_ZN9SerialSPI13SPIController3ISREv+0xc4>)
    3e46:	4798      	blx	r3
    3e48:	2800      	cmp	r0, #0
    3e4a:	d01b      	beq.n	3e84 <_ZN9SerialSPI13SPIController3ISREv+0x88>
			if(!buffer_avail)
    3e4c:	69e3      	ldr	r3, [r4, #28]
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d01b      	beq.n	3e8a <_ZN9SerialSPI13SPIController3ISREv+0x8e>
			if(buffer_avail == buffer_size)
    3e52:	69a2      	ldr	r2, [r4, #24]
    3e54:	4293      	cmp	r3, r2
    3e56:	d016      	beq.n	3e86 <_ZN9SerialSPI13SPIController3ISREv+0x8a>
			return BufferState::NotEmptyNotFull;
    3e58:	2302      	movs	r3, #2
    3e5a:	e017      	b.n	3e8c <_ZN9SerialSPI13SPIController3ISREv+0x90>
			SPIHAL::SetSercomTX((uint8_t)(GetMOSIBuffer()),sercom_id);
    3e5c:	0020      	movs	r0, r4
    3e5e:	4b19      	ldr	r3, [pc, #100]	; (3ec4 <_ZN9SerialSPI13SPIController3ISREv+0xc8>)
    3e60:	4798      	blx	r3
    3e62:	2328      	movs	r3, #40	; 0x28
    3e64:	5ce1      	ldrb	r1, [r4, r3]
    3e66:	4b18      	ldr	r3, [pc, #96]	; (3ec8 <_ZN9SerialSPI13SPIController3ISREv+0xcc>)
    3e68:	4798      	blx	r3
			status.tx_interrupt = TXIRQState::TXSuccess;
    3e6a:	2302      	movs	r3, #2
    3e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
    3e6e:	e7e1      	b.n	3e34 <_ZN9SerialSPI13SPIController3ISREv+0x38>
	if(error_on && SPIHAL::SercomHasErrors(sercom_id))
    3e70:	3b17      	subs	r3, #23
    3e72:	5ce0      	ldrb	r0, [r4, r3]
    3e74:	4b15      	ldr	r3, [pc, #84]	; (3ecc <_ZN9SerialSPI13SPIController3ISREv+0xd0>)
    3e76:	4798      	blx	r3
    3e78:	e7e0      	b.n	3e3c <_ZN9SerialSPI13SPIController3ISREv+0x40>
		status.rx_interrupt = RXIRQState::RXError;
    3e7a:	2301      	movs	r3, #1
    3e7c:	6323      	str	r3, [r4, #48]	; 0x30
		HandleErrors();
    3e7e:	0020      	movs	r0, r4
    3e80:	4b13      	ldr	r3, [pc, #76]	; (3ed0 <_ZN9SerialSPI13SPIController3ISREv+0xd4>)
    3e82:	4798      	blx	r3
}
    3e84:	bd10      	pop	{r4, pc}
				return BufferState::Full;
    3e86:	2301      	movs	r3, #1
    3e88:	e000      	b.n	3e8c <_ZN9SerialSPI13SPIController3ISREv+0x90>
				return BufferState::Empty;
    3e8a:	2300      	movs	r3, #0
		if(miso_buffer.GetBufferState() == GenericBuffer::BufferState::Full)
    3e8c:	2b01      	cmp	r3, #1
    3e8e:	d00a      	beq.n	3ea6 <_ZN9SerialSPI13SPIController3ISREv+0xaa>
			PutMISOBuffer((char)(SPIHAL::GetSercomRX(sercom_id)));
    3e90:	2328      	movs	r3, #40	; 0x28
    3e92:	5ce0      	ldrb	r0, [r4, r3]
    3e94:	4b0f      	ldr	r3, [pc, #60]	; (3ed4 <_ZN9SerialSPI13SPIController3ISREv+0xd8>)
    3e96:	4798      	blx	r3
    3e98:	0001      	movs	r1, r0
    3e9a:	0020      	movs	r0, r4
    3e9c:	4b0e      	ldr	r3, [pc, #56]	; (3ed8 <_ZN9SerialSPI13SPIController3ISREv+0xdc>)
    3e9e:	4798      	blx	r3
			status.rx_interrupt = RXIRQState::RXSuccess;
    3ea0:	2303      	movs	r3, #3
    3ea2:	6323      	str	r3, [r4, #48]	; 0x30
}
    3ea4:	e7ee      	b.n	3e84 <_ZN9SerialSPI13SPIController3ISREv+0x88>
			SPIHAL::EnableRxFull(sercom_id, false);
    3ea6:	3327      	adds	r3, #39	; 0x27
    3ea8:	5ce0      	ldrb	r0, [r4, r3]
    3eaa:	2100      	movs	r1, #0
    3eac:	4b0b      	ldr	r3, [pc, #44]	; (3edc <_ZN9SerialSPI13SPIController3ISREv+0xe0>)
    3eae:	4798      	blx	r3
			status.rx_interrupt = RXIRQState::RXComplete;
    3eb0:	2302      	movs	r3, #2
    3eb2:	6323      	str	r3, [r4, #48]	; 0x30
    3eb4:	e7e6      	b.n	3e84 <_ZN9SerialSPI13SPIController3ISREv+0x88>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	00003aa5 	.word	0x00003aa5
    3ebc:	00003b01 	.word	0x00003b01
    3ec0:	00003ac1 	.word	0x00003ac1
    3ec4:	00003db5 	.word	0x00003db5
    3ec8:	00003aed 	.word	0x00003aed
    3ecc:	00003b85 	.word	0x00003b85
    3ed0:	00003de1 	.word	0x00003de1
    3ed4:	00003add 	.word	0x00003add
    3ed8:	00003d89 	.word	0x00003d89
    3edc:	00003b2d 	.word	0x00003b2d

00003ee0 <_ZN9SerialSPI13SPIController18ClearMOSIInterruptEv>:
}

//status clears
void SerialSPI::SPIController::ClearMOSIInterrupt(void)
{
	status.tx_interrupt = TXIRQState::None;
    3ee0:	2300      	movs	r3, #0
    3ee2:	62c3      	str	r3, [r0, #44]	; 0x2c
}
    3ee4:	4770      	bx	lr

00003ee6 <_ZN9SerialSPI13SPIController18ClearMISOInterruptEv>:

void SerialSPI::SPIController::ClearMISOInterrupt(void)
{
	status.rx_interrupt = RXIRQState::None;
    3ee6:	2300      	movs	r3, #0
    3ee8:	6303      	str	r3, [r0, #48]	; 0x30
}
    3eea:	4770      	bx	lr

00003eec <_ZN9SerialSPI13SPIController14EnableErrorIRQEb>:
{
	status.error_state = SPIError::ENone;
}

void SerialSPI::SPIController::EnableErrorIRQ(bool enable)
{
    3eec:	b510      	push	{r4, lr}
	error_on = enable;
    3eee:	233f      	movs	r3, #63	; 0x3f
    3ef0:	54c1      	strb	r1, [r0, r3]
	SPIHAL::EnableSercomErrors(sercom_id, enable);
    3ef2:	3b17      	subs	r3, #23
    3ef4:	5cc0      	ldrb	r0, [r0, r3]
    3ef6:	4b01      	ldr	r3, [pc, #4]	; (3efc <_ZN9SerialSPI13SPIController14EnableErrorIRQEb+0x10>)
    3ef8:	4798      	blx	r3
}
    3efa:	bd10      	pop	{r4, pc}
    3efc:	00003b59 	.word	0x00003b59

00003f00 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m>:
{
    3f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f02:	0004      	movs	r4, r0
    3f04:	000d      	movs	r5, r1
    3f06:	0016      	movs	r6, r2
    3f08:	001f      	movs	r7, r3
	if(!status.spi_on)
    3f0a:	2338      	movs	r3, #56	; 0x38
    3f0c:	5cc3      	ldrb	r3, [r0, r3]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d000      	beq.n	3f14 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x14>
}
    3f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ssl_pin = p_config->ssl_pin;
    3f14:	303c      	adds	r0, #60	; 0x3c
    3f16:	310b      	adds	r1, #11
    3f18:	2203      	movs	r2, #3
    3f1a:	4b10      	ldr	r3, [pc, #64]	; (3f5c <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x5c>)
    3f1c:	4798      	blx	r3
		SPIHAL::InitSercom(p_config);
    3f1e:	2100      	movs	r1, #0
    3f20:	0028      	movs	r0, r5
    3f22:	4b0f      	ldr	r3, [pc, #60]	; (3f60 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x60>)
    3f24:	4798      	blx	r3
		sercom_id = p_config->sercom_id;
    3f26:	782a      	ldrb	r2, [r5, #0]
    3f28:	2328      	movs	r3, #40	; 0x28
    3f2a:	54e2      	strb	r2, [r4, r3]
		ResetMOSIBuffer(mosi_buf, mosi_size);
    3f2c:	003a      	movs	r2, r7
    3f2e:	0031      	movs	r1, r6
    3f30:	0020      	movs	r0, r4
    3f32:	4b0c      	ldr	r3, [pc, #48]	; (3f64 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x64>)
    3f34:	4798      	blx	r3
		ResetMISOBuffer(miso_buf, miso_size);
    3f36:	9a07      	ldr	r2, [sp, #28]
    3f38:	9906      	ldr	r1, [sp, #24]
    3f3a:	0020      	movs	r0, r4
    3f3c:	4b0a      	ldr	r3, [pc, #40]	; (3f68 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x68>)
    3f3e:	4798      	blx	r3
		EnableErrorIRQ(error_on);
    3f40:	233f      	movs	r3, #63	; 0x3f
    3f42:	5ce1      	ldrb	r1, [r4, r3]
    3f44:	0020      	movs	r0, r4
    3f46:	4b09      	ldr	r3, [pc, #36]	; (3f6c <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x6c>)
    3f48:	4798      	blx	r3
		status = (Status){TXIRQState::None, RXIRQState::None, SPIError::ENone, true};
    3f4a:	2300      	movs	r3, #0
    3f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
    3f4e:	6323      	str	r3, [r4, #48]	; 0x30
    3f50:	6363      	str	r3, [r4, #52]	; 0x34
    3f52:	2201      	movs	r2, #1
    3f54:	3338      	adds	r3, #56	; 0x38
    3f56:	54e2      	strb	r2, [r4, r3]
}
    3f58:	e7db      	b.n	3f12 <_ZN9SerialSPI13SPIController4InitEPN6SPIHAL10PeripheralEPcmS4_m+0x12>
    3f5a:	46c0      	nop			; (mov r8, r8)
    3f5c:	00004961 	.word	0x00004961
    3f60:	000037fd 	.word	0x000037fd
    3f64:	00003bfd 	.word	0x00003bfd
    3f68:	00003c21 	.word	0x00003c21
    3f6c:	00003eed 	.word	0x00003eed

00003f70 <_ZN9SerialSPI13SPIController6SSHighEv>:

void SerialSPI::SPIController::SSHigh(void)
{
    3f70:	b510      	push	{r4, lr}
	SERCOMHAL::OutputHigh(ssl_pin);	
    3f72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3f74:	4b01      	ldr	r3, [pc, #4]	; (3f7c <_ZN9SerialSPI13SPIController6SSHighEv+0xc>)
    3f76:	4798      	blx	r3
}
    3f78:	bd10      	pop	{r4, pc}
    3f7a:	46c0      	nop			; (mov r8, r8)
    3f7c:	00003649 	.word	0x00003649

00003f80 <_ZN9SerialSPI13SPIController5SSLowEv>:

void SerialSPI::SPIController::SSLow(void)
{
    3f80:	b510      	push	{r4, lr}
	SERCOMHAL::OutputLow(ssl_pin);	
    3f82:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    3f84:	4b01      	ldr	r3, [pc, #4]	; (3f8c <_ZN9SerialSPI13SPIController5SSLowEv+0xc>)
    3f86:	4798      	blx	r3
}
    3f88:	bd10      	pop	{r4, pc}
    3f8a:	46c0      	nop			; (mov r8, r8)
    3f8c:	00003669 	.word	0x00003669

00003f90 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm>:
{
    3f90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f92:	46c6      	mov	lr, r8
    3f94:	b500      	push	{lr}
    3f96:	b082      	sub	sp, #8
    3f98:	0004      	movs	r4, r0
    3f9a:	4688      	mov	r8, r1
    3f9c:	0017      	movs	r7, r2
    3f9e:	001d      	movs	r5, r3
	SSLow();
    3fa0:	4b1d      	ldr	r3, [pc, #116]	; (4018 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x88>)
    3fa2:	4798      	blx	r3
	char status_val = '\0';
    3fa4:	2200      	movs	r2, #0
    3fa6:	466b      	mov	r3, sp
    3fa8:	71da      	strb	r2, [r3, #7]
	for(uint32_t i = 0; i < num_bytes; i++)
    3faa:	2600      	movs	r6, #0
    3fac:	4546      	cmp	r6, r8
    3fae:	d20e      	bcs.n	3fce <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x3e>
		while(!Transmit(bytes[i]));
    3fb0:	5db9      	ldrb	r1, [r7, r6]
    3fb2:	0020      	movs	r0, r4
    3fb4:	4b19      	ldr	r3, [pc, #100]	; (401c <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x8c>)
    3fb6:	4798      	blx	r3
    3fb8:	2800      	cmp	r0, #0
    3fba:	d0f9      	beq.n	3fb0 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x20>
		while(!Receive(&status_val));
    3fbc:	466b      	mov	r3, sp
    3fbe:	1dd9      	adds	r1, r3, #7
    3fc0:	0020      	movs	r0, r4
    3fc2:	4b17      	ldr	r3, [pc, #92]	; (4020 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x90>)
    3fc4:	4798      	blx	r3
    3fc6:	2800      	cmp	r0, #0
    3fc8:	d0f8      	beq.n	3fbc <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x2c>
	for(uint32_t i = 0; i < num_bytes; i++)
    3fca:	3601      	adds	r6, #1
    3fcc:	e7ee      	b.n	3fac <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x1c>
    3fce:	2600      	movs	r6, #0
    3fd0:	e000      	b.n	3fd4 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x44>
	for(uint32_t i = 0; i < num_read; i++)
    3fd2:	3601      	adds	r6, #1
    3fd4:	42ae      	cmp	r6, r5
    3fd6:	d20f      	bcs.n	3ff8 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x68>
		ClearMISOInterrupt();
    3fd8:	0020      	movs	r0, r4
    3fda:	4b12      	ldr	r3, [pc, #72]	; (4024 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x94>)
    3fdc:	4798      	blx	r3
		while(!Transmit(0x00));
    3fde:	2100      	movs	r1, #0
    3fe0:	0020      	movs	r0, r4
    3fe2:	4b0e      	ldr	r3, [pc, #56]	; (401c <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x8c>)
    3fe4:	4798      	blx	r3
    3fe6:	2800      	cmp	r0, #0
    3fe8:	d0f9      	beq.n	3fde <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x4e>
		while(status.rx_interrupt == SerialSPI::RXIRQState::None);
    3fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3fec:	2b00      	cmp	r3, #0
    3fee:	d0fc      	beq.n	3fea <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x5a>
		if(status.rx_interrupt == RXIRQState::RXComplete) i = num_read;	//breaks loop if miso buffer fills
    3ff0:	2b02      	cmp	r3, #2
    3ff2:	d1ee      	bne.n	3fd2 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x42>
    3ff4:	002e      	movs	r6, r5
    3ff6:	e7ec      	b.n	3fd2 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x42>
	SSHigh();
    3ff8:	0020      	movs	r0, r4
    3ffa:	4b0b      	ldr	r3, [pc, #44]	; (4028 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x98>)
    3ffc:	4798      	blx	r3
	ClearMOSIInterrupt();
    3ffe:	0020      	movs	r0, r4
    4000:	4b0a      	ldr	r3, [pc, #40]	; (402c <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x9c>)
    4002:	4798      	blx	r3
	ClearMISOInterrupt();
    4004:	0020      	movs	r0, r4
    4006:	4b07      	ldr	r3, [pc, #28]	; (4024 <_ZN9SerialSPI13SPIController16SPIHostProcedureEmPKcm+0x94>)
    4008:	4798      	blx	r3
	return status_val;
    400a:	466b      	mov	r3, sp
    400c:	79d8      	ldrb	r0, [r3, #7]
}
    400e:	b002      	add	sp, #8
    4010:	bc04      	pop	{r2}
    4012:	4690      	mov	r8, r2
    4014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4016:	46c0      	nop			; (mov r8, r8)
    4018:	00003f81 	.word	0x00003f81
    401c:	00003ce5 	.word	0x00003ce5
    4020:	00003d39 	.word	0x00003d39
    4024:	00003ee7 	.word	0x00003ee7
    4028:	00003f71 	.word	0x00003f71
    402c:	00003ee1 	.word	0x00003ee1

00004030 <_ZN9SerialUSB15USBFeedIOClocksEv>:
#include "sam.h"

void SerialUSB::USBFeedIOClocks(void)
{
	//preset: 8MHz osc set and enabled, fed into clock generator 0
	NVMCTRL->CTRLB.bit.RWS = 1;
    4030:	4931      	ldr	r1, [pc, #196]	; (40f8 <_ZN9SerialUSB15USBFeedIOClocksEv+0xc8>)
    4032:	684a      	ldr	r2, [r1, #4]
    4034:	231e      	movs	r3, #30
    4036:	439a      	bics	r2, r3
    4038:	3b1c      	subs	r3, #28
    403a:	4313      	orrs	r3, r2
    403c:	604b      	str	r3, [r1, #4]
	
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    403e:	4b2f      	ldr	r3, [pc, #188]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    4040:	68db      	ldr	r3, [r3, #12]
    4042:	06db      	lsls	r3, r3, #27
    4044:	d5fb      	bpl.n	403e <_ZN9SerialUSB15USBFeedIOClocksEv+0xe>
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    4046:	2202      	movs	r2, #2
    4048:	4b2c      	ldr	r3, [pc, #176]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    404a:	849a      	strh	r2, [r3, #36]	; 0x24
	while(!SYSCTRL->PCLKSR.bit.DFLLRDY);
    404c:	4b2b      	ldr	r3, [pc, #172]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    404e:	68db      	ldr	r3, [r3, #12]
    4050:	06db      	lsls	r3, r3, #27
    4052:	d5fb      	bpl.n	404c <_ZN9SerialUSB15USBFeedIOClocksEv+0x1c>
	
	uint32_t coarse =
		((*(uint32_t*)FUSES_DFLL48M_COARSE_CAL_ADDR) & FUSES_DFLL48M_COARSE_CAL_Msk) >> FUSES_DFLL48M_COARSE_CAL_Pos;
    4054:	4b2a      	ldr	r3, [pc, #168]	; (4100 <_ZN9SerialUSB15USBFeedIOClocksEv+0xd0>)
    4056:	681a      	ldr	r2, [r3, #0]
    4058:	0e92      	lsrs	r2, r2, #26
	uint32_t fine =
		((*(uint32_t*)FUSES_DFLL48M_FINE_CAL_ADDR) & FUSES_DFLL48M_FINE_CAL_Msk) >> FUSES_DFLL48M_FINE_CAL_Pos;
    405a:	4b2a      	ldr	r3, [pc, #168]	; (4104 <_ZN9SerialUSB15USBFeedIOClocksEv+0xd4>)
    405c:	681b      	ldr	r3, [r3, #0]
    405e:	059b      	lsls	r3, r3, #22
    4060:	0d9b      	lsrs	r3, r3, #22
	SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    4062:	0292      	lsls	r2, r2, #10
    4064:	4313      	orrs	r3, r2
    4066:	4a25      	ldr	r2, [pc, #148]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    4068:	6293      	str	r3, [r2, #40]	; 0x28
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    406a:	4b24      	ldr	r3, [pc, #144]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    406c:	68db      	ldr	r3, [r3, #12]
    406e:	06db      	lsls	r3, r3, #27
    4070:	d5fb      	bpl.n	406a <_ZN9SerialUSB15USBFeedIOClocksEv+0x3a>
	
	SYSCTRL->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_USBCRM | SYSCTRL_DFLLCTRL_CCDIS;
    4072:	4b22      	ldr	r3, [pc, #136]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    4074:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4076:	2190      	movs	r1, #144	; 0x90
    4078:	0049      	lsls	r1, r1, #1
    407a:	430a      	orrs	r2, r1
    407c:	849a      	strh	r2, [r3, #36]	; 0x24
	SYSCTRL->DFLLMUL.reg =  SYSCTRL_DFLLMUL_MUL(48000) | SYSCTRL_DFLLMUL_FSTEP(1) | SYSCTRL_DFLLMUL_CSTEP(1);
    407e:	4a22      	ldr	r2, [pc, #136]	; (4108 <_ZN9SerialUSB15USBFeedIOClocksEv+0xd8>)
    4080:	62da      	str	r2, [r3, #44]	; 0x2c
	
	/* Closed loop mode */
	SYSCTRL->DFLLCTRL.bit.MODE = 1;
    4082:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    4084:	2104      	movs	r1, #4
    4086:	430a      	orrs	r2, r1
    4088:	849a      	strh	r2, [r3, #36]	; 0x24
	/* Enable the DFLL */
	SYSCTRL->DFLLCTRL.bit.ENABLE = 1;
    408a:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    408c:	2102      	movs	r1, #2
    408e:	430a      	orrs	r2, r1
    4090:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
    4092:	4b1a      	ldr	r3, [pc, #104]	; (40fc <_ZN9SerialUSB15USBFeedIOClocksEv+0xcc>)
    4094:	68db      	ldr	r3, [r3, #12]
    4096:	06db      	lsls	r3, r3, #27
    4098:	d5fb      	bpl.n	4092 <_ZN9SerialUSB15USBFeedIOClocksEv+0x62>
	
	GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(0) | GCLK_GENCTRL_SRC(GCLK_SOURCE_DFLL48M) | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN;
    409a:	4a1c      	ldr	r2, [pc, #112]	; (410c <_ZN9SerialUSB15USBFeedIOClocksEv+0xdc>)
    409c:	4b1c      	ldr	r3, [pc, #112]	; (4110 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    409e:	605a      	str	r2, [r3, #4]
	while(GCLK->STATUS.bit.SYNCBUSY);
    40a0:	4b1b      	ldr	r3, [pc, #108]	; (4110 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    40a2:	785b      	ldrb	r3, [r3, #1]
    40a4:	09db      	lsrs	r3, r3, #7
    40a6:	d1fb      	bne.n	40a0 <_ZN9SerialUSB15USBFeedIOClocksEv+0x70>

	PM->APBBMASK.bit.USB_ = 0x1u;
    40a8:	4b1a      	ldr	r3, [pc, #104]	; (4114 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe4>)
    40aa:	69d9      	ldr	r1, [r3, #28]
    40ac:	2220      	movs	r2, #32
    40ae:	430a      	orrs	r2, r1
    40b0:	61da      	str	r2, [r3, #28]
	PM->AHBMASK.bit.USB_ = 0x1u;
    40b2:	6959      	ldr	r1, [r3, #20]
    40b4:	2240      	movs	r2, #64	; 0x40
    40b6:	430a      	orrs	r2, r1
    40b8:	615a      	str	r2, [r3, #20]
	GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_ID_USB;
    40ba:	4a17      	ldr	r2, [pc, #92]	; (4118 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe8>)
    40bc:	4b14      	ldr	r3, [pc, #80]	; (4110 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    40be:	805a      	strh	r2, [r3, #2]
	while (GCLK->STATUS.bit.SYNCBUSY);
    40c0:	4b13      	ldr	r3, [pc, #76]	; (4110 <_ZN9SerialUSB15USBFeedIOClocksEv+0xe0>)
    40c2:	785b      	ldrb	r3, [r3, #1]
    40c4:	09db      	lsrs	r3, r3, #7
    40c6:	d1fb      	bne.n	40c0 <_ZN9SerialUSB15USBFeedIOClocksEv+0x90>
	PORT->Group[0].DIRSET.reg = 0x1u << 23u;
    40c8:	4b14      	ldr	r3, [pc, #80]	; (411c <_ZN9SerialUSB15USBFeedIOClocksEv+0xec>)
    40ca:	2280      	movs	r2, #128	; 0x80
    40cc:	0412      	lsls	r2, r2, #16
    40ce:	609a      	str	r2, [r3, #8]
	PORT->Group[0].DIRSET.reg = 0x1u << 24u;
    40d0:	2280      	movs	r2, #128	; 0x80
    40d2:	0452      	lsls	r2, r2, #17
    40d4:	609a      	str	r2, [r3, #8]
	PORT->Group[0].DIRSET.reg = 0x1u << 25u;
    40d6:	2280      	movs	r2, #128	; 0x80
    40d8:	0492      	lsls	r2, r2, #18
    40da:	609a      	str	r2, [r3, #8]
	PORT->Group[0].PMUX[11].reg = PORT_PMUX_PMUXO(6u);
    40dc:	2160      	movs	r1, #96	; 0x60
    40de:	223b      	movs	r2, #59	; 0x3b
    40e0:	5499      	strb	r1, [r3, r2]
	PORT->Group[0].PINCFG[23].reg = PORT_PINCFG_PMUXEN;
    40e2:	3a3a      	subs	r2, #58	; 0x3a
    40e4:	3909      	subs	r1, #9
    40e6:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PMUX[12].reg = PORT_PMUX_PMUXO(6u) | PORT_PMUX_PMUXE(6u);
    40e8:	2066      	movs	r0, #102	; 0x66
    40ea:	391b      	subs	r1, #27
    40ec:	5458      	strb	r0, [r3, r1]
	PORT->Group[0].PINCFG[24].reg = PORT_PINCFG_PMUXEN;
    40ee:	311c      	adds	r1, #28
    40f0:	545a      	strb	r2, [r3, r1]
	PORT->Group[0].PINCFG[25].reg = PORT_PINCFG_PMUXEN;
    40f2:	3101      	adds	r1, #1
    40f4:	545a      	strb	r2, [r3, r1]
}
    40f6:	4770      	bx	lr
    40f8:	41004000 	.word	0x41004000
    40fc:	40000800 	.word	0x40000800
    4100:	00806024 	.word	0x00806024
    4104:	00806028 	.word	0x00806028
    4108:	0401bb80 	.word	0x0401bb80
    410c:	00030700 	.word	0x00030700
    4110:	40000c00 	.word	0x40000c00
    4114:	40000400 	.word	0x40000400
    4118:	00004006 	.word	0x00004006
    411c:	41004400 	.word	0x41004400

00004120 <_ZN9SerialUSB13USBControllerC1Ev>:
void SerialUSB::USBFeedIOClocks(void) {}
void SerialUSB::ResetUSB(void) {}
#endif

//Definition of Controller Class
SerialUSB::USBController::USBController(void)
    4120:	b570      	push	{r4, r5, r6, lr}
    4122:	0004      	movs	r4, r0
    4124:	2300      	movs	r3, #0
    4126:	2200      	movs	r2, #0
    4128:	2100      	movs	r1, #0
    412a:	4d04      	ldr	r5, [pc, #16]	; (413c <_ZN9SerialUSB13USBControllerC1Ev+0x1c>)
    412c:	47a8      	blx	r5
{
	usb_on = false;
    412e:	2300      	movs	r3, #0
    4130:	7723      	strb	r3, [r4, #28]
	detached = true;
    4132:	3301      	adds	r3, #1
    4134:	7763      	strb	r3, [r4, #29]
	//ResetUSB();
}
    4136:	0020      	movs	r0, r4
    4138:	bd70      	pop	{r4, r5, r6, pc}
    413a:	46c0      	nop			; (mov r8, r8)
    413c:	000030b1 	.word	0x000030b1

00004140 <_ZN9SerialUSB13USBController11ResetBufferEPcm>:
		usb_on = false;
	}
}

void SerialUSB::USBController::ResetBuffer(char * buf, uint32_t buf_size)
{
    4140:	b510      	push	{r4, lr}
	usb_buffer.Reset(buf, buf_size);
    4142:	4b01      	ldr	r3, [pc, #4]	; (4148 <_ZN9SerialUSB13USBController11ResetBufferEPcm+0x8>)
    4144:	4798      	blx	r3
}
    4146:	bd10      	pop	{r4, pc}
    4148:	0000309d 	.word	0x0000309d

0000414c <_ZN9SerialUSB13USBController12ClearBuffersEbb>:

void SerialUSB::USBController::ClearBuffers(bool clear_tx, bool clear_rx)
{
    414c:	b570      	push	{r4, r5, r6, lr}
    414e:	0005      	movs	r5, r0
    4150:	0014      	movs	r4, r2
	if(clear_tx) tud_cdc_write_clear();
    4152:	2900      	cmp	r1, #0
    4154:	d102      	bne.n	415c <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x10>
	if(clear_rx) usb_buffer.Clear();
    4156:	2c00      	cmp	r4, #0
    4158:	d104      	bne.n	4164 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x18>
}
    415a:	bd70      	pop	{r4, r5, r6, pc}
  return tud_cdc_n_write_available(0);
}

static inline bool tud_cdc_write_clear(void)
{
  return tud_cdc_n_write_clear(0);
    415c:	2000      	movs	r0, #0
    415e:	4b03      	ldr	r3, [pc, #12]	; (416c <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x20>)
    4160:	4798      	blx	r3
    4162:	e7f8      	b.n	4156 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0xa>
	if(clear_rx) usb_buffer.Clear();
    4164:	0028      	movs	r0, r5
    4166:	4b02      	ldr	r3, [pc, #8]	; (4170 <_ZN9SerialUSB13USBController12ClearBuffersEbb+0x24>)
    4168:	4798      	blx	r3
}
    416a:	e7f6      	b.n	415a <_ZN9SerialUSB13USBController12ClearBuffersEbb+0xe>
    416c:	000010d9 	.word	0x000010d9
    4170:	000030d9 	.word	0x000030d9

00004174 <_ZN9SerialUSB13USBController3ISREv>:

void SerialUSB::USBController::ISR(void)
{
    4174:	b510      	push	{r4, lr}
	#if (CFG_TUSB_MCU != OPT_MCU_NONE)
	tud_int_handler(0);
    4176:	2000      	movs	r0, #0
    4178:	4b01      	ldr	r3, [pc, #4]	; (4180 <_ZN9SerialUSB13USBController3ISREv+0xc>)
    417a:	4798      	blx	r3
	#endif
}
    417c:	bd10      	pop	{r4, pc}
    417e:	46c0      	nop			; (mov r8, r8)
    4180:	00002f2d 	.word	0x00002f2d

00004184 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm>:
	if(usb_on) received = usb_buffer.Get(&(Serial::NoIntEnable), output);
	return received;
}

bool SerialUSB::USBController::TransmitPacket(const char * input, uint32_t num_bytes)
{
    4184:	b570      	push	{r4, r5, r6, lr}
    4186:	0014      	movs	r4, r2
	bool success = false;
	if(usb_on)
    4188:	7f00      	ldrb	r0, [r0, #28]
    418a:	2800      	cmp	r0, #0
    418c:	d100      	bne.n	4190 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0xc>
		uint32_t count = tud_cdc_write(input, num_bytes);
		tud_cdc_write_flush();
		success = count == num_bytes;
	}
	return success;
}
    418e:	bd70      	pop	{r4, r5, r6, pc}
  return tud_cdc_n_write(0, buffer, bufsize);
    4190:	2000      	movs	r0, #0
    4192:	4b05      	ldr	r3, [pc, #20]	; (41a8 <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0x24>)
    4194:	4798      	blx	r3
    4196:	0005      	movs	r5, r0
  return tud_cdc_n_write_flush(0);
    4198:	2000      	movs	r0, #0
    419a:	4b04      	ldr	r3, [pc, #16]	; (41ac <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0x28>)
    419c:	4798      	blx	r3
		success = count == num_bytes;
    419e:	1b64      	subs	r4, r4, r5
    41a0:	4260      	negs	r0, r4
    41a2:	4160      	adcs	r0, r4
    41a4:	b2c0      	uxtb	r0, r0
    41a6:	e7f2      	b.n	418e <_ZN9SerialUSB13USBController14TransmitPacketEPKcm+0xa>
    41a8:	00001095 	.word	0x00001095
    41ac:	00000fc5 	.word	0x00000fc5

000041b0 <_ZN9SerialUSB13USBController14TransmitStringEPKc>:

uint32_t SerialUSB::USBController::TransmitString(const char *input)
{
    41b0:	b510      	push	{r4, lr}
    41b2:	000c      	movs	r4, r1
	uint32_t count = 0;
	if(usb_on)
    41b4:	7f03      	ldrb	r3, [r0, #28]
    41b6:	2b00      	cmp	r3, #0
    41b8:	d102      	bne.n	41c0 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x10>
	uint32_t count = 0;
    41ba:	2400      	movs	r4, #0
	{
		count = tud_cdc_write_str(input);
		tud_cdc_write_flush();
	}
	return count;
}
    41bc:	0020      	movs	r0, r4
    41be:	bd10      	pop	{r4, pc}
  return tud_cdc_n_write(itf, str, strlen(str));
    41c0:	0008      	movs	r0, r1
    41c2:	4b06      	ldr	r3, [pc, #24]	; (41dc <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x2c>)
    41c4:	4798      	blx	r3
    41c6:	0002      	movs	r2, r0
    41c8:	0021      	movs	r1, r4
    41ca:	2000      	movs	r0, #0
    41cc:	4b04      	ldr	r3, [pc, #16]	; (41e0 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x30>)
    41ce:	4798      	blx	r3
    41d0:	0004      	movs	r4, r0
  return tud_cdc_n_write_flush(0);
    41d2:	2000      	movs	r0, #0
    41d4:	4b03      	ldr	r3, [pc, #12]	; (41e4 <_ZN9SerialUSB13USBController14TransmitStringEPKc+0x34>)
    41d6:	4798      	blx	r3
    41d8:	e7f0      	b.n	41bc <_ZN9SerialUSB13USBController14TransmitStringEPKc+0xc>
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	00004a79 	.word	0x00004a79
    41e0:	00001095 	.word	0x00001095
    41e4:	00000fc5 	.word	0x00000fc5

000041e8 <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb>:

bool SerialUSB::USBController::ReceiveString(const char *input, uint32_t shift, bool move_pointer)
{
    41e8:	b510      	push	{r4, lr}
    41ea:	b082      	sub	sp, #8
	return usb_buffer.GetString(input, shift, move_pointer, &(Serial::NoIntEnable));
    41ec:	4c02      	ldr	r4, [pc, #8]	; (41f8 <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb+0x10>)
    41ee:	9400      	str	r4, [sp, #0]
    41f0:	4c02      	ldr	r4, [pc, #8]	; (41fc <_ZN9SerialUSB13USBController13ReceiveStringEPKcmb+0x14>)
    41f2:	47a0      	blx	r4
}
    41f4:	b002      	add	sp, #8
    41f6:	bd10      	pop	{r4, pc}
    41f8:	00003031 	.word	0x00003031
    41fc:	00003189 	.word	0x00003189

00004200 <_ZN9SerialUSB13USBController11TransmitIntEm>:

bool SerialUSB::USBController::TransmitInt(uint32_t input)
{
    4200:	b510      	push	{r4, lr}
    4202:	b084      	sub	sp, #16
    4204:	0004      	movs	r4, r0
    4206:	0008      	movs	r0, r1
	char packet[10];
	uint32_t numel = Serial::Int2ASCII(input, &(packet));
    4208:	a901      	add	r1, sp, #4
    420a:	4b04      	ldr	r3, [pc, #16]	; (421c <_ZN9SerialUSB13USBController11TransmitIntEm+0x1c>)
    420c:	4798      	blx	r3
    420e:	0002      	movs	r2, r0
	return TransmitPacket(packet, numel);
    4210:	a901      	add	r1, sp, #4
    4212:	0020      	movs	r0, r4
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <_ZN9SerialUSB13USBController11TransmitIntEm+0x20>)
    4216:	4798      	blx	r3
}
    4218:	b004      	add	sp, #16
    421a:	bd10      	pop	{r4, pc}
    421c:	00003035 	.word	0x00003035
    4220:	00004185 	.word	0x00004185

00004224 <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch>:
{
	return usb_buffer.GetASCIIAsInt(output, &(Serial::NoIntEnable));
}

bool SerialUSB::USBController::ReceiveParam(uint32_t * output, const char *input, char delimiter, uint8_t max_digits)
{
    4224:	b530      	push	{r4, r5, lr}
    4226:	b083      	sub	sp, #12
    4228:	ac06      	add	r4, sp, #24
    422a:	7824      	ldrb	r4, [r4, #0]
	return usb_buffer.GetIntParam(output, input, delimiter, max_digits, &(Serial::NoIntEnable));
    422c:	4d03      	ldr	r5, [pc, #12]	; (423c <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch+0x18>)
    422e:	9501      	str	r5, [sp, #4]
    4230:	9400      	str	r4, [sp, #0]
    4232:	4c03      	ldr	r4, [pc, #12]	; (4240 <_ZN9SerialUSB13USBController12ReceiveParamEPmPKcch+0x1c>)
    4234:	47a0      	blx	r4
}
    4236:	b003      	add	sp, #12
    4238:	bd30      	pop	{r4, r5, pc}
    423a:	46c0      	nop			; (mov r8, r8)
    423c:	00003031 	.word	0x00003031
    4240:	000032d5 	.word	0x000032d5

00004244 <_ZN9SerialUSB13USBController9PutBufferEc>:

//private helper function
void SerialUSB::USBController::PutBuffer(char input)
{
    4244:	b510      	push	{r4, lr}
	usb_buffer.Put(input, &(Serial::NoIntEnable));
    4246:	4a02      	ldr	r2, [pc, #8]	; (4250 <_ZN9SerialUSB13USBController9PutBufferEc+0xc>)
    4248:	4b02      	ldr	r3, [pc, #8]	; (4254 <_ZN9SerialUSB13USBController9PutBufferEc+0x10>)
    424a:	4798      	blx	r3
}
    424c:	bd10      	pop	{r4, pc}
    424e:	46c0      	nop			; (mov r8, r8)
    4250:	00003031 	.word	0x00003031
    4254:	000030f5 	.word	0x000030f5

00004258 <_ZN9SerialUSB13USBController4TaskEb>:
{
    4258:	b5f0      	push	{r4, r5, r6, r7, lr}
    425a:	46d6      	mov	lr, sl
    425c:	4647      	mov	r7, r8
    425e:	b580      	push	{r7, lr}
    4260:	b083      	sub	sp, #12
    4262:	af00      	add	r7, sp, #0
    4264:	0005      	movs	r5, r0
    4266:	6079      	str	r1, [r7, #4]
	if(usb_on)
    4268:	7f04      	ldrb	r4, [r0, #28]
    426a:	2c00      	cmp	r4, #0
    426c:	d105      	bne.n	427a <_ZN9SerialUSB13USBController4TaskEb+0x22>
}
    426e:	46bd      	mov	sp, r7
    4270:	b003      	add	sp, #12
    4272:	bc0c      	pop	{r2, r3}
    4274:	4690      	mov	r8, r2
    4276:	469a      	mov	sl, r3
    4278:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return tud_cdc_n_available(0);
    427a:	2000      	movs	r0, #0
    427c:	4b1e      	ldr	r3, [pc, #120]	; (42f8 <_ZN9SerialUSB13USBController4TaskEb+0xa0>)
    427e:	4798      	blx	r3
		if(tud_cdc_available() && usb_buffer.GetBufferState() != GenericBuffer::BufferState::Full)
    4280:	2800      	cmp	r0, #0
    4282:	d108      	bne.n	4296 <_ZN9SerialUSB13USBController4TaskEb+0x3e>
    4284:	2400      	movs	r4, #0
    4286:	2c00      	cmp	r4, #0
    4288:	d10c      	bne.n	42a4 <_ZN9SerialUSB13USBController4TaskEb+0x4c>
  tud_task_ext(UINT32_MAX, false);
    428a:	2100      	movs	r1, #0
    428c:	2001      	movs	r0, #1
    428e:	4240      	negs	r0, r0
    4290:	4b1a      	ldr	r3, [pc, #104]	; (42fc <_ZN9SerialUSB13USBController4TaskEb+0xa4>)
    4292:	4798      	blx	r3
}
    4294:	e7eb      	b.n	426e <_ZN9SerialUSB13USBController4TaskEb+0x16>
		if(tud_cdc_available() && usb_buffer.GetBufferState() != GenericBuffer::BufferState::Full)
    4296:	0028      	movs	r0, r5
    4298:	4b19      	ldr	r3, [pc, #100]	; (4300 <_ZN9SerialUSB13USBController4TaskEb+0xa8>)
    429a:	4798      	blx	r3
    429c:	2801      	cmp	r0, #1
    429e:	d1f2      	bne.n	4286 <_ZN9SerialUSB13USBController4TaskEb+0x2e>
    42a0:	2400      	movs	r4, #0
    42a2:	e7f0      	b.n	4286 <_ZN9SerialUSB13USBController4TaskEb+0x2e>
			}
    42a4:	46ea      	mov	sl, sp
			char packet[usb_buffer.GetBufferEmpty()];
    42a6:	0028      	movs	r0, r5
    42a8:	4c16      	ldr	r4, [pc, #88]	; (4304 <_ZN9SerialUSB13USBController4TaskEb+0xac>)
    42aa:	47a0      	blx	r4
    42ac:	3007      	adds	r0, #7
    42ae:	08c0      	lsrs	r0, r0, #3
    42b0:	00c0      	lsls	r0, r0, #3
    42b2:	466b      	mov	r3, sp
    42b4:	1a1b      	subs	r3, r3, r0
    42b6:	469d      	mov	sp, r3
    42b8:	466e      	mov	r6, sp
			uint32_t count = tud_cdc_read(packet, usb_buffer.GetBufferEmpty());
    42ba:	0028      	movs	r0, r5
    42bc:	47a0      	blx	r4
    42be:	0002      	movs	r2, r0
  return tud_cdc_n_read(0, buffer, bufsize);
    42c0:	4669      	mov	r1, sp
    42c2:	2000      	movs	r0, #0
    42c4:	4b10      	ldr	r3, [pc, #64]	; (4308 <_ZN9SerialUSB13USBController4TaskEb+0xb0>)
    42c6:	4798      	blx	r3
    42c8:	4680      	mov	r8, r0
			if(echo)
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d108      	bne.n	42e2 <_ZN9SerialUSB13USBController4TaskEb+0x8a>
    42d0:	2400      	movs	r4, #0
				for(uint32_t i = 0; i < count; i++) PutBuffer(packet[i]);
    42d2:	4544      	cmp	r4, r8
    42d4:	d20d      	bcs.n	42f2 <_ZN9SerialUSB13USBController4TaskEb+0x9a>
    42d6:	5d31      	ldrb	r1, [r6, r4]
    42d8:	0028      	movs	r0, r5
    42da:	4b0c      	ldr	r3, [pc, #48]	; (430c <_ZN9SerialUSB13USBController4TaskEb+0xb4>)
    42dc:	4798      	blx	r3
    42de:	3401      	adds	r4, #1
    42e0:	e7f7      	b.n	42d2 <_ZN9SerialUSB13USBController4TaskEb+0x7a>
  return tud_cdc_n_write(0, buffer, bufsize);
    42e2:	0002      	movs	r2, r0
    42e4:	4669      	mov	r1, sp
    42e6:	2000      	movs	r0, #0
    42e8:	4b09      	ldr	r3, [pc, #36]	; (4310 <_ZN9SerialUSB13USBController4TaskEb+0xb8>)
    42ea:	4798      	blx	r3
  return tud_cdc_n_write_flush(0);
    42ec:	2000      	movs	r0, #0
    42ee:	4b09      	ldr	r3, [pc, #36]	; (4314 <_ZN9SerialUSB13USBController4TaskEb+0xbc>)
    42f0:	4798      	blx	r3
    42f2:	46d5      	mov	sp, sl
    42f4:	e7c9      	b.n	428a <_ZN9SerialUSB13USBController4TaskEb+0x32>
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	00000f75 	.word	0x00000f75
    42fc:	000026e1 	.word	0x000026e1
    4300:	000033b5 	.word	0x000033b5
    4304:	000033ad 	.word	0x000033ad
    4308:	00000f95 	.word	0x00000f95
    430c:	00004245 	.word	0x00004245
    4310:	00001095 	.word	0x00001095
    4314:	00000fc5 	.word	0x00000fc5

00004318 <_ZNK9SerialUSB13USBController11IsConnectedEv>:
{
	return usb_buffer.GetBufferAvailable();
}

bool SerialUSB::USBController::IsConnected(void) const
{
    4318:	b510      	push	{r4, lr}
	return usb_on && tud_mounted();
    431a:	7f00      	ldrb	r0, [r0, #28]
    431c:	2800      	cmp	r0, #0
    431e:	d100      	bne.n	4322 <_ZNK9SerialUSB13USBController11IsConnectedEv+0xa>
}
    4320:	bd10      	pop	{r4, pc}
	return usb_on && tud_mounted();
    4322:	4b01      	ldr	r3, [pc, #4]	; (4328 <_ZNK9SerialUSB13USBController11IsConnectedEv+0x10>)
    4324:	4798      	blx	r3
    4326:	e7fb      	b.n	4320 <_ZNK9SerialUSB13USBController11IsConnectedEv+0x8>
    4328:	00001e21 	.word	0x00001e21

0000432c <_ZN9SerialUSB13USBController6DetachEv>:

void SerialUSB::USBController::Detach(void)
{
    432c:	b510      	push	{r4, lr}
    432e:	0004      	movs	r4, r0
	if(usb_on && !detached)
    4330:	7f03      	ldrb	r3, [r0, #28]
    4332:	2b00      	cmp	r3, #0
    4334:	d002      	beq.n	433c <_ZN9SerialUSB13USBController6DetachEv+0x10>
    4336:	7f43      	ldrb	r3, [r0, #29]
    4338:	2b00      	cmp	r3, #0
    433a:	d000      	beq.n	433e <_ZN9SerialUSB13USBController6DetachEv+0x12>
	{
		tud_disconnect();
		detached = true;
	}
}
    433c:	bd10      	pop	{r4, pc}
		tud_disconnect();
    433e:	4b02      	ldr	r3, [pc, #8]	; (4348 <_ZN9SerialUSB13USBController6DetachEv+0x1c>)
    4340:	4798      	blx	r3
		detached = true;
    4342:	2301      	movs	r3, #1
    4344:	7763      	strb	r3, [r4, #29]
}
    4346:	e7f9      	b.n	433c <_ZN9SerialUSB13USBController6DetachEv+0x10>
    4348:	00001e41 	.word	0x00001e41

0000434c <_ZN9SerialUSB13USBController6DeinitEv>:
{
    434c:	b510      	push	{r4, lr}
    434e:	0004      	movs	r4, r0
	if(usb_on)
    4350:	7f03      	ldrb	r3, [r0, #28]
    4352:	2b00      	cmp	r3, #0
    4354:	d100      	bne.n	4358 <_ZN9SerialUSB13USBController6DeinitEv+0xc>
}
    4356:	bd10      	pop	{r4, pc}
		ClearBuffers();
    4358:	2201      	movs	r2, #1
    435a:	2101      	movs	r1, #1
    435c:	4b03      	ldr	r3, [pc, #12]	; (436c <_ZN9SerialUSB13USBController6DeinitEv+0x20>)
    435e:	4798      	blx	r3
		Detach();
    4360:	0020      	movs	r0, r4
    4362:	4b03      	ldr	r3, [pc, #12]	; (4370 <_ZN9SerialUSB13USBController6DeinitEv+0x24>)
    4364:	4798      	blx	r3
		usb_on = false;
    4366:	2300      	movs	r3, #0
    4368:	7723      	strb	r3, [r4, #28]
}
    436a:	e7f4      	b.n	4356 <_ZN9SerialUSB13USBController6DeinitEv+0xa>
    436c:	0000414d 	.word	0x0000414d
    4370:	0000432d 	.word	0x0000432d

00004374 <_ZN9SerialUSB13USBControllerD1Ev>:
SerialUSB::USBController::~USBController(void)
    4374:	b510      	push	{r4, lr}
    4376:	0004      	movs	r4, r0
	Deinit();
    4378:	4b03      	ldr	r3, [pc, #12]	; (4388 <_ZN9SerialUSB13USBControllerD1Ev+0x14>)
    437a:	4798      	blx	r3
SerialUSB::USBController::~USBController(void)
    437c:	0020      	movs	r0, r4
    437e:	4b03      	ldr	r3, [pc, #12]	; (438c <_ZN9SerialUSB13USBControllerD1Ev+0x18>)
    4380:	4798      	blx	r3
}
    4382:	0020      	movs	r0, r4
    4384:	bd10      	pop	{r4, pc}
    4386:	46c0      	nop			; (mov r8, r8)
    4388:	0000434d 	.word	0x0000434d
    438c:	000030e5 	.word	0x000030e5

00004390 <_ZN9SerialUSB13USBController8ReattachEv>:

void SerialUSB::USBController::Reattach(void)
{
    4390:	b510      	push	{r4, lr}
    4392:	0004      	movs	r4, r0
	if(usb_on && detached)
    4394:	7f03      	ldrb	r3, [r0, #28]
    4396:	2b00      	cmp	r3, #0
    4398:	d002      	beq.n	43a0 <_ZN9SerialUSB13USBController8ReattachEv+0x10>
    439a:	7f43      	ldrb	r3, [r0, #29]
    439c:	2b00      	cmp	r3, #0
    439e:	d100      	bne.n	43a2 <_ZN9SerialUSB13USBController8ReattachEv+0x12>
	{
		tud_connect();
		detached = false;
	}
}
    43a0:	bd10      	pop	{r4, pc}
		tud_connect();
    43a2:	4b02      	ldr	r3, [pc, #8]	; (43ac <_ZN9SerialUSB13USBController8ReattachEv+0x1c>)
    43a4:	4798      	blx	r3
		detached = false;
    43a6:	2300      	movs	r3, #0
    43a8:	7763      	strb	r3, [r4, #29]
}
    43aa:	e7f9      	b.n	43a0 <_ZN9SerialUSB13USBController8ReattachEv+0x10>
    43ac:	00001e61 	.word	0x00001e61

000043b0 <_ZN9SerialUSB13USBController4InitEPcm>:
{
    43b0:	b510      	push	{r4, lr}
    43b2:	0004      	movs	r4, r0
	if(!usb_on)
    43b4:	7f03      	ldrb	r3, [r0, #28]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d000      	beq.n	43bc <_ZN9SerialUSB13USBController4InitEPcm+0xc>
}
    43ba:	bd10      	pop	{r4, pc}
		ResetBuffer(buf, buf_size);
    43bc:	4b08      	ldr	r3, [pc, #32]	; (43e0 <_ZN9SerialUSB13USBController4InitEPcm+0x30>)
    43be:	4798      	blx	r3
		USBFeedIOClocks();
    43c0:	4b08      	ldr	r3, [pc, #32]	; (43e4 <_ZN9SerialUSB13USBController4InitEPcm+0x34>)
    43c2:	4798      	blx	r3
		usb_on = true;
    43c4:	2301      	movs	r3, #1
    43c6:	7723      	strb	r3, [r4, #28]
		if(tud_inited())
    43c8:	4b07      	ldr	r3, [pc, #28]	; (43e8 <_ZN9SerialUSB13USBController4InitEPcm+0x38>)
    43ca:	4798      	blx	r3
    43cc:	2800      	cmp	r0, #0
    43ce:	d102      	bne.n	43d6 <_ZN9SerialUSB13USBController4InitEPcm+0x26>
			tusb_init();	//tiny usb init (tusb_config.h must be configured to device mode, 1 CDC port and using the correct hardware environment)
    43d0:	4b06      	ldr	r3, [pc, #24]	; (43ec <_ZN9SerialUSB13USBController4InitEPcm+0x3c>)
    43d2:	4798      	blx	r3
}
    43d4:	e7f1      	b.n	43ba <_ZN9SerialUSB13USBController4InitEPcm+0xa>
			Reattach();
    43d6:	0020      	movs	r0, r4
    43d8:	4b05      	ldr	r3, [pc, #20]	; (43f0 <_ZN9SerialUSB13USBController4InitEPcm+0x40>)
    43da:	4798      	blx	r3
    43dc:	e7ed      	b.n	43ba <_ZN9SerialUSB13USBController4InitEPcm+0xa>
    43de:	46c0      	nop			; (mov r8, r8)
    43e0:	00004141 	.word	0x00004141
    43e4:	00004031 	.word	0x00004031
    43e8:	00001e81 	.word	0x00001e81
    43ec:	000043f5 	.word	0x000043f5
    43f0:	00004391 	.word	0x00004391

000043f4 <tusb_init>:
#if CFG_TUD_ENABLED
#include "device/usbd_pvt.h"
#endif

bool tusb_init(void)
{
    43f4:	b510      	push	{r4, lr}
#if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
  // init device stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT ( tud_init(TUD_OPT_RHPORT) );
    43f6:	2000      	movs	r0, #0
    43f8:	4b01      	ldr	r3, [pc, #4]	; (4400 <tusb_init+0xc>)
    43fa:	4798      	blx	r3
  // init host stack CFG_TUSB_RHPORTx_MODE must be defined
  TU_ASSERT( tuh_init(TUH_OPT_RHPORT) );
#endif

  return true;
}
    43fc:	bd10      	pop	{r4, pc}
    43fe:	46c0      	nop			; (mov r8, r8)
    4400:	00001e95 	.word	0x00001e95

00004404 <tusb_inited>:

bool tusb_inited(void)
{
    4404:	b510      	push	{r4, lr}
  bool ret = false;

#if CFG_TUD_ENABLED
  ret = ret || tud_inited();
    4406:	4b03      	ldr	r3, [pc, #12]	; (4414 <tusb_inited+0x10>)
    4408:	4798      	blx	r3
    440a:	2800      	cmp	r0, #0
    440c:	d000      	beq.n	4410 <tusb_inited+0xc>
    440e:	2001      	movs	r0, #1
#if CFG_TUH_ENABLED
  ret = ret || tuh_inited();
#endif

  return ret;
}
    4410:	bd10      	pop	{r4, pc}
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	00001e81 	.word	0x00001e81

00004418 <tu_edpt_claim>:
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
    4418:	7803      	ldrb	r3, [r0, #0]
    441a:	07db      	lsls	r3, r3, #31
    441c:	d404      	bmi.n	4428 <tu_edpt_claim+0x10>
    441e:	7803      	ldrb	r3, [r0, #0]
    4420:	075b      	lsls	r3, r3, #29
    4422:	d50a      	bpl.n	443a <tu_edpt_claim+0x22>
    4424:	2300      	movs	r3, #0
    4426:	e000      	b.n	442a <tu_edpt_claim+0x12>
    4428:	2300      	movs	r3, #0
  if (available)
    442a:	2b00      	cmp	r3, #0
    442c:	d003      	beq.n	4436 <tu_edpt_claim+0x1e>
  {
    ep_state->claimed = 1;
    442e:	7802      	ldrb	r2, [r0, #0]
    4430:	2104      	movs	r1, #4
    4432:	430a      	orrs	r2, r1
    4434:	7002      	strb	r2, [r0, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return available;
}
    4436:	0018      	movs	r0, r3
    4438:	4770      	bx	lr
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
    443a:	2301      	movs	r3, #1
    443c:	e7f5      	b.n	442a <tu_edpt_claim+0x12>

0000443e <tu_edpt_release>:
#if TUSB_OPT_MUTEX
  osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);
#endif

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
    443e:	7803      	ldrb	r3, [r0, #0]
    4440:	075b      	lsls	r3, r3, #29
    4442:	d408      	bmi.n	4456 <tu_edpt_release+0x18>
    4444:	2300      	movs	r3, #0
  if (ret)
    4446:	2b00      	cmp	r3, #0
    4448:	d003      	beq.n	4452 <tu_edpt_release+0x14>
  {
    ep_state->claimed = 0;
    444a:	7802      	ldrb	r2, [r0, #0]
    444c:	2104      	movs	r1, #4
    444e:	438a      	bics	r2, r1
    4450:	7002      	strb	r2, [r0, #0]
#if TUSB_OPT_MUTEX
  osal_mutex_unlock(mutex);
#endif

  return ret;
}
    4452:	0018      	movs	r0, r3
    4454:	4770      	bx	lr
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
    4456:	7803      	ldrb	r3, [r0, #0]
    4458:	07db      	lsls	r3, r3, #31
    445a:	d501      	bpl.n	4460 <tu_edpt_release+0x22>
    445c:	2300      	movs	r3, #0
    445e:	e7f2      	b.n	4446 <tu_edpt_release+0x8>
    4460:	2301      	movs	r3, #1
    4462:	e7f0      	b.n	4446 <tu_edpt_release+0x8>

00004464 <tu_edpt_validate>:
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
    4464:	7902      	ldrb	r2, [r0, #4]
    4466:	7943      	ldrb	r3, [r0, #5]
    4468:	021b      	lsls	r3, r3, #8
    446a:	4313      	orrs	r3, r2
    446c:	055b      	lsls	r3, r3, #21
    446e:	0d5b      	lsrs	r3, r3, #21
bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
    4470:	78c2      	ldrb	r2, [r0, #3]
    4472:	0792      	lsls	r2, r2, #30
    4474:	0f92      	lsrs	r2, r2, #30
    4476:	2a02      	cmp	r2, #2
    4478:	d00c      	beq.n	4494 <tu_edpt_validate+0x30>
    447a:	d819      	bhi.n	44b0 <tu_edpt_validate+0x4c>
    447c:	2a01      	cmp	r2, #1
    447e:	d121      	bne.n	44c4 <tu_edpt_validate+0x60>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    4480:	2902      	cmp	r1, #2
    4482:	d004      	beq.n	448e <tu_edpt_validate+0x2a>
    4484:	4a13      	ldr	r2, [pc, #76]	; (44d4 <tu_edpt_validate+0x70>)
      TU_ASSERT(max_packet_size <= spec_size);
    4486:	429a      	cmp	r2, r3
    4488:	d31e      	bcc.n	44c8 <tu_edpt_validate+0x64>
    break;

    default: return false;
  }

  return true;
    448a:	2001      	movs	r0, #1
    448c:	e01b      	b.n	44c6 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
    448e:	2280      	movs	r2, #128	; 0x80
    4490:	00d2      	lsls	r2, r2, #3
    4492:	e7f8      	b.n	4486 <tu_edpt_validate+0x22>
      if (speed == TUSB_SPEED_HIGH)
    4494:	2902      	cmp	r1, #2
    4496:	d003      	beq.n	44a0 <tu_edpt_validate+0x3c>
        TU_ASSERT(max_packet_size <= 64);
    4498:	2b40      	cmp	r3, #64	; 0x40
    449a:	d817      	bhi.n	44cc <tu_edpt_validate+0x68>
  return true;
    449c:	2001      	movs	r0, #1
    449e:	e012      	b.n	44c6 <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size == 512);
    44a0:	2280      	movs	r2, #128	; 0x80
    44a2:	0092      	lsls	r2, r2, #2
    44a4:	4293      	cmp	r3, r2
    44a6:	d001      	beq.n	44ac <tu_edpt_validate+0x48>
    44a8:	2000      	movs	r0, #0
    44aa:	e00c      	b.n	44c6 <tu_edpt_validate+0x62>
  return true;
    44ac:	2001      	movs	r0, #1
    44ae:	e00a      	b.n	44c6 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    44b0:	2902      	cmp	r1, #2
    44b2:	d004      	beq.n	44be <tu_edpt_validate+0x5a>
    44b4:	2240      	movs	r2, #64	; 0x40
      TU_ASSERT(max_packet_size <= spec_size);
    44b6:	429a      	cmp	r2, r3
    44b8:	d30a      	bcc.n	44d0 <tu_edpt_validate+0x6c>
  return true;
    44ba:	2001      	movs	r0, #1
    44bc:	e003      	b.n	44c6 <tu_edpt_validate+0x62>
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
    44be:	2280      	movs	r2, #128	; 0x80
    44c0:	00d2      	lsls	r2, r2, #3
    44c2:	e7f8      	b.n	44b6 <tu_edpt_validate+0x52>
    default: return false;
    44c4:	2000      	movs	r0, #0
}
    44c6:	4770      	bx	lr
      TU_ASSERT(max_packet_size <= spec_size);
    44c8:	2000      	movs	r0, #0
    44ca:	e7fc      	b.n	44c6 <tu_edpt_validate+0x62>
        TU_ASSERT(max_packet_size <= 64);
    44cc:	2000      	movs	r0, #0
    44ce:	e7fa      	b.n	44c6 <tu_edpt_validate+0x62>
      TU_ASSERT(max_packet_size <= spec_size);
    44d0:	2000      	movs	r0, #0
    44d2:	e7f8      	b.n	44c6 <tu_edpt_validate+0x62>
    44d4:	000003ff 	.word	0x000003ff

000044d8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
    44d8:	b530      	push	{r4, r5, lr}
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
  uint8_t const* desc_end = p_desc + desc_len;
    44da:	188a      	adds	r2, r1, r2

  while( p_desc < desc_end )
    44dc:	e001      	b.n	44e2 <tu_edpt_bind_driver+0xa>
  return desc8 + desc8[DESC_OFFSET_LEN];
    44de:	780c      	ldrb	r4, [r1, #0]
    44e0:	1909      	adds	r1, r1, r4
    44e2:	4291      	cmp	r1, r2
    44e4:	d20a      	bcs.n	44fc <tu_edpt_bind_driver+0x24>
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
    44e6:	784c      	ldrb	r4, [r1, #1]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
    44e8:	2c05      	cmp	r4, #5
    44ea:	d1f8      	bne.n	44de <tu_edpt_bind_driver+0x6>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
    44ec:	788d      	ldrb	r5, [r1, #2]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
    44ee:	347a      	adds	r4, #122	; 0x7a
    44f0:	402c      	ands	r4, r5

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
    44f2:	0064      	lsls	r4, r4, #1
    44f4:	1904      	adds	r4, r0, r4
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
    44f6:	09ed      	lsrs	r5, r5, #7
    44f8:	5563      	strb	r3, [r4, r5]
    44fa:	e7f0      	b.n	44de <tu_edpt_bind_driver+0x6>
    }

    p_desc = tu_desc_next(p_desc);
  }
}
    44fc:	bd30      	pop	{r4, r5, pc}
	...

00004500 <tud_descriptor_device_cb>:
// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
  return (uint8_t const *) &desc_device;
}
    4500:	4800      	ldr	r0, [pc, #0]	; (4504 <tud_descriptor_device_cb+0x4>)
    4502:	4770      	bx	lr
    4504:	00004fd4 	.word	0x00004fd4

00004508 <tud_descriptor_configuration_cb>:

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
    4508:	4801      	ldr	r0, [pc, #4]	; (4510 <tud_descriptor_configuration_cb+0x8>)
#endif
}
    450a:	3014      	adds	r0, #20
    450c:	4770      	bx	lr
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	00004fd4 	.word	0x00004fd4

00004514 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
    4514:	b570      	push	{r4, r5, r6, lr}
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
    4516:	2800      	cmp	r0, #0
    4518:	d00d      	beq.n	4536 <tud_descriptor_string_cb+0x22>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
    451a:	2804      	cmp	r0, #4
    451c:	d824      	bhi.n	4568 <tud_descriptor_string_cb+0x54>

    const char* str = string_desc_arr[index];
    451e:	0080      	lsls	r0, r0, #2
    4520:	4b12      	ldr	r3, [pc, #72]	; (456c <tud_descriptor_string_cb+0x58>)
    4522:	58c5      	ldr	r5, [r0, r3]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
    4524:	0028      	movs	r0, r5
    4526:	4b12      	ldr	r3, [pc, #72]	; (4570 <tud_descriptor_string_cb+0x5c>)
    4528:	4798      	blx	r3
    452a:	b2c0      	uxtb	r0, r0
    if ( chr_count > 31 ) chr_count = 31;
    452c:	281f      	cmp	r0, #31
    452e:	d900      	bls.n	4532 <tud_descriptor_string_cb+0x1e>
    4530:	201f      	movs	r0, #31

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
    4532:	2300      	movs	r3, #0
    4534:	e00e      	b.n	4554 <tud_descriptor_string_cb+0x40>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
    4536:	4b0d      	ldr	r3, [pc, #52]	; (456c <tud_descriptor_string_cb+0x58>)
    4538:	6819      	ldr	r1, [r3, #0]
    453a:	2202      	movs	r2, #2
    453c:	480d      	ldr	r0, [pc, #52]	; (4574 <tud_descriptor_string_cb+0x60>)
    453e:	3002      	adds	r0, #2
    4540:	4b0d      	ldr	r3, [pc, #52]	; (4578 <tud_descriptor_string_cb+0x64>)
    4542:	4798      	blx	r3
    chr_count = 1;
    4544:	2001      	movs	r0, #1
    4546:	e007      	b.n	4558 <tud_descriptor_string_cb+0x44>
    {
      _desc_str[1+i] = str[i];
    4548:	1c5a      	adds	r2, r3, #1
    454a:	5cec      	ldrb	r4, [r5, r3]
    454c:	0051      	lsls	r1, r2, #1
    454e:	4b09      	ldr	r3, [pc, #36]	; (4574 <tud_descriptor_string_cb+0x60>)
    4550:	52cc      	strh	r4, [r1, r3]
    for(uint8_t i=0; i<chr_count; i++)
    4552:	b2d3      	uxtb	r3, r2
    4554:	4298      	cmp	r0, r3
    4556:	d8f7      	bhi.n	4548 <tud_descriptor_string_cb+0x34>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8 ) | (2*chr_count + 2));
    4558:	3001      	adds	r0, #1
    455a:	0040      	lsls	r0, r0, #1
    455c:	23c0      	movs	r3, #192	; 0xc0
    455e:	009b      	lsls	r3, r3, #2
    4560:	4303      	orrs	r3, r0
    4562:	4804      	ldr	r0, [pc, #16]	; (4574 <tud_descriptor_string_cb+0x60>)
    4564:	8003      	strh	r3, [r0, #0]

  return _desc_str;
}
    4566:	bd70      	pop	{r4, r5, r6, pc}
    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
    4568:	2000      	movs	r0, #0
    456a:	e7fc      	b.n	4566 <tud_descriptor_string_cb+0x52>
    456c:	20000030 	.word	0x20000030
    4570:	00004a79 	.word	0x00004a79
    4574:	20000b04 	.word	0x20000b04
    4578:	00004961 	.word	0x00004961

0000457c <_ZN12StateMachine13ExecuteActionEPNS_11STT_MACHINEE>:


#include "state_machine.h"

void StateMachine::ExecuteAction(StateMachine::STT_MACHINE * state_table)
{
    457c:	b510      	push	{r4, lr}
    457e:	0004      	movs	r4, r0
	state_table->current_state = state_table->state_actions[state_table->current_state]();
    4580:	7803      	ldrb	r3, [r0, #0]
    4582:	009b      	lsls	r3, r3, #2
    4584:	18c3      	adds	r3, r0, r3
    4586:	685b      	ldr	r3, [r3, #4]
    4588:	4798      	blx	r3
    458a:	7020      	strb	r0, [r4, #0]
}
    458c:	bd10      	pop	{r4, pc}

0000458e <_ZN12StateMachine17ProcessSuperStateEPhhPFhvE>:

void StateMachine::ProcessSuperState(StateMachine::STT_STATE * current_state, StateMachine::STT_STATE super_state, StateMachine::STT_ACTION super_function)
{
    458e:	b570      	push	{r4, r5, r6, lr}
    4590:	0005      	movs	r5, r0
    4592:	000c      	movs	r4, r1
	STT_STATE temp_state = super_function();
    4594:	4790      	blx	r2
	if(temp_state != super_state)
    4596:	42a0      	cmp	r0, r4
    4598:	d000      	beq.n	459c <_ZN12StateMachine17ProcessSuperStateEPhhPFhvE+0xe>
		*current_state = temp_state;
    459a:	7028      	strb	r0, [r5, #0]
}
    459c:	bd70      	pop	{r4, r5, r6, pc}
	...

000045a0 <_ZN4Util20enterCriticalSectionEv>:

uint32_t Util::critical_section_count = 0;

void Util::enterCriticalSection()
{
    if(Util::critical_section_count == 0)
    45a0:	4b04      	ldr	r3, [pc, #16]	; (45b4 <_ZN4Util20enterCriticalSectionEv+0x14>)
    45a2:	681b      	ldr	r3, [r3, #0]
    45a4:	2b00      	cmp	r3, #0
    45a6:	d100      	bne.n	45aa <_ZN4Util20enterCriticalSectionEv+0xa>
  __ASM volatile ("cpsid i" : : : "memory");
    45a8:	b672      	cpsid	i
    {
        __disable_irq();
    }
    Util::critical_section_count++;
    45aa:	4a02      	ldr	r2, [pc, #8]	; (45b4 <_ZN4Util20enterCriticalSectionEv+0x14>)
    45ac:	6813      	ldr	r3, [r2, #0]
    45ae:	3301      	adds	r3, #1
    45b0:	6013      	str	r3, [r2, #0]
}
    45b2:	4770      	bx	lr
    45b4:	20000b44 	.word	0x20000b44

000045b8 <_ZN4Util19exitCriticalSectionEv>:

void Util::exitCriticalSection()
{
    Util::critical_section_count--;
    45b8:	4a03      	ldr	r2, [pc, #12]	; (45c8 <_ZN4Util19exitCriticalSectionEv+0x10>)
    45ba:	6813      	ldr	r3, [r2, #0]
    45bc:	3b01      	subs	r3, #1
    45be:	6013      	str	r3, [r2, #0]

    if(Util::critical_section_count == 0)
    45c0:	2b00      	cmp	r3, #0
    45c2:	d100      	bne.n	45c6 <_ZN4Util19exitCriticalSectionEv+0xe>
  __ASM volatile ("cpsie i" : : : "memory");
    45c4:	b662      	cpsie	i
    {
        __enable_irq();
    }
}
    45c6:	4770      	bx	lr
    45c8:	20000b44 	.word	0x20000b44

000045cc <__aeabi_atexit>:
    45cc:	000b      	movs	r3, r1
    45ce:	b510      	push	{r4, lr}
    45d0:	0001      	movs	r1, r0
    45d2:	0018      	movs	r0, r3
    45d4:	f000 f998 	bl	4908 <__cxa_atexit>
    45d8:	bd10      	pop	{r4, pc}
    45da:	46c0      	nop			; (mov r8, r8)

000045dc <__udivsi3>:
    45dc:	2200      	movs	r2, #0
    45de:	0843      	lsrs	r3, r0, #1
    45e0:	428b      	cmp	r3, r1
    45e2:	d374      	bcc.n	46ce <__udivsi3+0xf2>
    45e4:	0903      	lsrs	r3, r0, #4
    45e6:	428b      	cmp	r3, r1
    45e8:	d35f      	bcc.n	46aa <__udivsi3+0xce>
    45ea:	0a03      	lsrs	r3, r0, #8
    45ec:	428b      	cmp	r3, r1
    45ee:	d344      	bcc.n	467a <__udivsi3+0x9e>
    45f0:	0b03      	lsrs	r3, r0, #12
    45f2:	428b      	cmp	r3, r1
    45f4:	d328      	bcc.n	4648 <__udivsi3+0x6c>
    45f6:	0c03      	lsrs	r3, r0, #16
    45f8:	428b      	cmp	r3, r1
    45fa:	d30d      	bcc.n	4618 <__udivsi3+0x3c>
    45fc:	22ff      	movs	r2, #255	; 0xff
    45fe:	0209      	lsls	r1, r1, #8
    4600:	ba12      	rev	r2, r2
    4602:	0c03      	lsrs	r3, r0, #16
    4604:	428b      	cmp	r3, r1
    4606:	d302      	bcc.n	460e <__udivsi3+0x32>
    4608:	1212      	asrs	r2, r2, #8
    460a:	0209      	lsls	r1, r1, #8
    460c:	d065      	beq.n	46da <__udivsi3+0xfe>
    460e:	0b03      	lsrs	r3, r0, #12
    4610:	428b      	cmp	r3, r1
    4612:	d319      	bcc.n	4648 <__udivsi3+0x6c>
    4614:	e000      	b.n	4618 <__udivsi3+0x3c>
    4616:	0a09      	lsrs	r1, r1, #8
    4618:	0bc3      	lsrs	r3, r0, #15
    461a:	428b      	cmp	r3, r1
    461c:	d301      	bcc.n	4622 <__udivsi3+0x46>
    461e:	03cb      	lsls	r3, r1, #15
    4620:	1ac0      	subs	r0, r0, r3
    4622:	4152      	adcs	r2, r2
    4624:	0b83      	lsrs	r3, r0, #14
    4626:	428b      	cmp	r3, r1
    4628:	d301      	bcc.n	462e <__udivsi3+0x52>
    462a:	038b      	lsls	r3, r1, #14
    462c:	1ac0      	subs	r0, r0, r3
    462e:	4152      	adcs	r2, r2
    4630:	0b43      	lsrs	r3, r0, #13
    4632:	428b      	cmp	r3, r1
    4634:	d301      	bcc.n	463a <__udivsi3+0x5e>
    4636:	034b      	lsls	r3, r1, #13
    4638:	1ac0      	subs	r0, r0, r3
    463a:	4152      	adcs	r2, r2
    463c:	0b03      	lsrs	r3, r0, #12
    463e:	428b      	cmp	r3, r1
    4640:	d301      	bcc.n	4646 <__udivsi3+0x6a>
    4642:	030b      	lsls	r3, r1, #12
    4644:	1ac0      	subs	r0, r0, r3
    4646:	4152      	adcs	r2, r2
    4648:	0ac3      	lsrs	r3, r0, #11
    464a:	428b      	cmp	r3, r1
    464c:	d301      	bcc.n	4652 <__udivsi3+0x76>
    464e:	02cb      	lsls	r3, r1, #11
    4650:	1ac0      	subs	r0, r0, r3
    4652:	4152      	adcs	r2, r2
    4654:	0a83      	lsrs	r3, r0, #10
    4656:	428b      	cmp	r3, r1
    4658:	d301      	bcc.n	465e <__udivsi3+0x82>
    465a:	028b      	lsls	r3, r1, #10
    465c:	1ac0      	subs	r0, r0, r3
    465e:	4152      	adcs	r2, r2
    4660:	0a43      	lsrs	r3, r0, #9
    4662:	428b      	cmp	r3, r1
    4664:	d301      	bcc.n	466a <__udivsi3+0x8e>
    4666:	024b      	lsls	r3, r1, #9
    4668:	1ac0      	subs	r0, r0, r3
    466a:	4152      	adcs	r2, r2
    466c:	0a03      	lsrs	r3, r0, #8
    466e:	428b      	cmp	r3, r1
    4670:	d301      	bcc.n	4676 <__udivsi3+0x9a>
    4672:	020b      	lsls	r3, r1, #8
    4674:	1ac0      	subs	r0, r0, r3
    4676:	4152      	adcs	r2, r2
    4678:	d2cd      	bcs.n	4616 <__udivsi3+0x3a>
    467a:	09c3      	lsrs	r3, r0, #7
    467c:	428b      	cmp	r3, r1
    467e:	d301      	bcc.n	4684 <__udivsi3+0xa8>
    4680:	01cb      	lsls	r3, r1, #7
    4682:	1ac0      	subs	r0, r0, r3
    4684:	4152      	adcs	r2, r2
    4686:	0983      	lsrs	r3, r0, #6
    4688:	428b      	cmp	r3, r1
    468a:	d301      	bcc.n	4690 <__udivsi3+0xb4>
    468c:	018b      	lsls	r3, r1, #6
    468e:	1ac0      	subs	r0, r0, r3
    4690:	4152      	adcs	r2, r2
    4692:	0943      	lsrs	r3, r0, #5
    4694:	428b      	cmp	r3, r1
    4696:	d301      	bcc.n	469c <__udivsi3+0xc0>
    4698:	014b      	lsls	r3, r1, #5
    469a:	1ac0      	subs	r0, r0, r3
    469c:	4152      	adcs	r2, r2
    469e:	0903      	lsrs	r3, r0, #4
    46a0:	428b      	cmp	r3, r1
    46a2:	d301      	bcc.n	46a8 <__udivsi3+0xcc>
    46a4:	010b      	lsls	r3, r1, #4
    46a6:	1ac0      	subs	r0, r0, r3
    46a8:	4152      	adcs	r2, r2
    46aa:	08c3      	lsrs	r3, r0, #3
    46ac:	428b      	cmp	r3, r1
    46ae:	d301      	bcc.n	46b4 <__udivsi3+0xd8>
    46b0:	00cb      	lsls	r3, r1, #3
    46b2:	1ac0      	subs	r0, r0, r3
    46b4:	4152      	adcs	r2, r2
    46b6:	0883      	lsrs	r3, r0, #2
    46b8:	428b      	cmp	r3, r1
    46ba:	d301      	bcc.n	46c0 <__udivsi3+0xe4>
    46bc:	008b      	lsls	r3, r1, #2
    46be:	1ac0      	subs	r0, r0, r3
    46c0:	4152      	adcs	r2, r2
    46c2:	0843      	lsrs	r3, r0, #1
    46c4:	428b      	cmp	r3, r1
    46c6:	d301      	bcc.n	46cc <__udivsi3+0xf0>
    46c8:	004b      	lsls	r3, r1, #1
    46ca:	1ac0      	subs	r0, r0, r3
    46cc:	4152      	adcs	r2, r2
    46ce:	1a41      	subs	r1, r0, r1
    46d0:	d200      	bcs.n	46d4 <__udivsi3+0xf8>
    46d2:	4601      	mov	r1, r0
    46d4:	4152      	adcs	r2, r2
    46d6:	4610      	mov	r0, r2
    46d8:	4770      	bx	lr
    46da:	e7ff      	b.n	46dc <__udivsi3+0x100>
    46dc:	b501      	push	{r0, lr}
    46de:	2000      	movs	r0, #0
    46e0:	f000 f806 	bl	46f0 <__aeabi_idiv0>
    46e4:	bd02      	pop	{r1, pc}
    46e6:	46c0      	nop			; (mov r8, r8)

000046e8 <__aeabi_uidivmod>:
    46e8:	2900      	cmp	r1, #0
    46ea:	d0f7      	beq.n	46dc <__udivsi3+0x100>
    46ec:	e776      	b.n	45dc <__udivsi3>
    46ee:	4770      	bx	lr

000046f0 <__aeabi_idiv0>:
    46f0:	4770      	bx	lr
    46f2:	46c0      	nop			; (mov r8, r8)

000046f4 <__aeabi_uldivmod>:
    46f4:	2b00      	cmp	r3, #0
    46f6:	d111      	bne.n	471c <__aeabi_uldivmod+0x28>
    46f8:	2a00      	cmp	r2, #0
    46fa:	d10f      	bne.n	471c <__aeabi_uldivmod+0x28>
    46fc:	2900      	cmp	r1, #0
    46fe:	d100      	bne.n	4702 <__aeabi_uldivmod+0xe>
    4700:	2800      	cmp	r0, #0
    4702:	d002      	beq.n	470a <__aeabi_uldivmod+0x16>
    4704:	2100      	movs	r1, #0
    4706:	43c9      	mvns	r1, r1
    4708:	1c08      	adds	r0, r1, #0
    470a:	b407      	push	{r0, r1, r2}
    470c:	4802      	ldr	r0, [pc, #8]	; (4718 <__aeabi_uldivmod+0x24>)
    470e:	a102      	add	r1, pc, #8	; (adr r1, 4718 <__aeabi_uldivmod+0x24>)
    4710:	1840      	adds	r0, r0, r1
    4712:	9002      	str	r0, [sp, #8]
    4714:	bd03      	pop	{r0, r1, pc}
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	ffffffd9 	.word	0xffffffd9
    471c:	b403      	push	{r0, r1}
    471e:	4668      	mov	r0, sp
    4720:	b501      	push	{r0, lr}
    4722:	9802      	ldr	r0, [sp, #8]
    4724:	f000 f806 	bl	4734 <__udivmoddi4>
    4728:	9b01      	ldr	r3, [sp, #4]
    472a:	469e      	mov	lr, r3
    472c:	b002      	add	sp, #8
    472e:	bc0c      	pop	{r2, r3}
    4730:	4770      	bx	lr
    4732:	46c0      	nop			; (mov r8, r8)

00004734 <__udivmoddi4>:
    4734:	b5f0      	push	{r4, r5, r6, r7, lr}
    4736:	4657      	mov	r7, sl
    4738:	464e      	mov	r6, r9
    473a:	4645      	mov	r5, r8
    473c:	46de      	mov	lr, fp
    473e:	b5e0      	push	{r5, r6, r7, lr}
    4740:	0004      	movs	r4, r0
    4742:	b083      	sub	sp, #12
    4744:	000d      	movs	r5, r1
    4746:	4692      	mov	sl, r2
    4748:	4699      	mov	r9, r3
    474a:	428b      	cmp	r3, r1
    474c:	d82f      	bhi.n	47ae <__udivmoddi4+0x7a>
    474e:	d02c      	beq.n	47aa <__udivmoddi4+0x76>
    4750:	4649      	mov	r1, r9
    4752:	4650      	mov	r0, sl
    4754:	f000 f8cc 	bl	48f0 <__clzdi2>
    4758:	0029      	movs	r1, r5
    475a:	0006      	movs	r6, r0
    475c:	0020      	movs	r0, r4
    475e:	f000 f8c7 	bl	48f0 <__clzdi2>
    4762:	1a33      	subs	r3, r6, r0
    4764:	4698      	mov	r8, r3
    4766:	3b20      	subs	r3, #32
    4768:	469b      	mov	fp, r3
    476a:	d500      	bpl.n	476e <__udivmoddi4+0x3a>
    476c:	e074      	b.n	4858 <__udivmoddi4+0x124>
    476e:	4653      	mov	r3, sl
    4770:	465a      	mov	r2, fp
    4772:	4093      	lsls	r3, r2
    4774:	001f      	movs	r7, r3
    4776:	4653      	mov	r3, sl
    4778:	4642      	mov	r2, r8
    477a:	4093      	lsls	r3, r2
    477c:	001e      	movs	r6, r3
    477e:	42af      	cmp	r7, r5
    4780:	d829      	bhi.n	47d6 <__udivmoddi4+0xa2>
    4782:	d026      	beq.n	47d2 <__udivmoddi4+0x9e>
    4784:	465b      	mov	r3, fp
    4786:	1ba4      	subs	r4, r4, r6
    4788:	41bd      	sbcs	r5, r7
    478a:	2b00      	cmp	r3, #0
    478c:	da00      	bge.n	4790 <__udivmoddi4+0x5c>
    478e:	e079      	b.n	4884 <__udivmoddi4+0x150>
    4790:	2200      	movs	r2, #0
    4792:	2300      	movs	r3, #0
    4794:	9200      	str	r2, [sp, #0]
    4796:	9301      	str	r3, [sp, #4]
    4798:	2301      	movs	r3, #1
    479a:	465a      	mov	r2, fp
    479c:	4093      	lsls	r3, r2
    479e:	9301      	str	r3, [sp, #4]
    47a0:	2301      	movs	r3, #1
    47a2:	4642      	mov	r2, r8
    47a4:	4093      	lsls	r3, r2
    47a6:	9300      	str	r3, [sp, #0]
    47a8:	e019      	b.n	47de <__udivmoddi4+0xaa>
    47aa:	4282      	cmp	r2, r0
    47ac:	d9d0      	bls.n	4750 <__udivmoddi4+0x1c>
    47ae:	2200      	movs	r2, #0
    47b0:	2300      	movs	r3, #0
    47b2:	9200      	str	r2, [sp, #0]
    47b4:	9301      	str	r3, [sp, #4]
    47b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    47b8:	2b00      	cmp	r3, #0
    47ba:	d001      	beq.n	47c0 <__udivmoddi4+0x8c>
    47bc:	601c      	str	r4, [r3, #0]
    47be:	605d      	str	r5, [r3, #4]
    47c0:	9800      	ldr	r0, [sp, #0]
    47c2:	9901      	ldr	r1, [sp, #4]
    47c4:	b003      	add	sp, #12
    47c6:	bc3c      	pop	{r2, r3, r4, r5}
    47c8:	4690      	mov	r8, r2
    47ca:	4699      	mov	r9, r3
    47cc:	46a2      	mov	sl, r4
    47ce:	46ab      	mov	fp, r5
    47d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    47d2:	42a3      	cmp	r3, r4
    47d4:	d9d6      	bls.n	4784 <__udivmoddi4+0x50>
    47d6:	2200      	movs	r2, #0
    47d8:	2300      	movs	r3, #0
    47da:	9200      	str	r2, [sp, #0]
    47dc:	9301      	str	r3, [sp, #4]
    47de:	4643      	mov	r3, r8
    47e0:	2b00      	cmp	r3, #0
    47e2:	d0e8      	beq.n	47b6 <__udivmoddi4+0x82>
    47e4:	07fb      	lsls	r3, r7, #31
    47e6:	0872      	lsrs	r2, r6, #1
    47e8:	431a      	orrs	r2, r3
    47ea:	4646      	mov	r6, r8
    47ec:	087b      	lsrs	r3, r7, #1
    47ee:	e00e      	b.n	480e <__udivmoddi4+0xda>
    47f0:	42ab      	cmp	r3, r5
    47f2:	d101      	bne.n	47f8 <__udivmoddi4+0xc4>
    47f4:	42a2      	cmp	r2, r4
    47f6:	d80c      	bhi.n	4812 <__udivmoddi4+0xde>
    47f8:	1aa4      	subs	r4, r4, r2
    47fa:	419d      	sbcs	r5, r3
    47fc:	2001      	movs	r0, #1
    47fe:	1924      	adds	r4, r4, r4
    4800:	416d      	adcs	r5, r5
    4802:	2100      	movs	r1, #0
    4804:	3e01      	subs	r6, #1
    4806:	1824      	adds	r4, r4, r0
    4808:	414d      	adcs	r5, r1
    480a:	2e00      	cmp	r6, #0
    480c:	d006      	beq.n	481c <__udivmoddi4+0xe8>
    480e:	42ab      	cmp	r3, r5
    4810:	d9ee      	bls.n	47f0 <__udivmoddi4+0xbc>
    4812:	3e01      	subs	r6, #1
    4814:	1924      	adds	r4, r4, r4
    4816:	416d      	adcs	r5, r5
    4818:	2e00      	cmp	r6, #0
    481a:	d1f8      	bne.n	480e <__udivmoddi4+0xda>
    481c:	465b      	mov	r3, fp
    481e:	9800      	ldr	r0, [sp, #0]
    4820:	9901      	ldr	r1, [sp, #4]
    4822:	1900      	adds	r0, r0, r4
    4824:	4169      	adcs	r1, r5
    4826:	2b00      	cmp	r3, #0
    4828:	db22      	blt.n	4870 <__udivmoddi4+0x13c>
    482a:	002b      	movs	r3, r5
    482c:	465a      	mov	r2, fp
    482e:	40d3      	lsrs	r3, r2
    4830:	002a      	movs	r2, r5
    4832:	4644      	mov	r4, r8
    4834:	40e2      	lsrs	r2, r4
    4836:	001c      	movs	r4, r3
    4838:	465b      	mov	r3, fp
    483a:	0015      	movs	r5, r2
    483c:	2b00      	cmp	r3, #0
    483e:	db2c      	blt.n	489a <__udivmoddi4+0x166>
    4840:	0026      	movs	r6, r4
    4842:	409e      	lsls	r6, r3
    4844:	0033      	movs	r3, r6
    4846:	0026      	movs	r6, r4
    4848:	4647      	mov	r7, r8
    484a:	40be      	lsls	r6, r7
    484c:	0032      	movs	r2, r6
    484e:	1a80      	subs	r0, r0, r2
    4850:	4199      	sbcs	r1, r3
    4852:	9000      	str	r0, [sp, #0]
    4854:	9101      	str	r1, [sp, #4]
    4856:	e7ae      	b.n	47b6 <__udivmoddi4+0x82>
    4858:	4642      	mov	r2, r8
    485a:	2320      	movs	r3, #32
    485c:	1a9b      	subs	r3, r3, r2
    485e:	4652      	mov	r2, sl
    4860:	40da      	lsrs	r2, r3
    4862:	4641      	mov	r1, r8
    4864:	0013      	movs	r3, r2
    4866:	464a      	mov	r2, r9
    4868:	408a      	lsls	r2, r1
    486a:	0017      	movs	r7, r2
    486c:	431f      	orrs	r7, r3
    486e:	e782      	b.n	4776 <__udivmoddi4+0x42>
    4870:	4642      	mov	r2, r8
    4872:	2320      	movs	r3, #32
    4874:	1a9b      	subs	r3, r3, r2
    4876:	002a      	movs	r2, r5
    4878:	4646      	mov	r6, r8
    487a:	409a      	lsls	r2, r3
    487c:	0023      	movs	r3, r4
    487e:	40f3      	lsrs	r3, r6
    4880:	4313      	orrs	r3, r2
    4882:	e7d5      	b.n	4830 <__udivmoddi4+0xfc>
    4884:	4642      	mov	r2, r8
    4886:	2320      	movs	r3, #32
    4888:	2100      	movs	r1, #0
    488a:	1a9b      	subs	r3, r3, r2
    488c:	2200      	movs	r2, #0
    488e:	9100      	str	r1, [sp, #0]
    4890:	9201      	str	r2, [sp, #4]
    4892:	2201      	movs	r2, #1
    4894:	40da      	lsrs	r2, r3
    4896:	9201      	str	r2, [sp, #4]
    4898:	e782      	b.n	47a0 <__udivmoddi4+0x6c>
    489a:	4642      	mov	r2, r8
    489c:	2320      	movs	r3, #32
    489e:	0026      	movs	r6, r4
    48a0:	1a9b      	subs	r3, r3, r2
    48a2:	40de      	lsrs	r6, r3
    48a4:	002f      	movs	r7, r5
    48a6:	46b4      	mov	ip, r6
    48a8:	4097      	lsls	r7, r2
    48aa:	4666      	mov	r6, ip
    48ac:	003b      	movs	r3, r7
    48ae:	4333      	orrs	r3, r6
    48b0:	e7c9      	b.n	4846 <__udivmoddi4+0x112>
    48b2:	46c0      	nop			; (mov r8, r8)

000048b4 <__clzsi2>:
    48b4:	211c      	movs	r1, #28
    48b6:	2301      	movs	r3, #1
    48b8:	041b      	lsls	r3, r3, #16
    48ba:	4298      	cmp	r0, r3
    48bc:	d301      	bcc.n	48c2 <__clzsi2+0xe>
    48be:	0c00      	lsrs	r0, r0, #16
    48c0:	3910      	subs	r1, #16
    48c2:	0a1b      	lsrs	r3, r3, #8
    48c4:	4298      	cmp	r0, r3
    48c6:	d301      	bcc.n	48cc <__clzsi2+0x18>
    48c8:	0a00      	lsrs	r0, r0, #8
    48ca:	3908      	subs	r1, #8
    48cc:	091b      	lsrs	r3, r3, #4
    48ce:	4298      	cmp	r0, r3
    48d0:	d301      	bcc.n	48d6 <__clzsi2+0x22>
    48d2:	0900      	lsrs	r0, r0, #4
    48d4:	3904      	subs	r1, #4
    48d6:	a202      	add	r2, pc, #8	; (adr r2, 48e0 <__clzsi2+0x2c>)
    48d8:	5c10      	ldrb	r0, [r2, r0]
    48da:	1840      	adds	r0, r0, r1
    48dc:	4770      	bx	lr
    48de:	46c0      	nop			; (mov r8, r8)
    48e0:	02020304 	.word	0x02020304
    48e4:	01010101 	.word	0x01010101
	...

000048f0 <__clzdi2>:
    48f0:	b510      	push	{r4, lr}
    48f2:	2900      	cmp	r1, #0
    48f4:	d103      	bne.n	48fe <__clzdi2+0xe>
    48f6:	f7ff ffdd 	bl	48b4 <__clzsi2>
    48fa:	3020      	adds	r0, #32
    48fc:	e002      	b.n	4904 <__clzdi2+0x14>
    48fe:	1c08      	adds	r0, r1, #0
    4900:	f7ff ffd8 	bl	48b4 <__clzsi2>
    4904:	bd10      	pop	{r4, pc}
    4906:	46c0      	nop			; (mov r8, r8)

00004908 <__cxa_atexit>:
    4908:	b510      	push	{r4, lr}
    490a:	0013      	movs	r3, r2
    490c:	000a      	movs	r2, r1
    490e:	0001      	movs	r1, r0
    4910:	2002      	movs	r0, #2
    4912:	f000 f8e3 	bl	4adc <__register_exitproc>
    4916:	bd10      	pop	{r4, pc}

00004918 <__libc_init_array>:
    4918:	b570      	push	{r4, r5, r6, lr}
    491a:	4e0d      	ldr	r6, [pc, #52]	; (4950 <__libc_init_array+0x38>)
    491c:	4d0d      	ldr	r5, [pc, #52]	; (4954 <__libc_init_array+0x3c>)
    491e:	2400      	movs	r4, #0
    4920:	1bad      	subs	r5, r5, r6
    4922:	10ad      	asrs	r5, r5, #2
    4924:	d005      	beq.n	4932 <__libc_init_array+0x1a>
    4926:	00a3      	lsls	r3, r4, #2
    4928:	58f3      	ldr	r3, [r6, r3]
    492a:	3401      	adds	r4, #1
    492c:	4798      	blx	r3
    492e:	42a5      	cmp	r5, r4
    4930:	d1f9      	bne.n	4926 <__libc_init_array+0xe>
    4932:	f000 fb99 	bl	5068 <_init>
    4936:	4e08      	ldr	r6, [pc, #32]	; (4958 <__libc_init_array+0x40>)
    4938:	4d08      	ldr	r5, [pc, #32]	; (495c <__libc_init_array+0x44>)
    493a:	2400      	movs	r4, #0
    493c:	1bad      	subs	r5, r5, r6
    493e:	10ad      	asrs	r5, r5, #2
    4940:	d005      	beq.n	494e <__libc_init_array+0x36>
    4942:	00a3      	lsls	r3, r4, #2
    4944:	58f3      	ldr	r3, [r6, r3]
    4946:	3401      	adds	r4, #1
    4948:	4798      	blx	r3
    494a:	42a5      	cmp	r5, r4
    494c:	d1f9      	bne.n	4942 <__libc_init_array+0x2a>
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	00005074 	.word	0x00005074
    4954:	00005074 	.word	0x00005074
    4958:	00005074 	.word	0x00005074
    495c:	00005080 	.word	0x00005080

00004960 <memcpy>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	0005      	movs	r5, r0
    4964:	2a0f      	cmp	r2, #15
    4966:	d92f      	bls.n	49c8 <memcpy+0x68>
    4968:	000b      	movs	r3, r1
    496a:	4303      	orrs	r3, r0
    496c:	079b      	lsls	r3, r3, #30
    496e:	d134      	bne.n	49da <memcpy+0x7a>
    4970:	0016      	movs	r6, r2
    4972:	000c      	movs	r4, r1
    4974:	0003      	movs	r3, r0
    4976:	3e10      	subs	r6, #16
    4978:	0935      	lsrs	r5, r6, #4
    497a:	3501      	adds	r5, #1
    497c:	012d      	lsls	r5, r5, #4
    497e:	1945      	adds	r5, r0, r5
    4980:	6827      	ldr	r7, [r4, #0]
    4982:	601f      	str	r7, [r3, #0]
    4984:	6867      	ldr	r7, [r4, #4]
    4986:	605f      	str	r7, [r3, #4]
    4988:	68a7      	ldr	r7, [r4, #8]
    498a:	609f      	str	r7, [r3, #8]
    498c:	68e7      	ldr	r7, [r4, #12]
    498e:	3410      	adds	r4, #16
    4990:	60df      	str	r7, [r3, #12]
    4992:	3310      	adds	r3, #16
    4994:	429d      	cmp	r5, r3
    4996:	d1f3      	bne.n	4980 <memcpy+0x20>
    4998:	230f      	movs	r3, #15
    499a:	439e      	bics	r6, r3
    499c:	3610      	adds	r6, #16
    499e:	1985      	adds	r5, r0, r6
    49a0:	1989      	adds	r1, r1, r6
    49a2:	4013      	ands	r3, r2
    49a4:	2b03      	cmp	r3, #3
    49a6:	d91a      	bls.n	49de <memcpy+0x7e>
    49a8:	1f1e      	subs	r6, r3, #4
    49aa:	2300      	movs	r3, #0
    49ac:	08b4      	lsrs	r4, r6, #2
    49ae:	3401      	adds	r4, #1
    49b0:	00a4      	lsls	r4, r4, #2
    49b2:	58cf      	ldr	r7, [r1, r3]
    49b4:	50ef      	str	r7, [r5, r3]
    49b6:	3304      	adds	r3, #4
    49b8:	42a3      	cmp	r3, r4
    49ba:	d1fa      	bne.n	49b2 <memcpy+0x52>
    49bc:	2403      	movs	r4, #3
    49be:	43a6      	bics	r6, r4
    49c0:	1d33      	adds	r3, r6, #4
    49c2:	4022      	ands	r2, r4
    49c4:	18c9      	adds	r1, r1, r3
    49c6:	18ed      	adds	r5, r5, r3
    49c8:	2a00      	cmp	r2, #0
    49ca:	d005      	beq.n	49d8 <memcpy+0x78>
    49cc:	2300      	movs	r3, #0
    49ce:	5ccc      	ldrb	r4, [r1, r3]
    49d0:	54ec      	strb	r4, [r5, r3]
    49d2:	3301      	adds	r3, #1
    49d4:	4293      	cmp	r3, r2
    49d6:	d1fa      	bne.n	49ce <memcpy+0x6e>
    49d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49da:	0005      	movs	r5, r0
    49dc:	e7f6      	b.n	49cc <memcpy+0x6c>
    49de:	001a      	movs	r2, r3
    49e0:	e7f2      	b.n	49c8 <memcpy+0x68>
    49e2:	46c0      	nop			; (mov r8, r8)

000049e4 <memset>:
    49e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49e6:	0783      	lsls	r3, r0, #30
    49e8:	d043      	beq.n	4a72 <memset+0x8e>
    49ea:	1e54      	subs	r4, r2, #1
    49ec:	2a00      	cmp	r2, #0
    49ee:	d03f      	beq.n	4a70 <memset+0x8c>
    49f0:	b2ce      	uxtb	r6, r1
    49f2:	0002      	movs	r2, r0
    49f4:	2503      	movs	r5, #3
    49f6:	e002      	b.n	49fe <memset+0x1a>
    49f8:	001a      	movs	r2, r3
    49fa:	3c01      	subs	r4, #1
    49fc:	d338      	bcc.n	4a70 <memset+0x8c>
    49fe:	1c53      	adds	r3, r2, #1
    4a00:	7016      	strb	r6, [r2, #0]
    4a02:	422b      	tst	r3, r5
    4a04:	d1f8      	bne.n	49f8 <memset+0x14>
    4a06:	2c03      	cmp	r4, #3
    4a08:	d92a      	bls.n	4a60 <memset+0x7c>
    4a0a:	22ff      	movs	r2, #255	; 0xff
    4a0c:	400a      	ands	r2, r1
    4a0e:	0215      	lsls	r5, r2, #8
    4a10:	4315      	orrs	r5, r2
    4a12:	042a      	lsls	r2, r5, #16
    4a14:	4315      	orrs	r5, r2
    4a16:	2c0f      	cmp	r4, #15
    4a18:	d914      	bls.n	4a44 <memset+0x60>
    4a1a:	0027      	movs	r7, r4
    4a1c:	001a      	movs	r2, r3
    4a1e:	3f10      	subs	r7, #16
    4a20:	093e      	lsrs	r6, r7, #4
    4a22:	3601      	adds	r6, #1
    4a24:	0136      	lsls	r6, r6, #4
    4a26:	199e      	adds	r6, r3, r6
    4a28:	6015      	str	r5, [r2, #0]
    4a2a:	6055      	str	r5, [r2, #4]
    4a2c:	6095      	str	r5, [r2, #8]
    4a2e:	60d5      	str	r5, [r2, #12]
    4a30:	3210      	adds	r2, #16
    4a32:	4296      	cmp	r6, r2
    4a34:	d1f8      	bne.n	4a28 <memset+0x44>
    4a36:	220f      	movs	r2, #15
    4a38:	4397      	bics	r7, r2
    4a3a:	3710      	adds	r7, #16
    4a3c:	19db      	adds	r3, r3, r7
    4a3e:	4014      	ands	r4, r2
    4a40:	2c03      	cmp	r4, #3
    4a42:	d90d      	bls.n	4a60 <memset+0x7c>
    4a44:	001a      	movs	r2, r3
    4a46:	1f27      	subs	r7, r4, #4
    4a48:	08be      	lsrs	r6, r7, #2
    4a4a:	3601      	adds	r6, #1
    4a4c:	00b6      	lsls	r6, r6, #2
    4a4e:	199e      	adds	r6, r3, r6
    4a50:	c220      	stmia	r2!, {r5}
    4a52:	42b2      	cmp	r2, r6
    4a54:	d1fc      	bne.n	4a50 <memset+0x6c>
    4a56:	2203      	movs	r2, #3
    4a58:	4397      	bics	r7, r2
    4a5a:	3704      	adds	r7, #4
    4a5c:	19db      	adds	r3, r3, r7
    4a5e:	4014      	ands	r4, r2
    4a60:	2c00      	cmp	r4, #0
    4a62:	d005      	beq.n	4a70 <memset+0x8c>
    4a64:	b2c9      	uxtb	r1, r1
    4a66:	191c      	adds	r4, r3, r4
    4a68:	7019      	strb	r1, [r3, #0]
    4a6a:	3301      	adds	r3, #1
    4a6c:	429c      	cmp	r4, r3
    4a6e:	d1fb      	bne.n	4a68 <memset+0x84>
    4a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a72:	0014      	movs	r4, r2
    4a74:	0003      	movs	r3, r0
    4a76:	e7c6      	b.n	4a06 <memset+0x22>

00004a78 <strlen>:
    4a78:	b510      	push	{r4, lr}
    4a7a:	0783      	lsls	r3, r0, #30
    4a7c:	d025      	beq.n	4aca <strlen+0x52>
    4a7e:	7803      	ldrb	r3, [r0, #0]
    4a80:	2b00      	cmp	r3, #0
    4a82:	d024      	beq.n	4ace <strlen+0x56>
    4a84:	0003      	movs	r3, r0
    4a86:	2103      	movs	r1, #3
    4a88:	e002      	b.n	4a90 <strlen+0x18>
    4a8a:	781a      	ldrb	r2, [r3, #0]
    4a8c:	2a00      	cmp	r2, #0
    4a8e:	d01a      	beq.n	4ac6 <strlen+0x4e>
    4a90:	3301      	adds	r3, #1
    4a92:	420b      	tst	r3, r1
    4a94:	d1f9      	bne.n	4a8a <strlen+0x12>
    4a96:	6819      	ldr	r1, [r3, #0]
    4a98:	4a0e      	ldr	r2, [pc, #56]	; (4ad4 <strlen+0x5c>)
    4a9a:	4c0f      	ldr	r4, [pc, #60]	; (4ad8 <strlen+0x60>)
    4a9c:	188a      	adds	r2, r1, r2
    4a9e:	438a      	bics	r2, r1
    4aa0:	4222      	tst	r2, r4
    4aa2:	d106      	bne.n	4ab2 <strlen+0x3a>
    4aa4:	3304      	adds	r3, #4
    4aa6:	6819      	ldr	r1, [r3, #0]
    4aa8:	4a0a      	ldr	r2, [pc, #40]	; (4ad4 <strlen+0x5c>)
    4aaa:	188a      	adds	r2, r1, r2
    4aac:	438a      	bics	r2, r1
    4aae:	4222      	tst	r2, r4
    4ab0:	d0f8      	beq.n	4aa4 <strlen+0x2c>
    4ab2:	001a      	movs	r2, r3
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d003      	beq.n	4ac2 <strlen+0x4a>
    4aba:	3201      	adds	r2, #1
    4abc:	7811      	ldrb	r1, [r2, #0]
    4abe:	2900      	cmp	r1, #0
    4ac0:	d1fb      	bne.n	4aba <strlen+0x42>
    4ac2:	1a10      	subs	r0, r2, r0
    4ac4:	bd10      	pop	{r4, pc}
    4ac6:	1a18      	subs	r0, r3, r0
    4ac8:	e7fc      	b.n	4ac4 <strlen+0x4c>
    4aca:	0003      	movs	r3, r0
    4acc:	e7e3      	b.n	4a96 <strlen+0x1e>
    4ace:	2000      	movs	r0, #0
    4ad0:	e7f8      	b.n	4ac4 <strlen+0x4c>
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	fefefeff 	.word	0xfefefeff
    4ad8:	80808080 	.word	0x80808080

00004adc <__register_exitproc>:
    4adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ade:	464e      	mov	r6, r9
    4ae0:	4645      	mov	r5, r8
    4ae2:	46de      	mov	lr, fp
    4ae4:	4657      	mov	r7, sl
    4ae6:	b5e0      	push	{r5, r6, r7, lr}
    4ae8:	4d36      	ldr	r5, [pc, #216]	; (4bc4 <__register_exitproc+0xe8>)
    4aea:	b083      	sub	sp, #12
    4aec:	0006      	movs	r6, r0
    4aee:	6828      	ldr	r0, [r5, #0]
    4af0:	4698      	mov	r8, r3
    4af2:	000f      	movs	r7, r1
    4af4:	4691      	mov	r9, r2
    4af6:	f000 f899 	bl	4c2c <__retarget_lock_acquire_recursive>
    4afa:	4b33      	ldr	r3, [pc, #204]	; (4bc8 <__register_exitproc+0xec>)
    4afc:	681c      	ldr	r4, [r3, #0]
    4afe:	23a4      	movs	r3, #164	; 0xa4
    4b00:	005b      	lsls	r3, r3, #1
    4b02:	58e0      	ldr	r0, [r4, r3]
    4b04:	2800      	cmp	r0, #0
    4b06:	d052      	beq.n	4bae <__register_exitproc+0xd2>
    4b08:	6843      	ldr	r3, [r0, #4]
    4b0a:	2b1f      	cmp	r3, #31
    4b0c:	dc13      	bgt.n	4b36 <__register_exitproc+0x5a>
    4b0e:	1c5a      	adds	r2, r3, #1
    4b10:	9201      	str	r2, [sp, #4]
    4b12:	2e00      	cmp	r6, #0
    4b14:	d128      	bne.n	4b68 <__register_exitproc+0x8c>
    4b16:	9a01      	ldr	r2, [sp, #4]
    4b18:	3302      	adds	r3, #2
    4b1a:	009b      	lsls	r3, r3, #2
    4b1c:	6042      	str	r2, [r0, #4]
    4b1e:	501f      	str	r7, [r3, r0]
    4b20:	6828      	ldr	r0, [r5, #0]
    4b22:	f000 f885 	bl	4c30 <__retarget_lock_release_recursive>
    4b26:	2000      	movs	r0, #0
    4b28:	b003      	add	sp, #12
    4b2a:	bc3c      	pop	{r2, r3, r4, r5}
    4b2c:	4690      	mov	r8, r2
    4b2e:	4699      	mov	r9, r3
    4b30:	46a2      	mov	sl, r4
    4b32:	46ab      	mov	fp, r5
    4b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b36:	4b25      	ldr	r3, [pc, #148]	; (4bcc <__register_exitproc+0xf0>)
    4b38:	2b00      	cmp	r3, #0
    4b3a:	d03d      	beq.n	4bb8 <__register_exitproc+0xdc>
    4b3c:	20c8      	movs	r0, #200	; 0xc8
    4b3e:	0040      	lsls	r0, r0, #1
    4b40:	e000      	b.n	4b44 <__register_exitproc+0x68>
    4b42:	bf00      	nop
    4b44:	2800      	cmp	r0, #0
    4b46:	d037      	beq.n	4bb8 <__register_exitproc+0xdc>
    4b48:	22a4      	movs	r2, #164	; 0xa4
    4b4a:	2300      	movs	r3, #0
    4b4c:	0052      	lsls	r2, r2, #1
    4b4e:	58a1      	ldr	r1, [r4, r2]
    4b50:	6043      	str	r3, [r0, #4]
    4b52:	6001      	str	r1, [r0, #0]
    4b54:	50a0      	str	r0, [r4, r2]
    4b56:	3240      	adds	r2, #64	; 0x40
    4b58:	5083      	str	r3, [r0, r2]
    4b5a:	3204      	adds	r2, #4
    4b5c:	5083      	str	r3, [r0, r2]
    4b5e:	3301      	adds	r3, #1
    4b60:	9301      	str	r3, [sp, #4]
    4b62:	2300      	movs	r3, #0
    4b64:	2e00      	cmp	r6, #0
    4b66:	d0d6      	beq.n	4b16 <__register_exitproc+0x3a>
    4b68:	009a      	lsls	r2, r3, #2
    4b6a:	4692      	mov	sl, r2
    4b6c:	4482      	add	sl, r0
    4b6e:	464a      	mov	r2, r9
    4b70:	2188      	movs	r1, #136	; 0x88
    4b72:	4654      	mov	r4, sl
    4b74:	5062      	str	r2, [r4, r1]
    4b76:	22c4      	movs	r2, #196	; 0xc4
    4b78:	0052      	lsls	r2, r2, #1
    4b7a:	4691      	mov	r9, r2
    4b7c:	4481      	add	r9, r0
    4b7e:	464a      	mov	r2, r9
    4b80:	3987      	subs	r1, #135	; 0x87
    4b82:	4099      	lsls	r1, r3
    4b84:	6812      	ldr	r2, [r2, #0]
    4b86:	468b      	mov	fp, r1
    4b88:	430a      	orrs	r2, r1
    4b8a:	4694      	mov	ip, r2
    4b8c:	464a      	mov	r2, r9
    4b8e:	4661      	mov	r1, ip
    4b90:	6011      	str	r1, [r2, #0]
    4b92:	2284      	movs	r2, #132	; 0x84
    4b94:	4641      	mov	r1, r8
    4b96:	0052      	lsls	r2, r2, #1
    4b98:	50a1      	str	r1, [r4, r2]
    4b9a:	2e02      	cmp	r6, #2
    4b9c:	d1bb      	bne.n	4b16 <__register_exitproc+0x3a>
    4b9e:	0002      	movs	r2, r0
    4ba0:	465c      	mov	r4, fp
    4ba2:	328d      	adds	r2, #141	; 0x8d
    4ba4:	32ff      	adds	r2, #255	; 0xff
    4ba6:	6811      	ldr	r1, [r2, #0]
    4ba8:	430c      	orrs	r4, r1
    4baa:	6014      	str	r4, [r2, #0]
    4bac:	e7b3      	b.n	4b16 <__register_exitproc+0x3a>
    4bae:	0020      	movs	r0, r4
    4bb0:	304d      	adds	r0, #77	; 0x4d
    4bb2:	30ff      	adds	r0, #255	; 0xff
    4bb4:	50e0      	str	r0, [r4, r3]
    4bb6:	e7a7      	b.n	4b08 <__register_exitproc+0x2c>
    4bb8:	6828      	ldr	r0, [r5, #0]
    4bba:	f000 f839 	bl	4c30 <__retarget_lock_release_recursive>
    4bbe:	2001      	movs	r0, #1
    4bc0:	4240      	negs	r0, r0
    4bc2:	e7b1      	b.n	4b28 <__register_exitproc+0x4c>
    4bc4:	20000470 	.word	0x20000470
    4bc8:	00005064 	.word	0x00005064
    4bcc:	00000000 	.word	0x00000000

00004bd0 <register_fini>:
    4bd0:	4b03      	ldr	r3, [pc, #12]	; (4be0 <register_fini+0x10>)
    4bd2:	b510      	push	{r4, lr}
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d002      	beq.n	4bde <register_fini+0xe>
    4bd8:	4802      	ldr	r0, [pc, #8]	; (4be4 <register_fini+0x14>)
    4bda:	f000 f805 	bl	4be8 <atexit>
    4bde:	bd10      	pop	{r4, pc}
    4be0:	00000000 	.word	0x00000000
    4be4:	00004bf9 	.word	0x00004bf9

00004be8 <atexit>:
    4be8:	b510      	push	{r4, lr}
    4bea:	0001      	movs	r1, r0
    4bec:	2300      	movs	r3, #0
    4bee:	2200      	movs	r2, #0
    4bf0:	2000      	movs	r0, #0
    4bf2:	f7ff ff73 	bl	4adc <__register_exitproc>
    4bf6:	bd10      	pop	{r4, pc}

00004bf8 <__libc_fini_array>:
    4bf8:	b570      	push	{r4, r5, r6, lr}
    4bfa:	4b09      	ldr	r3, [pc, #36]	; (4c20 <__libc_fini_array+0x28>)
    4bfc:	4c09      	ldr	r4, [pc, #36]	; (4c24 <__libc_fini_array+0x2c>)
    4bfe:	1ae4      	subs	r4, r4, r3
    4c00:	10a4      	asrs	r4, r4, #2
    4c02:	d009      	beq.n	4c18 <__libc_fini_array+0x20>
    4c04:	4a08      	ldr	r2, [pc, #32]	; (4c28 <__libc_fini_array+0x30>)
    4c06:	18a5      	adds	r5, r4, r2
    4c08:	00ad      	lsls	r5, r5, #2
    4c0a:	18ed      	adds	r5, r5, r3
    4c0c:	682b      	ldr	r3, [r5, #0]
    4c0e:	3c01      	subs	r4, #1
    4c10:	4798      	blx	r3
    4c12:	3d04      	subs	r5, #4
    4c14:	2c00      	cmp	r4, #0
    4c16:	d1f9      	bne.n	4c0c <__libc_fini_array+0x14>
    4c18:	f000 fa32 	bl	5080 <_fini>
    4c1c:	bd70      	pop	{r4, r5, r6, pc}
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	0000508c 	.word	0x0000508c
    4c24:	00005090 	.word	0x00005090
    4c28:	3fffffff 	.word	0x3fffffff

00004c2c <__retarget_lock_acquire_recursive>:
    4c2c:	4770      	bx	lr
    4c2e:	46c0      	nop			; (mov r8, r8)

00004c30 <__retarget_lock_release_recursive>:
    4c30:	4770      	bx	lr
    4c32:	46c0      	nop			; (mov r8, r8)
    4c34:	00020100 	.word	0x00020100
    4c38:	646e6553 	.word	0x646e6553
    4c3c:	63206120 	.word	0x63206120
    4c40:	616d6d6f 	.word	0x616d6d6f
    4c44:	7420646e 	.word	0x7420646e
    4c48:	6574206f 	.word	0x6574206f
    4c4c:	69207473 	.word	0x69207473
    4c50:	756f2074 	.word	0x756f2074
    4c54:	0a0a2174 	.word	0x0a0a2174
    4c58:	00000000 	.word	0x00000000
    4c5c:	6d6d6f43 	.word	0x6d6d6f43
    4c60:	20646e61 	.word	0x20646e61
    4c64:	7473696c 	.word	0x7473696c
    4c68:	00000a3a 	.word	0x00000a3a
    4c6c:	726f6c22 	.word	0x726f6c22
    4c70:	65685f61 	.word	0x65685f61
    4c74:	5f6f6c6c 	.word	0x5f6f6c6c
    4c78:	6c726f77 	.word	0x6c726f77
    4c7c:	2d202264 	.word	0x2d202264
    4c80:	6573203e 	.word	0x6573203e
    4c84:	2073646e 	.word	0x2073646e
    4c88:	6c6c6568 	.word	0x6c6c6568
    4c8c:	6f77206f 	.word	0x6f77206f
    4c90:	20646c72 	.word	0x20646c72
    4c94:	6f726874 	.word	0x6f726874
    4c98:	20686775 	.word	0x20686775
    4c9c:	61526f4c 	.word	0x61526f4c
    4ca0:	64617220 	.word	0x64617220
    4ca4:	0a2e6f69 	.word	0x0a2e6f69
    4ca8:	00000000 	.word	0x00000000
    4cac:	726f6c22 	.word	0x726f6c22
    4cb0:	6e695f61 	.word	0x6e695f61
    4cb4:	65676574 	.word	0x65676574
    4cb8:	22235f72 	.word	0x22235f72
    4cbc:	203e2d20 	.word	0x203e2d20
    4cc0:	646e6573 	.word	0x646e6573
    4cc4:	6e612073 	.word	0x6e612073
    4cc8:	43534120 	.word	0x43534120
    4ccc:	69204949 	.word	0x69204949
    4cd0:	6765746e 	.word	0x6765746e
    4cd4:	74207265 	.word	0x74207265
    4cd8:	756f7268 	.word	0x756f7268
    4cdc:	4c206867 	.word	0x4c206867
    4ce0:	2061526f 	.word	0x2061526f
    4ce4:	69646172 	.word	0x69646172
    4ce8:	7228206f 	.word	0x7228206f
    4cec:	616c7065 	.word	0x616c7065
    4cf0:	23206563 	.word	0x23206563
    4cf4:	74697720 	.word	0x74697720
    4cf8:	20612068 	.word	0x20612068
    4cfc:	696c6176 	.word	0x696c6176
    4d00:	6e692064 	.word	0x6e692064
    4d04:	65676574 	.word	0x65676574
    4d08:	000a2e72 	.word	0x000a2e72
    4d0c:	66666f22 	.word	0x66666f22
    4d10:	3e2d2022 	.word	0x3e2d2022
    4d14:	72757420 	.word	0x72757420
    4d18:	666f206e 	.word	0x666f206e
    4d1c:	000a2e66 	.word	0x000a2e66
    4d20:	6c6c6568 	.word	0x6c6c6568
    4d24:	6f77206f 	.word	0x6f77206f
    4d28:	00646c72 	.word	0x00646c72
    4d2c:	6e617254 	.word	0x6e617254
    4d30:	74696d73 	.word	0x74696d73
    4d34:	20646574 	.word	0x20646574
    4d38:	6c6c6568 	.word	0x6c6c6568
    4d3c:	6f77206f 	.word	0x6f77206f
    4d40:	20646c72 	.word	0x20646c72
    4d44:	6f726874 	.word	0x6f726874
    4d48:	20686775 	.word	0x20686775
    4d4c:	61526f4c 	.word	0x61526f4c
    4d50:	00000a21 	.word	0x00000a21
    4d54:	61526f4c 	.word	0x61526f4c
    4d58:	6d697420 	.word	0x6d697420
    4d5c:	6f206465 	.word	0x6f206465
    4d60:	0a217475 	.word	0x0a217475
    4d64:	00000000 	.word	0x00000000
    4d68:	6e617254 	.word	0x6e617254
    4d6c:	74696d73 	.word	0x74696d73
    4d70:	20646574 	.word	0x20646574
    4d74:	00000000 	.word	0x00000000
    4d78:	00006e6f 	.word	0x00006e6f
    4d7c:	65636552 	.word	0x65636552
    4d80:	64657669 	.word	0x64657669
    4d84:	206e6f20 	.word	0x206e6f20
    4d88:	6d6d6f63 	.word	0x6d6d6f63
    4d8c:	21646e61 	.word	0x21646e61
    4d90:	72755420 	.word	0x72755420
    4d94:	676e696e 	.word	0x676e696e
    4d98:	2e6e6f20 	.word	0x2e6e6f20
    4d9c:	0a0a2e2e 	.word	0x0a0a2e2e
    4da0:	00000000 	.word	0x00000000
    4da4:	61726f6c 	.word	0x61726f6c
    4da8:	6c65685f 	.word	0x6c65685f
    4dac:	775f6f6c 	.word	0x775f6f6c
    4db0:	646c726f 	.word	0x646c726f
    4db4:	00000000 	.word	0x00000000
    4db8:	0066666f 	.word	0x0066666f
    4dbc:	65636552 	.word	0x65636552
    4dc0:	64657669 	.word	0x64657669
    4dc4:	66666f20 	.word	0x66666f20
    4dc8:	6d6f6320 	.word	0x6d6f6320
    4dcc:	646e616d 	.word	0x646e616d
    4dd0:	75542021 	.word	0x75542021
    4dd4:	6e696e72 	.word	0x6e696e72
    4dd8:	666f2067 	.word	0x666f2067
    4ddc:	2e2e2e66 	.word	0x2e2e2e66
    4de0:	0000000a 	.word	0x0000000a
    4de4:	20425355 	.word	0x20425355
    4de8:	67756c50 	.word	0x67756c50
    4dec:	20646567 	.word	0x20646567
    4df0:	0a216e69 	.word	0x0a216e69
    4df4:	00000000 	.word	0x00000000
    4df8:	61726f6c 	.word	0x61726f6c
    4dfc:	746e695f 	.word	0x746e695f
    4e00:	72656765 	.word	0x72656765
    4e04:	0000005f 	.word	0x0000005f
    4e08:	00000c20 	.word	0x00000c20
    4e0c:	00000c7e 	.word	0x00000c7e
    4e10:	00000c86 	.word	0x00000c86
    4e14:	00000c8e 	.word	0x00000c8e
    4e18:	00000c96 	.word	0x00000c96
    4e1c:	00000c9e 	.word	0x00000c9e
    4e20:	00000ca6 	.word	0x00000ca6
    4e24:	00000cae 	.word	0x00000cae
    4e28:	00000cb6 	.word	0x00000cb6
    4e2c:	00000ce6 	.word	0x00000ce6
    4e30:	00000cee 	.word	0x00000cee
    4e34:	00000cf6 	.word	0x00000cf6
    4e38:	00000cfe 	.word	0x00000cfe
    4e3c:	00000d06 	.word	0x00000d06
    4e40:	00000d0e 	.word	0x00000d0e
    4e44:	0000ffff 	.word	0x0000ffff
    4e48:	43024302 	.word	0x43024302
    4e4c:	00000000 	.word	0x00000000
    4e50:	00001dbe 	.word	0x00001dbe
    4e54:	00001d22 	.word	0x00001d22
    4e58:	00001d58 	.word	0x00001d58
    4e5c:	00001d86 	.word	0x00001d86
    4e60:	00001dbe 	.word	0x00001dbe
    4e64:	00001dbe 	.word	0x00001dbe
    4e68:	00001da4 	.word	0x00001da4
    4e6c:	00001d58 	.word	0x00001d58
    4e70:	00001dbe 	.word	0x00001dbe
    4e74:	00001dbe 	.word	0x00001dbe
    4e78:	00001dbe 	.word	0x00001dbe
    4e7c:	00001dbe 	.word	0x00001dbe
    4e80:	00001dbe 	.word	0x00001dbe
    4e84:	00001dbe 	.word	0x00001dbe
    4e88:	00001dbe 	.word	0x00001dbe
    4e8c:	00001d34 	.word	0x00001d34
    4e90:	000024c0 	.word	0x000024c0
    4e94:	0000249a 	.word	0x0000249a
    4e98:	000026c2 	.word	0x000026c2
    4e9c:	00002474 	.word	0x00002474
    4ea0:	000026c2 	.word	0x000026c2
    4ea4:	000023e6 	.word	0x000023e6
    4ea8:	0000246a 	.word	0x0000246a
    4eac:	000026c2 	.word	0x000026c2
    4eb0:	00002402 	.word	0x00002402
    4eb4:	0000241a 	.word	0x0000241a
    4eb8:	000026fe 	.word	0x000026fe
    4ebc:	000026f0 	.word	0x000026f0
    4ec0:	0000272e 	.word	0x0000272e
    4ec4:	000026fe 	.word	0x000026fe
    4ec8:	00002810 	.word	0x00002810
    4ecc:	00002830 	.word	0x00002830
    4ed0:	00002740 	.word	0x00002740
    4ed4:	0000278a 	.word	0x0000278a
    4ed8:	00002846 	.word	0x00002846

00004edc <_usbd_driver>:
    4edc:	000010f9 00001179 000011c9 000012a9     ....y...........
    4eec:	000013d9 00000000 000033d8 000033f0     .........3...3..
    4efc:	000033dc 000033e0 000033e4 000033e8     .3...3...3...3..
    4f0c:	00003454 00003480 000034a4 000034c8     T4...4...4...4..
    4f1c:	000034ec 00003510 000036a8 000036d2     .4...5...6...6..
    4f2c:	00003700 00003732 00003764 00003796     .7..27..d7...7..
    4f3c:	000038ea 000038c0 000038c6 000038cc     .8...8...8...8..
    4f4c:	000038d2 000038d8 000038de 000038e4     .8...8...8...8..
    4f5c:	00003a1e 00003a32 00003a46 00003a5a     .:..2:..F:..Z:..
    4f6c:	00003a6e 00003a82 00060003 00040003     n:...:..........
    4f7c:	00070003 00050003 00120002 00100002     ................
    4f8c:	00130002 00110002 000a0003 00080003     ................
    4f9c:	000b0003 00090003 00120003 00100003     ................
    4fac:	00130003 00110003 000a0103 000c0003     ................
    4fbc:	000b0103 00090103 00160103 00160003     ................
    4fcc:	00170103 00170003                       ........

00004fd4 <desc_device>:
    4fd4:	02000112 400102ef 4001cafe 02010100     .......@...@....
    4fe4:	00000103                                ....

00004fe8 <desc_fs_configuration>:
    4fe8:	004b0209 80000102 000b0832 00020202     ..K.....2.......
    4ff8:	00040900 02020100 24050400 05012000     ...........$. ..
    5008:	01000124 02022404 00062405 81050701     $....$...$......
    5018:	10000803 00010409 00000a02 02050700     ................
    5028:	00004002 02820507 00000040              .@......@...

00005034 <__compound_literal.0>:
    5034:	00000409 796e6954 00425355 796e6954     ....TinyUSB.Tiny
    5044:	20425355 69766544 00006563 34333231     USB Device..1234
    5054:	00003635 796e6954 20425355 00434443     56..TinyUSB CDC.

00005064 <_global_impure_ptr>:
    5064:	20000048                                H.. 

00005068 <_init>:
    5068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    506a:	46c0      	nop			; (mov r8, r8)
    506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    506e:	bc08      	pop	{r3}
    5070:	469e      	mov	lr, r3
    5072:	4770      	bx	lr

00005074 <__init_array_start>:
    5074:	00004bd1 	.word	0x00004bd1

00005078 <__frame_dummy_init_array_entry>:
    5078:	000000dd 00000711                       ........

00005080 <_fini>:
    5080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5082:	46c0      	nop			; (mov r8, r8)
    5084:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5086:	bc08      	pop	{r3}
    5088:	469e      	mov	lr, r3
    508a:	4770      	bx	lr

0000508c <__fini_array_start>:
    508c:	000000b5 	.word	0x000000b5
